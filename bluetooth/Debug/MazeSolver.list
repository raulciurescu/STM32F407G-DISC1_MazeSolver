
MazeSolver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800d284  0800d284  0000e284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2f4  0800d2f4  0000f088  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2f4  0800d2f4  0000e2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2fc  0800d2fc  0000f088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2fc  0800d2fc  0000e2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d300  0800d300  0000e300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800d304  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f088  2**0
                  CONTENTS
 10 .bss          00000b2c  20000088  20000088  0000f088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bb4  20000bb4  0000f088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f91e  00000000  00000000  0000f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a12  00000000  00000000  0002e9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa8  00000000  00000000  000333e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b0  00000000  00000000  00034e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026849  00000000  00000000  00036340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024030  00000000  00000000  0005cb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d854e  00000000  00000000  00080bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00159107  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000798c  00000000  00000000  0015914c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00160ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d26c 	.word	0x0800d26c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800d26c 	.word	0x0800d26c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b96a 	b.w	8000d38 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	460c      	mov	r4, r1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d14e      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a88:	4694      	mov	ip, r2
 8000a8a:	458c      	cmp	ip, r1
 8000a8c:	4686      	mov	lr, r0
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	d962      	bls.n	8000b5a <__udivmoddi4+0xde>
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0320 	rsb	r3, r2, #32
 8000a9a:	4091      	lsls	r1, r2
 8000a9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa4:	4319      	orrs	r1, r3
 8000aa6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aaa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aae:	fa1f f68c 	uxth.w	r6, ip
 8000ab2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ab6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aba:	fb07 1114 	mls	r1, r7, r4, r1
 8000abe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac2:	fb04 f106 	mul.w	r1, r4, r6
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ad2:	f080 8112 	bcs.w	8000cfa <__udivmoddi4+0x27e>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 810f 	bls.w	8000cfa <__udivmoddi4+0x27e>
 8000adc:	3c02      	subs	r4, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a59      	subs	r1, r3, r1
 8000ae2:	fa1f f38e 	uxth.w	r3, lr
 8000ae6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aea:	fb07 1110 	mls	r1, r7, r0, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb00 f606 	mul.w	r6, r0, r6
 8000af6:	429e      	cmp	r6, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x94>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b02:	f080 80fc 	bcs.w	8000cfe <__udivmoddi4+0x282>
 8000b06:	429e      	cmp	r6, r3
 8000b08:	f240 80f9 	bls.w	8000cfe <__udivmoddi4+0x282>
 8000b0c:	4463      	add	r3, ip
 8000b0e:	3802      	subs	r0, #2
 8000b10:	1b9b      	subs	r3, r3, r6
 8000b12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b16:	2100      	movs	r1, #0
 8000b18:	b11d      	cbz	r5, 8000b22 <__udivmoddi4+0xa6>
 8000b1a:	40d3      	lsrs	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d905      	bls.n	8000b36 <__udivmoddi4+0xba>
 8000b2a:	b10d      	cbz	r5, 8000b30 <__udivmoddi4+0xb4>
 8000b2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b30:	2100      	movs	r1, #0
 8000b32:	4608      	mov	r0, r1
 8000b34:	e7f5      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000b36:	fab3 f183 	clz	r1, r3
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d146      	bne.n	8000bcc <__udivmoddi4+0x150>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xcc>
 8000b42:	4290      	cmp	r0, r2
 8000b44:	f0c0 80f0 	bcc.w	8000d28 <__udivmoddi4+0x2ac>
 8000b48:	1a86      	subs	r6, r0, r2
 8000b4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d0e6      	beq.n	8000b22 <__udivmoddi4+0xa6>
 8000b54:	e9c5 6300 	strd	r6, r3, [r5]
 8000b58:	e7e3      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	f040 8090 	bne.w	8000c80 <__udivmoddi4+0x204>
 8000b60:	eba1 040c 	sub.w	r4, r1, ip
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	fa1f f78c 	uxth.w	r7, ip
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b76:	fb08 4416 	mls	r4, r8, r6, r4
 8000b7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b7e:	fb07 f006 	mul.w	r0, r7, r6
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x11c>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x11a>
 8000b90:	4298      	cmp	r0, r3
 8000b92:	f200 80cd 	bhi.w	8000d30 <__udivmoddi4+0x2b4>
 8000b96:	4626      	mov	r6, r4
 8000b98:	1a1c      	subs	r4, r3, r0
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ba2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ba6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000baa:	fb00 f707 	mul.w	r7, r0, r7
 8000bae:	429f      	cmp	r7, r3
 8000bb0:	d908      	bls.n	8000bc4 <__udivmoddi4+0x148>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bba:	d202      	bcs.n	8000bc2 <__udivmoddi4+0x146>
 8000bbc:	429f      	cmp	r7, r3
 8000bbe:	f200 80b0 	bhi.w	8000d22 <__udivmoddi4+0x2a6>
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	1bdb      	subs	r3, r3, r7
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	e7a5      	b.n	8000b18 <__udivmoddi4+0x9c>
 8000bcc:	f1c1 0620 	rsb	r6, r1, #32
 8000bd0:	408b      	lsls	r3, r1
 8000bd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd6:	431f      	orrs	r7, r3
 8000bd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bdc:	fa04 f301 	lsl.w	r3, r4, r1
 8000be0:	ea43 030c 	orr.w	r3, r3, ip
 8000be4:	40f4      	lsrs	r4, r6
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	0c38      	lsrs	r0, r7, #16
 8000bec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bf4:	fa1f fc87 	uxth.w	ip, r7
 8000bf8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c00:	fb0e f90c 	mul.w	r9, lr, ip
 8000c04:	45a1      	cmp	r9, r4
 8000c06:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0a:	d90a      	bls.n	8000c22 <__udivmoddi4+0x1a6>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c12:	f080 8084 	bcs.w	8000d1e <__udivmoddi4+0x2a2>
 8000c16:	45a1      	cmp	r9, r4
 8000c18:	f240 8081 	bls.w	8000d1e <__udivmoddi4+0x2a2>
 8000c1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c20:	443c      	add	r4, r7
 8000c22:	eba4 0409 	sub.w	r4, r4, r9
 8000c26:	fa1f f983 	uxth.w	r9, r3
 8000c2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d907      	bls.n	8000c4e <__udivmoddi4+0x1d2>
 8000c3e:	193c      	adds	r4, r7, r4
 8000c40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c44:	d267      	bcs.n	8000d16 <__udivmoddi4+0x29a>
 8000c46:	45a4      	cmp	ip, r4
 8000c48:	d965      	bls.n	8000d16 <__udivmoddi4+0x29a>
 8000c4a:	3b02      	subs	r3, #2
 8000c4c:	443c      	add	r4, r7
 8000c4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c52:	fba0 9302 	umull	r9, r3, r0, r2
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	429c      	cmp	r4, r3
 8000c5c:	46ce      	mov	lr, r9
 8000c5e:	469c      	mov	ip, r3
 8000c60:	d351      	bcc.n	8000d06 <__udivmoddi4+0x28a>
 8000c62:	d04e      	beq.n	8000d02 <__udivmoddi4+0x286>
 8000c64:	b155      	cbz	r5, 8000c7c <__udivmoddi4+0x200>
 8000c66:	ebb8 030e 	subs.w	r3, r8, lr
 8000c6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c72:	40cb      	lsrs	r3, r1
 8000c74:	431e      	orrs	r6, r3
 8000c76:	40cc      	lsrs	r4, r1
 8000c78:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e750      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000c80:	f1c2 0320 	rsb	r3, r2, #32
 8000c84:	fa20 f103 	lsr.w	r1, r0, r3
 8000c88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c90:	4094      	lsls	r4, r2
 8000c92:	430c      	orrs	r4, r1
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c9c:	fa1f f78c 	uxth.w	r7, ip
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ca8:	0c23      	lsrs	r3, r4, #16
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f107 	mul.w	r1, r0, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x24c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cbe:	d22c      	bcs.n	8000d1a <__udivmoddi4+0x29e>
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d92a      	bls.n	8000d1a <__udivmoddi4+0x29e>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb01 f307 	mul.w	r3, r1, r7
 8000cdc:	42a3      	cmp	r3, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x276>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ce8:	d213      	bcs.n	8000d12 <__udivmoddi4+0x296>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d911      	bls.n	8000d12 <__udivmoddi4+0x296>
 8000cee:	3902      	subs	r1, #2
 8000cf0:	4464      	add	r4, ip
 8000cf2:	1ae4      	subs	r4, r4, r3
 8000cf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf8:	e739      	b.n	8000b6e <__udivmoddi4+0xf2>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	e6f0      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e706      	b.n	8000b10 <__udivmoddi4+0x94>
 8000d02:	45c8      	cmp	r8, r9
 8000d04:	d2ae      	bcs.n	8000c64 <__udivmoddi4+0x1e8>
 8000d06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d0e:	3801      	subs	r0, #1
 8000d10:	e7a8      	b.n	8000c64 <__udivmoddi4+0x1e8>
 8000d12:	4631      	mov	r1, r6
 8000d14:	e7ed      	b.n	8000cf2 <__udivmoddi4+0x276>
 8000d16:	4603      	mov	r3, r0
 8000d18:	e799      	b.n	8000c4e <__udivmoddi4+0x1d2>
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	e7d4      	b.n	8000cc8 <__udivmoddi4+0x24c>
 8000d1e:	46d6      	mov	lr, sl
 8000d20:	e77f      	b.n	8000c22 <__udivmoddi4+0x1a6>
 8000d22:	4463      	add	r3, ip
 8000d24:	3802      	subs	r0, #2
 8000d26:	e74d      	b.n	8000bc4 <__udivmoddi4+0x148>
 8000d28:	4606      	mov	r6, r0
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e70f      	b.n	8000b50 <__udivmoddi4+0xd4>
 8000d30:	3e02      	subs	r6, #2
 8000d32:	4463      	add	r3, ip
 8000d34:	e730      	b.n	8000b98 <__udivmoddi4+0x11c>
 8000d36:	bf00      	nop

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d42:	f001 f9ad 	bl	80020a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d46:	f000 f853 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4a:	f000 fa67 	bl	800121c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d4e:	f000 f8b9 	bl	8000ec4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d52:	f000 f8e5 	bl	8000f20 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d56:	f000 f913 	bl	8000f80 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d5a:	f00b f83d 	bl	800bdd8 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 8000d5e:	f000 fa33 	bl	80011c8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000d62:	f000 f943 	bl	8000fec <MX_TIM1_Init>
  MX_TIM4_Init();
 8000d66:	f000 f9cb 	bl	8001100 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	481a      	ldr	r0, [pc, #104]	@ (8000dd8 <main+0x9c>)
 8000d6e:	f005 fcc3 	bl	80066f8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000d72:	2104      	movs	r1, #4
 8000d74:	4818      	ldr	r0, [pc, #96]	@ (8000dd8 <main+0x9c>)
 8000d76:	f005 fcbf 	bl	80066f8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	4816      	ldr	r0, [pc, #88]	@ (8000dd8 <main+0x9c>)
 8000d7e:	f005 fcbb 	bl	80066f8 <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&htim4 , TIM_CHANNEL_3);
 8000d82:	2108      	movs	r1, #8
 8000d84:	4815      	ldr	r0, [pc, #84]	@ (8000ddc <main+0xa0>)
 8000d86:	f005 fb95 	bl	80064b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4 , TIM_CHANNEL_4);
 8000d8a:	210c      	movs	r1, #12
 8000d8c:	4813      	ldr	r0, [pc, #76]	@ (8000ddc <main+0xa0>)
 8000d8e:	f005 fb91 	bl	80064b4 <HAL_TIM_PWM_Start>
  //uint8_t ce_primesc;
  //GPIO_PinState pinState;

	int i = 1 , j = 10 ;
 8000d92:	2301      	movs	r3, #1
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	230a      	movs	r3, #10
 8000d98:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d9a:	f00b f843 	bl	800be24 <MX_USB_HOST_Process>
//    HAL_Delay(100);
//    curbaStanga(25);
//    HAL_Delay(1000);
//    stopMotoare();

    mersInainte(75);
 8000d9e:	204b      	movs	r0, #75	@ 0x4b
 8000da0:	f000 fb78 	bl	8001494 <mersInainte>
//    	  mersInainte(i);
//    	  HAL_Delay(50);
//      }


    HCSR04_Read(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f000 fd9b 	bl	80018e0 <HCSR04_Read>
    HCSR04_Read(2);
 8000daa:	2002      	movs	r0, #2
 8000dac:	f000 fd98 	bl	80018e0 <HCSR04_Read>
    HCSR04_Read(3);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 fd95 	bl	80018e0 <HCSR04_Read>
    printf("S1 : %d			S2 : %d			S3 : %d\r\n",Distance1,Distance2,Distance3);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <main+0xa4>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <main+0xa8>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <main+0xac>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	4809      	ldr	r0, [pc, #36]	@ (8000dec <main+0xb0>)
 8000dc8:	f00b fc90 	bl	800c6ec <iprintf>
    HAL_Delay(100);
 8000dcc:	2064      	movs	r0, #100	@ 0x64
 8000dce:	f001 f9d9 	bl	8002184 <HAL_Delay>
  {
 8000dd2:	bf00      	nop
 8000dd4:	e7e1      	b.n	8000d9a <main+0x5e>
 8000dd6:	bf00      	nop
 8000dd8:	20000198 	.word	0x20000198
 8000ddc:	200001e0 	.word	0x200001e0
 8000de0:	2000027d 	.word	0x2000027d
 8000de4:	2000028d 	.word	0x2000028d
 8000de8:	2000029d 	.word	0x2000029d
 8000dec:	0800d284 	.word	0x0800d284

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	@ 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0320 	add.w	r3, r7, #32
 8000dfa:	2230      	movs	r2, #48	@ 0x30
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f00b fcc9 	bl	800c796 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <SystemClock_Config+0xcc>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <SystemClock_Config+0xcc>)
 8000e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e24:	4b25      	ldr	r3, [pc, #148]	@ (8000ebc <SystemClock_Config+0xcc>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <SystemClock_Config+0xd0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a21      	ldr	r2, [pc, #132]	@ (8000ec0 <SystemClock_Config+0xd0>)
 8000e3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <SystemClock_Config+0xd0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e56:	2302      	movs	r3, #2
 8000e58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e60:	2308      	movs	r3, #8
 8000e62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e64:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e6e:	2307      	movs	r3, #7
 8000e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	4618      	mov	r0, r3
 8000e78:	f004 fc1a 	bl	80056b0 <HAL_RCC_OscConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e82:	f000 fb01 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e86:	230f      	movs	r3, #15
 8000e88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e92:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2105      	movs	r1, #5
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f004 fe7b 	bl	8005ba0 <HAL_RCC_ClockConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000eb0:	f000 faea 	bl	8001488 <Error_Handler>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3750      	adds	r7, #80	@ 0x50
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40007000 	.word	0x40007000

08000ec4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <MX_I2C1_Init+0x50>)
 8000eca:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <MX_I2C1_Init+0x54>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_I2C1_Init+0x50>)
 8000ed0:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <MX_I2C1_Init+0x58>)
 8000ed2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_I2C1_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_I2C1_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_I2C1_Init+0x50>)
 8000ee2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ee6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <MX_I2C1_Init+0x50>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_I2C1_Init+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <MX_I2C1_Init+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_I2C1_Init+0x50>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_I2C1_Init+0x50>)
 8000f02:	f003 fdf1 	bl	8004ae8 <HAL_I2C_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f0c:	f000 fabc 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200000a4 	.word	0x200000a4
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	000186a0 	.word	0x000186a0

08000f20 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <MX_I2S3_Init+0x54>)
 8000f26:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <MX_I2S3_Init+0x58>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <MX_I2S3_Init+0x54>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f30:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <MX_I2S3_Init+0x54>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_I2S3_Init+0x54>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <MX_I2S3_Init+0x54>)
 8000f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f44:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_I2S3_Init+0x54>)
 8000f48:	4a0c      	ldr	r2, [pc, #48]	@ (8000f7c <MX_I2S3_Init+0x5c>)
 8000f4a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_I2S3_Init+0x54>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <MX_I2S3_Init+0x54>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_I2S3_Init+0x54>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_I2S3_Init+0x54>)
 8000f60:	f003 ff06 	bl	8004d70 <HAL_I2S_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f6a:	f000 fa8d 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000f8 	.word	0x200000f8
 8000f78:	40003c00 	.word	0x40003c00
 8000f7c:	00017700 	.word	0x00017700

08000f80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f84:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000f86:	4a18      	ldr	r2, [pc, #96]	@ (8000fe8 <MX_SPI1_Init+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000f8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f92:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fcc:	220a      	movs	r2, #10
 8000fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fd2:	f005 f947 	bl	8006264 <HAL_SPI_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fdc:	f000 fa54 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000140 	.word	0x20000140
 8000fe8:	40013000 	.word	0x40013000

08000fec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001016:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 8001018:	4a38      	ldr	r2, [pc, #224]	@ (80010fc <MX_TIM1_Init+0x110>)
 800101a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84 - 1;
 800101c:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 800101e:	2253      	movs	r2, #83	@ 0x53
 8001020:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001028:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 800102a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800102e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b31      	ldr	r3, [pc, #196]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001036:	4b30      	ldr	r3, [pc, #192]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001042:	482d      	ldr	r0, [pc, #180]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 8001044:	f005 f997 	bl	8006376 <HAL_TIM_Base_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800104e:	f000 fa1b 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001056:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	4619      	mov	r1, r3
 800105e:	4826      	ldr	r0, [pc, #152]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 8001060:	f005 fec0 	bl	8006de4 <HAL_TIM_ConfigClockSource>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800106a:	f000 fa0d 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800106e:	4822      	ldr	r0, [pc, #136]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 8001070:	f005 fae8 	bl	8006644 <HAL_TIM_IC_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800107a:	f000 fa05 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	481a      	ldr	r0, [pc, #104]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 800108e:	f006 fc23 	bl	80078d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001098:	f000 f9f6 	bl	8001488 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800109c:	2300      	movs	r3, #0
 800109e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	4811      	ldr	r0, [pc, #68]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 80010b4:	f005 fd38 	bl	8006b28 <HAL_TIM_IC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80010be:	f000 f9e3 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	2204      	movs	r2, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	480b      	ldr	r0, [pc, #44]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 80010ca:	f005 fd2d 	bl	8006b28 <HAL_TIM_IC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80010d4:	f000 f9d8 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	2208      	movs	r2, #8
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <MX_TIM1_Init+0x10c>)
 80010e0:	f005 fd22 	bl	8006b28 <HAL_TIM_IC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80010ea:	f000 f9cd 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000198 	.word	0x20000198
 80010fc:	40010000 	.word	0x40010000

08001100 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001122:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <MX_TIM4_Init+0xc0>)
 8001124:	4a27      	ldr	r2, [pc, #156]	@ (80011c4 <MX_TIM4_Init+0xc4>)
 8001126:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84 - 1;
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <MX_TIM4_Init+0xc0>)
 800112a:	2253      	movs	r2, #83	@ 0x53
 800112c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b24      	ldr	r3, [pc, #144]	@ (80011c0 <MX_TIM4_Init+0xc0>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001134:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <MX_TIM4_Init+0xc0>)
 8001136:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800113a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <MX_TIM4_Init+0xc0>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <MX_TIM4_Init+0xc0>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001148:	481d      	ldr	r0, [pc, #116]	@ (80011c0 <MX_TIM4_Init+0xc0>)
 800114a:	f005 f963 	bl	8006414 <HAL_TIM_PWM_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001154:	f000 f998 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	4619      	mov	r1, r3
 8001166:	4816      	ldr	r0, [pc, #88]	@ (80011c0 <MX_TIM4_Init+0xc0>)
 8001168:	f006 fbb6 	bl	80078d8 <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001172:	f000 f989 	bl	8001488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001176:	2360      	movs	r3, #96	@ 0x60
 8001178:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2208      	movs	r2, #8
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <MX_TIM4_Init+0xc0>)
 800118e:	f005 fd67 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001198:	f000 f976 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	220c      	movs	r2, #12
 80011a0:	4619      	mov	r1, r3
 80011a2:	4807      	ldr	r0, [pc, #28]	@ (80011c0 <MX_TIM4_Init+0xc0>)
 80011a4:	f005 fd5c 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80011ae:	f000 f96b 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011b2:	4803      	ldr	r0, [pc, #12]	@ (80011c0 <MX_TIM4_Init+0xc0>)
 80011b4:	f000 fdac 	bl	8001d10 <HAL_TIM_MspPostInit>

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	@ 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001e0 	.word	0x200001e0
 80011c4:	40000800 	.word	0x40000800

080011c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_USART3_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <MX_USART3_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <MX_USART3_UART_Init+0x4c>)
 80011d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_USART3_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_USART3_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <MX_USART3_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_USART3_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <MX_USART3_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_USART3_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_USART3_UART_Init+0x4c>)
 8001200:	f006 fbfa 	bl	80079f8 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f000 f93d 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000228 	.word	0x20000228
 8001218:	40004800 	.word	0x40004800

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	@ 0x30
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	4b8e      	ldr	r3, [pc, #568]	@ (8001470 <MX_GPIO_Init+0x254>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a8d      	ldr	r2, [pc, #564]	@ (8001470 <MX_GPIO_Init+0x254>)
 800123c:	f043 0310 	orr.w	r3, r3, #16
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b8b      	ldr	r3, [pc, #556]	@ (8001470 <MX_GPIO_Init+0x254>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	4b87      	ldr	r3, [pc, #540]	@ (8001470 <MX_GPIO_Init+0x254>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a86      	ldr	r2, [pc, #536]	@ (8001470 <MX_GPIO_Init+0x254>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b84      	ldr	r3, [pc, #528]	@ (8001470 <MX_GPIO_Init+0x254>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b80      	ldr	r3, [pc, #512]	@ (8001470 <MX_GPIO_Init+0x254>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a7f      	ldr	r2, [pc, #508]	@ (8001470 <MX_GPIO_Init+0x254>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b7d      	ldr	r3, [pc, #500]	@ (8001470 <MX_GPIO_Init+0x254>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b79      	ldr	r3, [pc, #484]	@ (8001470 <MX_GPIO_Init+0x254>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a78      	ldr	r2, [pc, #480]	@ (8001470 <MX_GPIO_Init+0x254>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b76      	ldr	r3, [pc, #472]	@ (8001470 <MX_GPIO_Init+0x254>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b72      	ldr	r3, [pc, #456]	@ (8001470 <MX_GPIO_Init+0x254>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a71      	ldr	r2, [pc, #452]	@ (8001470 <MX_GPIO_Init+0x254>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001470 <MX_GPIO_Init+0x254>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <MX_GPIO_Init+0x254>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a6a      	ldr	r2, [pc, #424]	@ (8001470 <MX_GPIO_Init+0x254>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b68      	ldr	r3, [pc, #416]	@ (8001470 <MX_GPIO_Init+0x254>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f245 4108 	movw	r1, #21512	@ 0x5408
 80012e0:	4864      	ldr	r0, [pc, #400]	@ (8001474 <MX_GPIO_Init+0x258>)
 80012e2:	f001 fab3 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2101      	movs	r1, #1
 80012ea:	4863      	ldr	r0, [pc, #396]	@ (8001478 <MX_GPIO_Init+0x25c>)
 80012ec:	f001 faae 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin
 80012f0:	2200      	movs	r2, #0
 80012f2:	f247 01d0 	movw	r1, #28880	@ 0x70d0
 80012f6:	4861      	ldr	r0, [pc, #388]	@ (800147c <MX_GPIO_Init+0x260>)
 80012f8:	f001 faa8 	bl	800284c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2128      	movs	r1, #40	@ 0x28
 8001300:	485f      	ldr	r0, [pc, #380]	@ (8001480 <MX_GPIO_Init+0x264>)
 8001302:	f001 faa3 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE10 PE12 PE14 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8001306:	f245 4308 	movw	r3, #21512	@ 0x5408
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4855      	ldr	r0, [pc, #340]	@ (8001474 <MX_GPIO_Init+0x258>)
 8001320:	f001 f8f8 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001324:	2301      	movs	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	484f      	ldr	r0, [pc, #316]	@ (8001478 <MX_GPIO_Init+0x25c>)
 800133c:	f001 f8ea 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001340:	2308      	movs	r3, #8
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001350:	2305      	movs	r3, #5
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4847      	ldr	r0, [pc, #284]	@ (8001478 <MX_GPIO_Init+0x25c>)
 800135c:	f001 f8da 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001360:	2301      	movs	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001364:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	4843      	ldr	r0, [pc, #268]	@ (8001484 <MX_GPIO_Init+0x268>)
 8001376:	f001 f8cd 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800137a:	2304      	movs	r3, #4
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	483c      	ldr	r0, [pc, #240]	@ (8001480 <MX_GPIO_Init+0x264>)
 800138e:	f001 f8c1 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin Audio_RST_Pin
                           PD6 PD7 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin
 8001392:	f247 03d0 	movw	r3, #28880	@ 0x70d0
 8001396:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4834      	ldr	r0, [pc, #208]	@ (800147c <MX_GPIO_Init+0x260>)
 80013ac:	f001 f8b2 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	482c      	ldr	r0, [pc, #176]	@ (8001478 <MX_GPIO_Init+0x25c>)
 80013c6:	f001 f8a5 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013ca:	2320      	movs	r3, #32
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4827      	ldr	r0, [pc, #156]	@ (800147c <MX_GPIO_Init+0x260>)
 80013de:	f001 f899 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80013e2:	2328      	movs	r3, #40	@ 0x28
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4821      	ldr	r0, [pc, #132]	@ (8001480 <MX_GPIO_Init+0x264>)
 80013fa:	f001 f88b 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013fe:	2302      	movs	r3, #2
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001402:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4818      	ldr	r0, [pc, #96]	@ (8001474 <MX_GPIO_Init+0x258>)
 8001414:	f001 f87e 	bl	8002514 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  //Configure GPIO pin for Echo (PE9)

     GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800141c:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
     HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	4811      	ldr	r0, [pc, #68]	@ (8001474 <MX_GPIO_Init+0x258>)
 800142e:	f001 f871 	bl	8002514 <HAL_GPIO_Init>

     //Configure GPIO pin for Echo (PE11)

        GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001432:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001436:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	480b      	ldr	r0, [pc, #44]	@ (8001474 <MX_GPIO_Init+0x258>)
 8001448:	f001 f864 	bl	8002514 <HAL_GPIO_Init>

        //Configure GPIO pin for Echo (PE13)

           GPIO_InitStruct.Pin = GPIO_PIN_13;
 800144c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001450:	61fb      	str	r3, [r7, #28]
           GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
           GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
           HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	4804      	ldr	r0, [pc, #16]	@ (8001474 <MX_GPIO_Init+0x258>)
 8001462:	f001 f857 	bl	8002514 <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 8001466:	bf00      	nop
 8001468:	3730      	adds	r7, #48	@ 0x30
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40021000 	.word	0x40021000
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40020400 	.word	0x40020400
 8001484:	40020000 	.word	0x40020000

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <Error_Handler+0x8>

08001494 <mersInainte>:
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);   // PB3 (IN3) -> HIGH
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // PB5 (IN4) -> LOW

}

void mersInainte (uint8_t putere){
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]

	//pornireMotoareFata();

	htim4.Instance->CCR3 = (htim4.Init.Period / 100) * putere ;
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <mersInainte+0x6c>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	4a18      	ldr	r2, [pc, #96]	@ (8001504 <mersInainte+0x70>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	095a      	lsrs	r2, r3, #5
 80014aa:	79f9      	ldrb	r1, [r7, #7]
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <mersInainte+0x6c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	fb01 f202 	mul.w	r2, r1, r2
 80014b4:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);   // PB3 (IN1) -> HIGH
 80014b6:	2201      	movs	r2, #1
 80014b8:	2180      	movs	r1, #128	@ 0x80
 80014ba:	4813      	ldr	r0, [pc, #76]	@ (8001508 <mersInainte+0x74>)
 80014bc:	f001 f9c6 	bl	800284c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET); // PB5 (IN2) -> LOW
 80014c0:	2200      	movs	r2, #0
 80014c2:	2140      	movs	r1, #64	@ 0x40
 80014c4:	4810      	ldr	r0, [pc, #64]	@ (8001508 <mersInainte+0x74>)
 80014c6:	f001 f9c1 	bl	800284c <HAL_GPIO_WritePin>
	htim4.Instance->CCR4 = (htim4.Init.Period / 100) * putere ;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <mersInainte+0x6c>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001504 <mersInainte+0x70>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	095a      	lsrs	r2, r3, #5
 80014d6:	79f9      	ldrb	r1, [r7, #7]
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <mersInainte+0x6c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fb01 f202 	mul.w	r2, r1, r2
 80014e0:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);   // PB3 (IN3) -> HIGH
 80014e2:	2201      	movs	r2, #1
 80014e4:	2120      	movs	r1, #32
 80014e6:	4809      	ldr	r0, [pc, #36]	@ (800150c <mersInainte+0x78>)
 80014e8:	f001 f9b0 	bl	800284c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // PB5 (IN4) -> LOW
 80014ec:	2200      	movs	r2, #0
 80014ee:	2108      	movs	r1, #8
 80014f0:	4806      	ldr	r0, [pc, #24]	@ (800150c <mersInainte+0x78>)
 80014f2:	f001 f9ab 	bl	800284c <HAL_GPIO_WritePin>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200001e0 	.word	0x200001e0
 8001504:	51eb851f 	.word	0x51eb851f
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40020400 	.word	0x40020400

08001510 <_write>:
#include "stm32f4xx_hal.h"  // Include the header file for the STM32 HAL (Hardware Abstraction Layer) library, specific to the STM32F4 series.

extern UART_HandleTypeDef huart3;  // Declare the UART handle for UART3 as external, meaning it’s defined elsewhere in the project.

int _write(int file, char *data, int len)  // Define the _write function, which is typically used to redirect printf() output to a custom destination (e.g., UART).
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *) data, len, HAL_MAX_DELAY);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	b29a      	uxth	r2, r3
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	4804      	ldr	r0, [pc, #16]	@ (8001538 <_write+0x28>)
 8001528:	f006 fab6 	bl	8007a98 <HAL_UART_Transmit>
    // Transmit the data over UART3. The `data` pointer is cast to `uint8_t*` because HAL functions expect this type.
    // The `len` parameter specifies the number of bytes to send, and `HAL_MAX_DELAY` ensures the function waits indefinitely for the transmission to complete.

    return len;  // Return the length of the data sent, which informs the calling function how many bytes were successfully transmitted.
 800152c:	687b      	ldr	r3, [r7, #4]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000228 	.word	0x20000228
 800153c:	00000000 	.word	0x00000000

08001540 <HAL_TIM_IC_CaptureCallback>:
extern TIM_HandleTypeDef htim1;  // If it's declared elsewhere

 volatile unsigned int flag ;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7f1b      	ldrb	r3, [r3, #28]
 800154c:	2b01      	cmp	r3, #1
 800154e:	f040 8083 	bne.w	8001658 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured1==0) // if the first value is not captured
 8001552:	4b99      	ldr	r3, [pc, #612]	@ (80017b8 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d11a      	bne.n	8001590 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val11 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800155a:	2100      	movs	r1, #0
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f005 fd09 	bl	8006f74 <HAL_TIM_ReadCapturedValue>
 8001562:	4603      	mov	r3, r0
 8001564:	4a95      	ldr	r2, [pc, #596]	@ (80017bc <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001566:	6013      	str	r3, [r2, #0]
			Is_First_Captured1 = 1;  // set the first captured as true
 8001568:	4b93      	ldr	r3, [pc, #588]	@ (80017b8 <HAL_TIM_IC_CaptureCallback+0x278>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a1a      	ldr	r2, [r3, #32]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 020a 	bic.w	r2, r2, #10
 800157c:	621a      	str	r2, [r3, #32]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a1a      	ldr	r2, [r3, #32]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0202 	orr.w	r2, r2, #2
 800158c:	621a      	str	r2, [r3, #32]
 800158e:	e063      	b.n	8001658 <HAL_TIM_IC_CaptureCallback+0x118>
		}

		else if (Is_First_Captured1==1)   // if the first is already captured
 8001590:	4b89      	ldr	r3, [pc, #548]	@ (80017b8 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d15f      	bne.n	8001658 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			IC_Val21 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001598:	2100      	movs	r1, #0
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f005 fcea 	bl	8006f74 <HAL_TIM_ReadCapturedValue>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a87      	ldr	r2, [pc, #540]	@ (80017c0 <HAL_TIM_IC_CaptureCallback+0x280>)
 80015a4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24

			if (IC_Val21 > IC_Val11)
 80015ae:	4b84      	ldr	r3, [pc, #528]	@ (80017c0 <HAL_TIM_IC_CaptureCallback+0x280>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b82      	ldr	r3, [pc, #520]	@ (80017bc <HAL_TIM_IC_CaptureCallback+0x27c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d907      	bls.n	80015ca <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Difference1 = IC_Val21-IC_Val11;
 80015ba:	4b81      	ldr	r3, [pc, #516]	@ (80017c0 <HAL_TIM_IC_CaptureCallback+0x280>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b7f      	ldr	r3, [pc, #508]	@ (80017bc <HAL_TIM_IC_CaptureCallback+0x27c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	4a7f      	ldr	r2, [pc, #508]	@ (80017c4 <HAL_TIM_IC_CaptureCallback+0x284>)
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e00f      	b.n	80015ea <HAL_TIM_IC_CaptureCallback+0xaa>
			}

			else if (IC_Val11 > IC_Val21)
 80015ca:	4b7c      	ldr	r3, [pc, #496]	@ (80017bc <HAL_TIM_IC_CaptureCallback+0x27c>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b7c      	ldr	r3, [pc, #496]	@ (80017c0 <HAL_TIM_IC_CaptureCallback+0x280>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d909      	bls.n	80015ea <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				Difference1 = (0xffff - IC_Val11) + IC_Val21;
 80015d6:	4b7a      	ldr	r3, [pc, #488]	@ (80017c0 <HAL_TIM_IC_CaptureCallback+0x280>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b78      	ldr	r3, [pc, #480]	@ (80017bc <HAL_TIM_IC_CaptureCallback+0x27c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80015e4:	33ff      	adds	r3, #255	@ 0xff
 80015e6:	4a77      	ldr	r2, [pc, #476]	@ (80017c4 <HAL_TIM_IC_CaptureCallback+0x284>)
 80015e8:	6013      	str	r3, [r2, #0]
			}

			Distance1 = Difference1 * .034/2;
 80015ea:	4b76      	ldr	r3, [pc, #472]	@ (80017c4 <HAL_TIM_IC_CaptureCallback+0x284>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff80 	bl	80004f4 <__aeabi_ui2d>
 80015f4:	a36e      	add	r3, pc, #440	@ (adr r3, 80017b0 <HAL_TIM_IC_CaptureCallback+0x270>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fff5 	bl	80005e8 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800160e:	f7ff f915 	bl	800083c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff f9f7 	bl	8000a0c <__aeabi_d2uiz>
 800161e:	4603      	mov	r3, r0
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b69      	ldr	r3, [pc, #420]	@ (80017c8 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001624:	701a      	strb	r2, [r3, #0]
			Is_First_Captured1 = 0; // set it back to false
 8001626:	4b64      	ldr	r3, [pc, #400]	@ (80017b8 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6a1a      	ldr	r2, [r3, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 020a 	bic.w	r2, r2, #10
 800163a:	621a      	str	r2, [r3, #32]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6a12      	ldr	r2, [r2, #32]
 8001646:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0202 	bic.w	r2, r2, #2
 8001656:	60da      	str	r2, [r3, #12]
		}
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7f1b      	ldrb	r3, [r3, #28]
 800165c:	2b02      	cmp	r3, #2
 800165e:	f040 8083 	bne.w	8001768 <HAL_TIM_IC_CaptureCallback+0x228>
		{
			if (Is_First_Captured2==0) // if the first value is not captured
 8001662:	4b5a      	ldr	r3, [pc, #360]	@ (80017cc <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d11a      	bne.n	80016a0 <HAL_TIM_IC_CaptureCallback+0x160>
			{
				IC_Val12 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 800166a:	2104      	movs	r1, #4
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f005 fc81 	bl	8006f74 <HAL_TIM_ReadCapturedValue>
 8001672:	4603      	mov	r3, r0
 8001674:	4a56      	ldr	r2, [pc, #344]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001676:	6013      	str	r3, [r2, #0]
				Is_First_Captured2 = 1;  // set the first captured as true
 8001678:	4b54      	ldr	r3, [pc, #336]	@ (80017cc <HAL_TIM_IC_CaptureCallback+0x28c>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6a1a      	ldr	r2, [r3, #32]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800168c:	621a      	str	r2, [r3, #32]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6a1a      	ldr	r2, [r3, #32]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0220 	orr.w	r2, r2, #32
 800169c:	621a      	str	r2, [r3, #32]
 800169e:	e063      	b.n	8001768 <HAL_TIM_IC_CaptureCallback+0x228>
			}

			else if (Is_First_Captured2==1)   // if the first is already captured
 80016a0:	4b4a      	ldr	r3, [pc, #296]	@ (80017cc <HAL_TIM_IC_CaptureCallback+0x28c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d15f      	bne.n	8001768 <HAL_TIM_IC_CaptureCallback+0x228>
			{
				IC_Val22 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80016a8:	2104      	movs	r1, #4
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f005 fc62 	bl	8006f74 <HAL_TIM_ReadCapturedValue>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a48      	ldr	r2, [pc, #288]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x294>)
 80016b4:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	@ 0x24

				if (IC_Val22 > IC_Val12)
 80016be:	4b45      	ldr	r3, [pc, #276]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x294>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x290>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d907      	bls.n	80016da <HAL_TIM_IC_CaptureCallback+0x19a>
				{
					Difference2 = IC_Val22-IC_Val12;
 80016ca:	4b42      	ldr	r3, [pc, #264]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x294>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b40      	ldr	r3, [pc, #256]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x290>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	4a40      	ldr	r2, [pc, #256]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x298>)
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	e00f      	b.n	80016fa <HAL_TIM_IC_CaptureCallback+0x1ba>
				}

				else if (IC_Val12 > IC_Val22)
 80016da:	4b3d      	ldr	r3, [pc, #244]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x290>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4b3d      	ldr	r3, [pc, #244]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x294>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d909      	bls.n	80016fa <HAL_TIM_IC_CaptureCallback+0x1ba>
				{
					Difference2 = (0xffff - IC_Val12) + IC_Val22;
 80016e6:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <HAL_TIM_IC_CaptureCallback+0x294>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b39      	ldr	r3, [pc, #228]	@ (80017d0 <HAL_TIM_IC_CaptureCallback+0x290>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80016f4:	33ff      	adds	r3, #255	@ 0xff
 80016f6:	4a38      	ldr	r2, [pc, #224]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x298>)
 80016f8:	6013      	str	r3, [r2, #0]
				}

				Distance2 = Difference2 * .034/2;
 80016fa:	4b37      	ldr	r3, [pc, #220]	@ (80017d8 <HAL_TIM_IC_CaptureCallback+0x298>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fef8 	bl	80004f4 <__aeabi_ui2d>
 8001704:	a32a      	add	r3, pc, #168	@ (adr r3, 80017b0 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7fe ff6d 	bl	80005e8 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800171e:	f7ff f88d 	bl	800083c <__aeabi_ddiv>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff f96f 	bl	8000a0c <__aeabi_d2uiz>
 800172e:	4603      	mov	r3, r0
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001734:	701a      	strb	r2, [r3, #0]
				Is_First_Captured2 = 0; // set it back to false
 8001736:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]

				// set polarity to rising edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6a1a      	ldr	r2, [r3, #32]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800174a:	621a      	str	r2, [r3, #32]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a12      	ldr	r2, [r2, #32]
 8001756:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0204 	bic.w	r2, r2, #4
 8001766:	60da      	str	r2, [r3, #12]
			}
		}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7f1b      	ldrb	r3, [r3, #28]
 800176c:	2b04      	cmp	r3, #4
 800176e:	f040 809f 	bne.w	80018b0 <HAL_TIM_IC_CaptureCallback+0x370>
		{
			if (Is_First_Captured3==0) // if the first value is not captured
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d136      	bne.n	80017e8 <HAL_TIM_IC_CaptureCallback+0x2a8>
			{
				IC_Val13 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 800177a:	2108      	movs	r1, #8
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f005 fbf9 	bl	8006f74 <HAL_TIM_ReadCapturedValue>
 8001782:	4603      	mov	r3, r0
 8001784:	4a17      	ldr	r2, [pc, #92]	@ (80017e4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001786:	6013      	str	r3, [r2, #0]
				Is_First_Captured3 = 1;  // set the first captured as true
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a1a      	ldr	r2, [r3, #32]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 800179c:	621a      	str	r2, [r3, #32]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a1a      	ldr	r2, [r3, #32]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017ac:	621a      	str	r2, [r3, #32]
 80017ae:	e07f      	b.n	80018b0 <HAL_TIM_IC_CaptureCallback+0x370>
 80017b0:	b020c49c 	.word	0xb020c49c
 80017b4:	3fa16872 	.word	0x3fa16872
 80017b8:	2000027c 	.word	0x2000027c
 80017bc:	20000270 	.word	0x20000270
 80017c0:	20000274 	.word	0x20000274
 80017c4:	20000278 	.word	0x20000278
 80017c8:	2000027d 	.word	0x2000027d
 80017cc:	2000028c 	.word	0x2000028c
 80017d0:	20000280 	.word	0x20000280
 80017d4:	20000284 	.word	0x20000284
 80017d8:	20000288 	.word	0x20000288
 80017dc:	2000028d 	.word	0x2000028d
 80017e0:	2000029c 	.word	0x2000029c
 80017e4:	20000290 	.word	0x20000290
			}

			else if (Is_First_Captured3==1)   // if the first is already captured
 80017e8:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <HAL_TIM_IC_CaptureCallback+0x388>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d15f      	bne.n	80018b0 <HAL_TIM_IC_CaptureCallback+0x370>
			{
				IC_Val23 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 80017f0:	2108      	movs	r1, #8
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f005 fbbe 	bl	8006f74 <HAL_TIM_ReadCapturedValue>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a34      	ldr	r2, [pc, #208]	@ (80018cc <HAL_TIM_IC_CaptureCallback+0x38c>)
 80017fc:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24

				if (IC_Val23 > IC_Val13)
 8001806:	4b31      	ldr	r3, [pc, #196]	@ (80018cc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b31      	ldr	r3, [pc, #196]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x390>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d907      	bls.n	8001822 <HAL_TIM_IC_CaptureCallback+0x2e2>
				{
					Difference3 = IC_Val23-IC_Val13;
 8001812:	4b2e      	ldr	r3, [pc, #184]	@ (80018cc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b2e      	ldr	r3, [pc, #184]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	4a2d      	ldr	r2, [pc, #180]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x394>)
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	e00f      	b.n	8001842 <HAL_TIM_IC_CaptureCallback+0x302>
				}

				else if (IC_Val13 > IC_Val23)
 8001822:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b29      	ldr	r3, [pc, #164]	@ (80018cc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d909      	bls.n	8001842 <HAL_TIM_IC_CaptureCallback+0x302>
				{
					Difference3 = (0xffff - IC_Val13) + IC_Val23;
 800182e:	4b27      	ldr	r3, [pc, #156]	@ (80018cc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800183c:	33ff      	adds	r3, #255	@ 0xff
 800183e:	4a25      	ldr	r2, [pc, #148]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001840:	6013      	str	r3, [r2, #0]
				}

				Distance3 = Difference3 * .034/2;
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe54 	bl	80004f4 <__aeabi_ui2d>
 800184c:	a31c      	add	r3, pc, #112	@ (adr r3, 80018c0 <HAL_TIM_IC_CaptureCallback+0x380>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fec9 	bl	80005e8 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001866:	f7fe ffe9 	bl	800083c <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f7ff f8cb 	bl	8000a0c <__aeabi_d2uiz>
 8001876:	4603      	mov	r3, r0
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x398>)
 800187c:	701a      	strb	r2, [r3, #0]
				Is_First_Captured3 = 0; // set it back to false
 800187e:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]

				// set polarity to rising edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a1a      	ldr	r2, [r3, #32]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8001892:	621a      	str	r2, [r3, #32]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a12      	ldr	r2, [r2, #32]
 800189e:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0208 	bic.w	r2, r2, #8
 80018ae:	60da      	str	r2, [r3, #12]
			}
		}

	flag = 1;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_TIM_IC_CaptureCallback+0x39c>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	b020c49c 	.word	0xb020c49c
 80018c4:	3fa16872 	.word	0x3fa16872
 80018c8:	2000029c 	.word	0x2000029c
 80018cc:	20000294 	.word	0x20000294
 80018d0:	20000290 	.word	0x20000290
 80018d4:	20000298 	.word	0x20000298
 80018d8:	2000029d 	.word	0x2000029d
 80018dc:	200002a0 	.word	0x200002a0

080018e0 <HCSR04_Read>:

void HCSR04_Read (unsigned int sensor)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	flag = 0;
 80018e8:	4b2e      	ldr	r3, [pc, #184]	@ (80019a4 <HCSR04_Read+0xc4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
	if(sensor == 1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d117      	bne.n	8001924 <HCSR04_Read+0x44>
	{
		HAL_GPIO_WritePin(TRIG_PORT1, TRIG_PIN1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018fa:	482b      	ldr	r0, [pc, #172]	@ (80019a8 <HCSR04_Read+0xc8>)
 80018fc:	f000 ffa6 	bl	800284c <HAL_GPIO_WritePin>
		HAL_Delay(10);  // wait for 10 us
 8001900:	200a      	movs	r0, #10
 8001902:	f000 fc3f 	bl	8002184 <HAL_Delay>
		HAL_GPIO_WritePin(TRIG_PORT1, TRIG_PIN1, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800190c:	4826      	ldr	r0, [pc, #152]	@ (80019a8 <HCSR04_Read+0xc8>)
 800190e:	f000 ff9d 	bl	800284c <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001912:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <HCSR04_Read+0xcc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <HCSR04_Read+0xcc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0202 	orr.w	r2, r2, #2
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	e034      	b.n	800198e <HCSR04_Read+0xae>
	}else if(sensor == 2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d117      	bne.n	800195a <HCSR04_Read+0x7a>
	{
		HAL_GPIO_WritePin(TRIG_PORT2, TRIG_PIN2, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001930:	481d      	ldr	r0, [pc, #116]	@ (80019a8 <HCSR04_Read+0xc8>)
 8001932:	f000 ff8b 	bl	800284c <HAL_GPIO_WritePin>
		HAL_Delay(10);  // wait for 10 us
 8001936:	200a      	movs	r0, #10
 8001938:	f000 fc24 	bl	8002184 <HAL_Delay>
		HAL_GPIO_WritePin(TRIG_PORT2, TRIG_PIN2, GPIO_PIN_RESET);  // pull the TRIG pin low
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001942:	4819      	ldr	r0, [pc, #100]	@ (80019a8 <HCSR04_Read+0xc8>)
 8001944:	f000 ff82 	bl	800284c <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8001948:	4b18      	ldr	r3, [pc, #96]	@ (80019ac <HCSR04_Read+0xcc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <HCSR04_Read+0xcc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0204 	orr.w	r2, r2, #4
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	e019      	b.n	800198e <HCSR04_Read+0xae>
	}else if(sensor == 3)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d116      	bne.n	800198e <HCSR04_Read+0xae>
	{
		HAL_GPIO_WritePin(TRIG_PORT3, TRIG_PIN3, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001960:	2201      	movs	r2, #1
 8001962:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001966:	4810      	ldr	r0, [pc, #64]	@ (80019a8 <HCSR04_Read+0xc8>)
 8001968:	f000 ff70 	bl	800284c <HAL_GPIO_WritePin>
		HAL_Delay(10);  // wait for 10 us
 800196c:	200a      	movs	r0, #10
 800196e:	f000 fc09 	bl	8002184 <HAL_Delay>
		HAL_GPIO_WritePin(TRIG_PORT3, TRIG_PIN3, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001972:	2200      	movs	r2, #0
 8001974:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001978:	480b      	ldr	r0, [pc, #44]	@ (80019a8 <HCSR04_Read+0xc8>)
 800197a:	f000 ff67 	bl	800284c <HAL_GPIO_WritePin>
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HCSR04_Read+0xcc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HCSR04_Read+0xcc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0208 	orr.w	r2, r2, #8
 800198c:	60da      	str	r2, [r3, #12]
//	HAL_Delay(10);  // wait for 10 us
//	HAL_GPIO_WritePin(TRIG_PORT1, TRIG_PIN1, GPIO_PIN_RESET);  // pull the TRIG pin low
//	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);


	while(flag == 0);
 800198e:	bf00      	nop
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <HCSR04_Read+0xc4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0fb      	beq.n	8001990 <HCSR04_Read+0xb0>
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200002a0 	.word	0x200002a0
 80019a8:	40021000 	.word	0x40021000
 80019ac:	20000198 	.word	0x20000198

080019b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c6:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <HAL_MspInit+0x4c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ee:	2007      	movs	r0, #7
 80019f0:	f000 fcbc 	bl	800236c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	@ (8001a84 <HAL_I2C_MspInit+0x84>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d12c      	bne.n	8001a7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a3e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a44:	2312      	movs	r3, #18
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a50:	2304      	movs	r3, #4
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480c      	ldr	r0, [pc, #48]	@ (8001a8c <HAL_I2C_MspInit+0x8c>)
 8001a5c:	f000 fd5a 	bl	8002514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_I2C_MspInit+0x88>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	@ 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40005400 	.word	0x40005400
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020400 	.word	0x40020400

08001a90 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08e      	sub	sp, #56	@ 0x38
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a31      	ldr	r2, [pc, #196]	@ (8001b80 <HAL_I2S_MspInit+0xf0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d15a      	bne.n	8001b76 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001ac4:	23c0      	movs	r3, #192	@ 0xc0
 8001ac6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 fa85 	bl	8005fe0 <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001adc:	f7ff fcd4 	bl	8001488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <HAL_I2S_MspInit+0xf4>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	4a26      	ldr	r2, [pc, #152]	@ (8001b84 <HAL_I2S_MspInit+0xf4>)
 8001aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af0:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <HAL_I2S_MspInit+0xf4>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <HAL_I2S_MspInit+0xf4>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b04:	4a1f      	ldr	r2, [pc, #124]	@ (8001b84 <HAL_I2S_MspInit+0xf4>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_I2S_MspInit+0xf4>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <HAL_I2S_MspInit+0xf4>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b20:	4a18      	ldr	r2, [pc, #96]	@ (8001b84 <HAL_I2S_MspInit+0xf4>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b28:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <HAL_I2S_MspInit+0xf4>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b34:	2310      	movs	r3, #16
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b44:	2306      	movs	r3, #6
 8001b46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480e      	ldr	r0, [pc, #56]	@ (8001b88 <HAL_I2S_MspInit+0xf8>)
 8001b50:	f000 fce0 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b54:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b66:	2306      	movs	r3, #6
 8001b68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4806      	ldr	r0, [pc, #24]	@ (8001b8c <HAL_I2S_MspInit+0xfc>)
 8001b72:	f000 fccf 	bl	8002514 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b76:	bf00      	nop
 8001b78:	3738      	adds	r7, #56	@ 0x38
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40003c00 	.word	0x40003c00
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020800 	.word	0x40020800

08001b90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	@ 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a19      	ldr	r2, [pc, #100]	@ (8001c14 <HAL_SPI_MspInit+0x84>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d12b      	bne.n	8001c0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <HAL_SPI_MspInit+0x88>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	4a17      	ldr	r2, [pc, #92]	@ (8001c18 <HAL_SPI_MspInit+0x88>)
 8001bbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc2:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <HAL_SPI_MspInit+0x88>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_SPI_MspInit+0x88>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a10      	ldr	r2, [pc, #64]	@ (8001c18 <HAL_SPI_MspInit+0x88>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <HAL_SPI_MspInit+0x88>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001bea:	23e0      	movs	r3, #224	@ 0xe0
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <HAL_SPI_MspInit+0x8c>)
 8001c06:	f000 fc85 	bl	8002514 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	@ 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40013000 	.word	0x40013000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000

08001c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x94>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d134      	bne.n	8001cac <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x98>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x98>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c52:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x98>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x98>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x98>)
 8001c68:	f043 0310 	orr.w	r3, r3, #16
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x98>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001c7a:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8001c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4619      	mov	r1, r3
 8001c96:	4809      	ldr	r0, [pc, #36]	@ (8001cbc <HAL_TIM_Base_MspInit+0x9c>)
 8001c98:	f000 fc3c 	bl	8002514 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	201b      	movs	r0, #27
 8001ca2:	f000 fb6e 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ca6:	201b      	movs	r0, #27
 8001ca8:	f000 fb87 	bl	80023ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001cac:	bf00      	nop
 8001cae:	3728      	adds	r7, #40	@ 0x28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <HAL_TIM_PWM_MspInit+0x48>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d115      	bne.n	8001cfe <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <HAL_TIM_PWM_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <HAL_TIM_PWM_MspInit+0x4c>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_TIM_PWM_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	201e      	movs	r0, #30
 8001cf4:	f000 fb45 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cf8:	201e      	movs	r0, #30
 8001cfa:	f000 fb5e 	bl	80023ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40023800 	.word	0x40023800

08001d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a22      	ldr	r2, [pc, #136]	@ (8001db8 <HAL_TIM_MspPostInit+0xa8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d13d      	bne.n	8001dae <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <HAL_TIM_MspPostInit+0xac>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a20      	ldr	r2, [pc, #128]	@ (8001dbc <HAL_TIM_MspPostInit+0xac>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <HAL_TIM_MspPostInit+0xac>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <HAL_TIM_MspPostInit+0xac>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a19      	ldr	r2, [pc, #100]	@ (8001dbc <HAL_TIM_MspPostInit+0xac>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <HAL_TIM_MspPostInit+0xac>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4619      	mov	r1, r3
 8001d86:	480e      	ldr	r0, [pc, #56]	@ (8001dc0 <HAL_TIM_MspPostInit+0xb0>)
 8001d88:	f000 fbc4 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4806      	ldr	r0, [pc, #24]	@ (8001dc4 <HAL_TIM_MspPostInit+0xb4>)
 8001daa:	f000 fbb3 	bl	8002514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	@ 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40000800 	.word	0x40000800
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40020400 	.word	0x40020400

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e5c <HAL_UART_MspInit+0x94>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d134      	bne.n	8001e54 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <HAL_UART_MspInit+0x98>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <HAL_UART_MspInit+0x98>)
 8001df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfa:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <HAL_UART_MspInit+0x98>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <HAL_UART_MspInit+0x98>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a14      	ldr	r2, [pc, #80]	@ (8001e60 <HAL_UART_MspInit+0x98>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_UART_MspInit+0x98>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e22:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e34:	2307      	movs	r3, #7
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4809      	ldr	r0, [pc, #36]	@ (8001e64 <HAL_UART_MspInit+0x9c>)
 8001e40:	f000 fb68 	bl	8002514 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2027      	movs	r0, #39	@ 0x27
 8001e4a:	f000 fa9a 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e4e:	2027      	movs	r0, #39	@ 0x27
 8001e50:	f000 fab3 	bl	80023ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001e54:	bf00      	nop
 8001e56:	3728      	adds	r7, #40	@ 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40004800 	.word	0x40004800
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020400 	.word	0x40020400

08001e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <NMI_Handler+0x4>

08001e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <HardFault_Handler+0x4>

08001e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <MemManage_Handler+0x4>

08001e80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <BusFault_Handler+0x4>

08001e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <UsageFault_Handler+0x4>

08001e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ebe:	f000 f941 	bl	8002144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <TIM1_CC_IRQHandler+0x10>)
 8001ece:	f004 fd3b 	bl	8006948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000198 	.word	0x20000198

08001edc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <TIM4_IRQHandler+0x10>)
 8001ee2:	f004 fd31 	bl	8006948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200001e0 	.word	0x200001e0

08001ef0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <USART3_IRQHandler+0x10>)
 8001ef6:	f005 fe5b 	bl	8007bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000228 	.word	0x20000228

08001f04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <OTG_FS_IRQHandler+0x10>)
 8001f0a:	f000 ff99 	bl	8002e40 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000688 	.word	0x20000688

08001f18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e00a      	b.n	8001f40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f2a:	f3af 8000 	nop.w
 8001f2e:	4601      	mov	r1, r0
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	60ba      	str	r2, [r7, #8]
 8001f36:	b2ca      	uxtb	r2, r1
 8001f38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dbf0      	blt.n	8001f2a <_read+0x12>
  }

  return len;
 8001f48:	687b      	ldr	r3, [r7, #4]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f7a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_isatty>:

int _isatty(int file)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	@ (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	@ (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f00a fc32 	bl	800c854 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20020000 	.word	0x20020000
 800201c:	00000400 	.word	0x00000400
 8002020:	200002a4 	.word	0x200002a4
 8002024:	20000bb8 	.word	0x20000bb8

08002028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <SystemInit+0x20>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <SystemInit+0x20>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800204c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002084 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002050:	f7ff ffea 	bl	8002028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002054:	480c      	ldr	r0, [pc, #48]	@ (8002088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002056:	490d      	ldr	r1, [pc, #52]	@ (800208c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002058:	4a0d      	ldr	r2, [pc, #52]	@ (8002090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800206c:	4c0a      	ldr	r4, [pc, #40]	@ (8002098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800207a:	f00a fbf1 	bl	800c860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207e:	f7fe fe5d 	bl	8000d3c <main>
  bx  lr    
 8002082:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800208c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002090:	0800d304 	.word	0x0800d304
  ldr r2, =_sbss
 8002094:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002098:	20000bb4 	.word	0x20000bb4

0800209c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC_IRQHandler>
	...

080020a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a4:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <HAL_Init+0x40>)
 80020aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <HAL_Init+0x40>)
 80020b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a07      	ldr	r2, [pc, #28]	@ (80020e0 <HAL_Init+0x40>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f000 f94f 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f000 f808 	bl	80020e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d4:	f7ff fc6c 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00

080020e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_InitTick+0x54>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_InitTick+0x58>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f967 	bl	80023d6 <HAL_SYSTICK_Config>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e00e      	b.n	8002130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d80a      	bhi.n	800212e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002118:	2200      	movs	r2, #0
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f000 f92f 	bl	8002382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002124:	4a06      	ldr	r2, [pc, #24]	@ (8002140 <HAL_InitTick+0x5c>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000000 	.word	0x20000000
 800213c:	20000008 	.word	0x20000008
 8002140:	20000004 	.word	0x20000004

08002144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_IncTick+0x20>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_IncTick+0x24>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_IncTick+0x24>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008
 8002168:	200002a8 	.word	0x200002a8

0800216c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return uwTick;
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <HAL_GetTick+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	200002a8 	.word	0x200002a8

08002184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff ffee 	bl	800216c <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d005      	beq.n	80021aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_Delay+0x44>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021aa:	bf00      	nop
 80021ac:	f7ff ffde 	bl	800216c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d8f7      	bhi.n	80021ac <HAL_Delay+0x28>
  {
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000008 	.word	0x20000008

080021cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021e8:	4013      	ands	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fe:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	60d3      	str	r3, [r2, #12]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002218:	4b04      	ldr	r3, [pc, #16]	@ (800222c <__NVIC_GetPriorityGrouping+0x18>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	f003 0307 	and.w	r3, r3, #7
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db0b      	blt.n	800225a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4907      	ldr	r1, [pc, #28]	@ (8002268 <__NVIC_EnableIRQ+0x38>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2001      	movs	r0, #1
 8002252:	fa00 f202 	lsl.w	r2, r0, r2
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	@ (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	@ (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	@ 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	@ 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f7ff ff8e 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff29 	bl	80021cc <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002394:	f7ff ff3e 	bl	8002214 <__NVIC_GetPriorityGrouping>
 8002398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7ff ff8e 	bl	80022c0 <NVIC_EncodePriority>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff5d 	bl	800226c <__NVIC_SetPriority>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff31 	bl	8002230 <__NVIC_EnableIRQ>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffa2 	bl	8002328 <SysTick_Config>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff feb6 	bl	800216c <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d008      	beq.n	8002420 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2280      	movs	r2, #128	@ 0x80
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e052      	b.n	80024c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0216 	bic.w	r2, r2, #22
 800242e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800243e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <HAL_DMA_Abort+0x62>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0208 	bic.w	r2, r2, #8
 800245e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002470:	e013      	b.n	800249a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002472:	f7ff fe7b 	bl	800216c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b05      	cmp	r3, #5
 800247e:	d90c      	bls.n	800249a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2203      	movs	r2, #3
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e015      	b.n	80024c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e4      	bne.n	8002472 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	223f      	movs	r2, #63	@ 0x3f
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d004      	beq.n	80024ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2280      	movs	r2, #128	@ 0x80
 80024e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e00c      	b.n	8002506 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2205      	movs	r2, #5
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	@ 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	e16b      	b.n	8002808 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	429a      	cmp	r2, r3
 800254a:	f040 815a 	bne.w	8002802 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d005      	beq.n	8002566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002562:	2b02      	cmp	r3, #2
 8002564:	d130      	bne.n	80025c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	2203      	movs	r2, #3
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800259c:	2201      	movs	r2, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 0201 	and.w	r2, r3, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d017      	beq.n	8002604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d123      	bne.n	8002658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	220f      	movs	r2, #15
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3208      	adds	r2, #8
 8002652:	69b9      	ldr	r1, [r7, #24]
 8002654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0203 	and.w	r2, r3, #3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80b4 	beq.w	8002802 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b60      	ldr	r3, [pc, #384]	@ (8002820 <HAL_GPIO_Init+0x30c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002820 <HAL_GPIO_Init+0x30c>)
 80026a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002820 <HAL_GPIO_Init+0x30c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002824 <HAL_GPIO_Init+0x310>)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a52      	ldr	r2, [pc, #328]	@ (8002828 <HAL_GPIO_Init+0x314>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d02b      	beq.n	800273a <HAL_GPIO_Init+0x226>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a51      	ldr	r2, [pc, #324]	@ (800282c <HAL_GPIO_Init+0x318>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d025      	beq.n	8002736 <HAL_GPIO_Init+0x222>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a50      	ldr	r2, [pc, #320]	@ (8002830 <HAL_GPIO_Init+0x31c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01f      	beq.n	8002732 <HAL_GPIO_Init+0x21e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002834 <HAL_GPIO_Init+0x320>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d019      	beq.n	800272e <HAL_GPIO_Init+0x21a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002838 <HAL_GPIO_Init+0x324>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_GPIO_Init+0x216>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4d      	ldr	r2, [pc, #308]	@ (800283c <HAL_GPIO_Init+0x328>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00d      	beq.n	8002726 <HAL_GPIO_Init+0x212>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4c      	ldr	r2, [pc, #304]	@ (8002840 <HAL_GPIO_Init+0x32c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <HAL_GPIO_Init+0x20e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4b      	ldr	r2, [pc, #300]	@ (8002844 <HAL_GPIO_Init+0x330>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_GPIO_Init+0x20a>
 800271a:	2307      	movs	r3, #7
 800271c:	e00e      	b.n	800273c <HAL_GPIO_Init+0x228>
 800271e:	2308      	movs	r3, #8
 8002720:	e00c      	b.n	800273c <HAL_GPIO_Init+0x228>
 8002722:	2306      	movs	r3, #6
 8002724:	e00a      	b.n	800273c <HAL_GPIO_Init+0x228>
 8002726:	2305      	movs	r3, #5
 8002728:	e008      	b.n	800273c <HAL_GPIO_Init+0x228>
 800272a:	2304      	movs	r3, #4
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x228>
 800272e:	2303      	movs	r3, #3
 8002730:	e004      	b.n	800273c <HAL_GPIO_Init+0x228>
 8002732:	2302      	movs	r3, #2
 8002734:	e002      	b.n	800273c <HAL_GPIO_Init+0x228>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_GPIO_Init+0x228>
 800273a:	2300      	movs	r3, #0
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f002 0203 	and.w	r2, r2, #3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4093      	lsls	r3, r2
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274c:	4935      	ldr	r1, [pc, #212]	@ (8002824 <HAL_GPIO_Init+0x310>)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275a:	4b3b      	ldr	r3, [pc, #236]	@ (8002848 <HAL_GPIO_Init+0x334>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277e:	4a32      	ldr	r2, [pc, #200]	@ (8002848 <HAL_GPIO_Init+0x334>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002784:	4b30      	ldr	r3, [pc, #192]	@ (8002848 <HAL_GPIO_Init+0x334>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a8:	4a27      	ldr	r2, [pc, #156]	@ (8002848 <HAL_GPIO_Init+0x334>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ae:	4b26      	ldr	r3, [pc, #152]	@ (8002848 <HAL_GPIO_Init+0x334>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002848 <HAL_GPIO_Init+0x334>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_GPIO_Init+0x334>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027fc:	4a12      	ldr	r2, [pc, #72]	@ (8002848 <HAL_GPIO_Init+0x334>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3301      	adds	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b0f      	cmp	r3, #15
 800280c:	f67f ae90 	bls.w	8002530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3724      	adds	r7, #36	@ 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40013800 	.word	0x40013800
 8002828:	40020000 	.word	0x40020000
 800282c:	40020400 	.word	0x40020400
 8002830:	40020800 	.word	0x40020800
 8002834:	40020c00 	.word	0x40020c00
 8002838:	40021000 	.word	0x40021000
 800283c:	40021400 	.word	0x40021400
 8002840:	40021800 	.word	0x40021800
 8002844:	40021c00 	.word	0x40021c00
 8002848:	40013c00 	.word	0x40013c00

0800284c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
 8002858:	4613      	mov	r3, r2
 800285a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002868:	e003      	b.n	8002872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800286a:	887b      	ldrh	r3, [r7, #2]
 800286c:	041a      	lsls	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af02      	add	r7, sp, #8
 8002884:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e059      	b.n	8002944 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f009 faf2 	bl	800be94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2203      	movs	r2, #3
 80028b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028be:	d102      	bne.n	80028c6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f006 f90b 	bl	8008ae6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7c1a      	ldrb	r2, [r3, #16]
 80028d8:	f88d 2000 	strb.w	r2, [sp]
 80028dc:	3304      	adds	r3, #4
 80028de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028e0:	f006 f88c 	bl	80089fc <USB_CoreInit>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e026      	b.n	8002944 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	4618      	mov	r0, r3
 80028fe:	f006 f903 	bl	8008b08 <USB_SetCurrentMode>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e017      	b.n	8002944 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7c1a      	ldrb	r2, [r3, #16]
 800291c:	f88d 2000 	strb.w	r2, [sp]
 8002920:	3304      	adds	r3, #4
 8002922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002924:	f006 faa6 	bl	8008e74 <USB_HostInit>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2202      	movs	r2, #2
 8002932:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e004      	b.n	8002944 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b08b      	sub	sp, #44	@ 0x2c
 8002950:	af04      	add	r7, sp, #16
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	461a      	mov	r2, r3
 800295a:	4603      	mov	r3, r0
 800295c:	70fb      	strb	r3, [r7, #3]
 800295e:	460b      	mov	r3, r1
 8002960:	70bb      	strb	r3, [r7, #2]
 8002962:	4613      	mov	r3, r2
 8002964:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002966:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002968:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_HCD_HC_Init+0x2c>
 8002974:	2302      	movs	r3, #2
 8002976:	e09d      	b.n	8002ab4 <HAL_HCD_HC_Init+0x168>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	3319      	adds	r3, #25
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	3314      	adds	r3, #20
 80029a4:	787a      	ldrb	r2, [r7, #1]
 80029a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3315      	adds	r3, #21
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3326      	adds	r3, #38	@ 0x26
 80029cc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80029d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	78bb      	ldrb	r3, [r7, #2]
 80029d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029da:	b2d8      	uxtb	r0, r3
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3316      	adds	r3, #22
 80029ea:	4602      	mov	r2, r0
 80029ec:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	4619      	mov	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fbc8 	bl	8003188 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80029f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	da0a      	bge.n	8002a16 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3317      	adds	r3, #23
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e009      	b.n	8002a2a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3317      	adds	r3, #23
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f006 fb84 	bl	800913c <USB_GetHostSpeed>
 8002a34:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002a36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10b      	bne.n	8002a56 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002a3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d107      	bne.n	8002a56 <HAL_HCD_HC_Init+0x10a>
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2bbc      	cmp	r3, #188	@ 0xbc
 8002a50:	d901      	bls.n	8002a56 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002a52:	23bc      	movs	r3, #188	@ 0xbc
 8002a54:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3318      	adds	r3, #24
 8002a66:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002a6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	b298      	uxth	r0, r3
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3328      	adds	r3, #40	@ 0x28
 8002a80:	4602      	mov	r2, r0
 8002a82:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	787c      	ldrb	r4, [r7, #1]
 8002a8e:	78ba      	ldrb	r2, [r7, #2]
 8002a90:	78f9      	ldrb	r1, [r7, #3]
 8002a92:	9302      	str	r3, [sp, #8]
 8002a94:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4623      	mov	r3, r4
 8002aa2:	f006 fb73 	bl	800918c <USB_HC_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd90      	pop	{r4, r7, pc}

08002abc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_HCD_HC_Halt+0x1e>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e00f      	b.n	8002afa <HAL_HCD_HC_Halt+0x3e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f006 ff05 	bl	80098fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	70fb      	strb	r3, [r7, #3]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70bb      	strb	r3, [r7, #2]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3317      	adds	r3, #23
 8002b2e:	78ba      	ldrb	r2, [r7, #2]
 8002b30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	3326      	adds	r3, #38	@ 0x26
 8002b42:	787a      	ldrb	r2, [r7, #1]
 8002b44:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b46:	7c3b      	ldrb	r3, [r7, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d114      	bne.n	8002b76 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	332a      	adds	r3, #42	@ 0x2a
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3319      	adds	r3, #25
 8002b70:	7f3a      	ldrb	r2, [r7, #28]
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e009      	b.n	8002b8a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	332a      	adds	r3, #42	@ 0x2a
 8002b86:	2202      	movs	r2, #2
 8002b88:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002b8a:	787b      	ldrb	r3, [r7, #1]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	f200 8102 	bhi.w	8002d96 <HAL_HCD_HC_SubmitRequest+0x292>
 8002b92:	a201      	add	r2, pc, #4	@ (adr r2, 8002b98 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002d81 	.word	0x08002d81
 8002ba0:	08002c6d 	.word	0x08002c6d
 8002ba4:	08002cf7 	.word	0x08002cf7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002ba8:	7c3b      	ldrb	r3, [r7, #16]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	f040 80f5 	bne.w	8002d9a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002bb0:	78bb      	ldrb	r3, [r7, #2]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d12d      	bne.n	8002c12 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002bb6:	8b3b      	ldrh	r3, [r7, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d109      	bne.n	8002bd0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	333d      	adds	r3, #61	@ 0x3d
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	333d      	adds	r3, #61	@ 0x3d
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	332a      	adds	r3, #42	@ 0x2a
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002bfa:	e0ce      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	332a      	adds	r3, #42	@ 0x2a
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	701a      	strb	r2, [r3, #0]
      break;
 8002c10:	e0c3      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	331a      	adds	r3, #26
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	f040 80b8 	bne.w	8002d9a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	333c      	adds	r3, #60	@ 0x3c
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	332a      	adds	r3, #42	@ 0x2a
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
      break;
 8002c54:	e0a1      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	332a      	adds	r3, #42	@ 0x2a
 8002c66:	2202      	movs	r2, #2
 8002c68:	701a      	strb	r2, [r3, #0]
      break;
 8002c6a:	e096      	b.n	8002d9a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c6c:	78bb      	ldrb	r3, [r7, #2]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d120      	bne.n	8002cb4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	333d      	adds	r3, #61	@ 0x3d
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10a      	bne.n	8002c9e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	332a      	adds	r3, #42	@ 0x2a
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c9c:	e07e      	b.n	8002d9c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	332a      	adds	r3, #42	@ 0x2a
 8002cae:	2202      	movs	r2, #2
 8002cb0:	701a      	strb	r2, [r3, #0]
      break;
 8002cb2:	e073      	b.n	8002d9c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	333c      	adds	r3, #60	@ 0x3c
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	332a      	adds	r3, #42	@ 0x2a
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
      break;
 8002cde:	e05d      	b.n	8002d9c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	332a      	adds	r3, #42	@ 0x2a
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	701a      	strb	r2, [r3, #0]
      break;
 8002cf4:	e052      	b.n	8002d9c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002cf6:	78bb      	ldrb	r3, [r7, #2]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d120      	bne.n	8002d3e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	333d      	adds	r3, #61	@ 0x3d
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	332a      	adds	r3, #42	@ 0x2a
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d26:	e039      	b.n	8002d9c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	332a      	adds	r3, #42	@ 0x2a
 8002d38:	2202      	movs	r2, #2
 8002d3a:	701a      	strb	r2, [r3, #0]
      break;
 8002d3c:	e02e      	b.n	8002d9c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	333c      	adds	r3, #60	@ 0x3c
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	332a      	adds	r3, #42	@ 0x2a
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
      break;
 8002d68:	e018      	b.n	8002d9c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	332a      	adds	r3, #42	@ 0x2a
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	701a      	strb	r2, [r3, #0]
      break;
 8002d7e:	e00d      	b.n	8002d9c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	332a      	adds	r3, #42	@ 0x2a
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
      break;
 8002d94:	e002      	b.n	8002d9c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002d9a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	332c      	adds	r3, #44	@ 0x2c
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	8b39      	ldrh	r1, [r7, #24]
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4403      	add	r3, r0
 8002dc0:	3334      	adds	r3, #52	@ 0x34
 8002dc2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	334c      	adds	r3, #76	@ 0x4c
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3338      	adds	r3, #56	@ 0x38
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3315      	adds	r3, #21
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	334d      	adds	r3, #77	@ 0x4d
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	3310      	adds	r3, #16
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4413      	add	r3, r2
 8002e28:	1d19      	adds	r1, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	799b      	ldrb	r3, [r3, #6]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f006 fad8 	bl	80093e4 <USB_HC_StartXfer>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop

08002e40 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f005 ffcc 	bl	8008df4 <USB_GetMode>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 80fb 	bne.w	800305a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 ff8f 	bl	8008d8c <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80f1 	beq.w	8003058 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f005 ff86 	bl	8008d8c <USB_ReadInterrupts>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e8a:	d104      	bne.n	8002e96 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002e94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f005 ff76 	bl	8008d8c <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eaa:	d104      	bne.n	8002eb6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002eb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f005 ff66 	bl	8008d8c <USB_ReadInterrupts>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ec6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002eca:	d104      	bne.n	8002ed6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f005 ff56 	bl	8008d8c <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d103      	bne.n	8002ef2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f005 ff48 	bl	8008d8c <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f06:	d120      	bne.n	8002f4a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002f10:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d113      	bne.n	8002f4a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f22:	2110      	movs	r1, #16
 8002f24:	6938      	ldr	r0, [r7, #16]
 8002f26:	f005 fe3b 	bl	8008ba0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f2a:	6938      	ldr	r0, [r7, #16]
 8002f2c:	f005 fe6a 	bl	8008c04 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7a5b      	ldrb	r3, [r3, #9]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d105      	bne.n	8002f44 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f006 f85c 	bl	8008ffc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f009 f823 	bl	800bf90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f005 ff1c 	bl	8008d8c <USB_ReadInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f5e:	d102      	bne.n	8002f66 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f001 fd4d 	bl	8004a00 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f005 ff0e 	bl	8008d8c <USB_ReadInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d106      	bne.n	8002f88 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f008 ffec 	bl	800bf58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2208      	movs	r2, #8
 8002f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f005 fefd 	bl	8008d8c <USB_ReadInterrupts>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f9c:	d139      	bne.n	8003012 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f006 fc98 	bl	80098d8 <USB_HC_ReadInterrupt>
 8002fa8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e025      	b.n	8002ffc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d018      	beq.n	8002ff6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fda:	d106      	bne.n	8002fea <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f905 	bl	80031f2 <HCD_HC_IN_IRQHandler>
 8002fe8:	e005      	b.n	8002ff6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 ff67 	bl	8003ec4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	795b      	ldrb	r3, [r3, #5]
 8003000:	461a      	mov	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	4293      	cmp	r3, r2
 8003006:	d3d3      	bcc.n	8002fb0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f005 feb8 	bl	8008d8c <USB_ReadInterrupts>
 800301c:	4603      	mov	r3, r0
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b10      	cmp	r3, #16
 8003024:	d101      	bne.n	800302a <HAL_HCD_IRQHandler+0x1ea>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_HCD_IRQHandler+0x1ec>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d014      	beq.n	800305a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0210 	bic.w	r2, r2, #16
 800303e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f001 fbfe 	bl	8004842 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0210 	orr.w	r2, r2, #16
 8003054:	619a      	str	r2, [r3, #24]
 8003056:	e000      	b.n	800305a <HAL_HCD_IRQHandler+0x21a>
      return;
 8003058:	bf00      	nop
    }
  }
}
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_HCD_Start+0x16>
 8003072:	2302      	movs	r3, #2
 8003074:	e013      	b.n	800309e <HAL_HCD_Start+0x3e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2101      	movs	r1, #1
 8003084:	4618      	mov	r0, r3
 8003086:	f006 f820 	bl	80090ca <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f005 fd18 	bl	8008ac4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_HCD_Stop+0x16>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e00d      	b.n	80030d8 <HAL_HCD_Stop+0x32>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f006 fd73 	bl	8009bb4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f005 ffc2 	bl	8009076 <USB_ResetPort>
 80030f2:	4603      	mov	r3, r0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	334c      	adds	r3, #76	@ 0x4c
 8003118:	781b      	ldrb	r3, [r3, #0]
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3338      	adds	r3, #56	@ 0x38
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f006 f804 	bl	800916a <USB_GetCurrentFrame>
 8003162:	4603      	mov	r3, r0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f005 ffdf 	bl	800913c <USB_GetHostSpeed>
 800317e:	4603      	mov	r3, r0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	331a      	adds	r3, #26
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	331b      	adds	r3, #27
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3325      	adds	r3, #37	@ 0x25
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	3324      	adds	r3, #36	@ 0x24
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f005 fdce 	bl	8008db2 <USB_ReadChInterrupts>
 8003216:	4603      	mov	r3, r0
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	d11a      	bne.n	8003256 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800322c:	461a      	mov	r2, r3
 800322e:	2304      	movs	r3, #4
 8003230:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	334d      	adds	r3, #77	@ 0x4d
 8003242:	2207      	movs	r2, #7
 8003244:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f006 fb53 	bl	80098fa <USB_HC_Halt>
 8003254:	e09e      	b.n	8003394 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f005 fda7 	bl	8008db2 <USB_ReadChInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800326e:	d11b      	bne.n	80032a8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800327c:	461a      	mov	r2, r3
 800327e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003282:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	334d      	adds	r3, #77	@ 0x4d
 8003294:	2208      	movs	r2, #8
 8003296:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f006 fb2a 	bl	80098fa <USB_HC_Halt>
 80032a6:	e075      	b.n	8003394 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f005 fd7e 	bl	8008db2 <USB_ReadChInterrupts>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d11a      	bne.n	80032f6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032cc:	461a      	mov	r2, r3
 80032ce:	2308      	movs	r3, #8
 80032d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334d      	adds	r3, #77	@ 0x4d
 80032e2:	2206      	movs	r2, #6
 80032e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f006 fb03 	bl	80098fa <USB_HC_Halt>
 80032f4:	e04e      	b.n	8003394 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f005 fd57 	bl	8008db2 <USB_ReadChInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330e:	d11b      	bne.n	8003348 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331c:	461a      	mov	r2, r3
 800331e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003322:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	@ 0x4d
 8003334:	2209      	movs	r2, #9
 8003336:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f006 fada 	bl	80098fa <USB_HC_Halt>
 8003346:	e025      	b.n	8003394 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f005 fd2e 	bl	8008db2 <USB_ReadChInterrupts>
 8003356:	4603      	mov	r3, r0
 8003358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335c:	2b80      	cmp	r3, #128	@ 0x80
 800335e:	d119      	bne.n	8003394 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800336c:	461a      	mov	r2, r3
 800336e:	2380      	movs	r3, #128	@ 0x80
 8003370:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	334d      	adds	r3, #77	@ 0x4d
 8003382:	2207      	movs	r2, #7
 8003384:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f006 fab3 	bl	80098fa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f005 fd08 	bl	8008db2 <USB_ReadChInterrupts>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ac:	d112      	bne.n	80033d4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f006 fa9f 	bl	80098fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c8:	461a      	mov	r2, r3
 80033ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033ce:	6093      	str	r3, [r2, #8]
 80033d0:	f000 bd75 	b.w	8003ebe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f005 fce8 	bl	8008db2 <USB_ReadChInterrupts>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	f040 8128 	bne.w	800363e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fa:	461a      	mov	r2, r3
 80033fc:	2320      	movs	r3, #32
 80033fe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	331b      	adds	r3, #27
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d119      	bne.n	800344a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	331b      	adds	r3, #27
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4413      	add	r3, r2
 8003432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	0151      	lsls	r1, r2, #5
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	440a      	add	r2, r1
 8003440:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003448:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	799b      	ldrb	r3, [r3, #6]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01b      	beq.n	800348a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3330      	adds	r3, #48	@ 0x30
 8003462:	6819      	ldr	r1, [r3, #0]
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	1ac9      	subs	r1, r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4403      	add	r3, r0
 8003486:	3338      	adds	r3, #56	@ 0x38
 8003488:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	334d      	adds	r3, #77	@ 0x4d
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3344      	adds	r3, #68	@ 0x44
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034be:	461a      	mov	r2, r3
 80034c0:	2301      	movs	r3, #1
 80034c2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	3326      	adds	r3, #38	@ 0x26
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3326      	adds	r3, #38	@ 0x26
 80034ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d110      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f006 f9fe 	bl	80098fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4413      	add	r3, r2
 8003506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800350a:	461a      	mov	r2, r3
 800350c:	2310      	movs	r3, #16
 800350e:	6093      	str	r3, [r2, #8]
 8003510:	e03d      	b.n	800358e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3326      	adds	r3, #38	@ 0x26
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d00a      	beq.n	800353e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	3326      	adds	r3, #38	@ 0x26
 8003538:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800353a:	2b01      	cmp	r3, #1
 800353c:	d127      	bne.n	800358e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	0151      	lsls	r1, r2, #5
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	440a      	add	r2, r1
 8003554:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003558:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800355c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	334c      	adds	r3, #76	@ 0x4c
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	334c      	adds	r3, #76	@ 0x4c
 8003582:	781a      	ldrb	r2, [r3, #0]
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	4619      	mov	r1, r3
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f008 fd0f 	bl	800bfac <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	799b      	ldrb	r3, [r3, #6]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d13b      	bne.n	800360e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	3338      	adds	r3, #56	@ 0x38
 80035a6:	6819      	ldr	r1, [r3, #0]
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4403      	add	r3, r0
 80035b6:	3328      	adds	r3, #40	@ 0x28
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	440b      	add	r3, r1
 80035bc:	1e59      	subs	r1, r3, #1
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4403      	add	r3, r0
 80035cc:	3328      	adds	r3, #40	@ 0x28
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8470 	beq.w	8003ebe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	333c      	adds	r3, #60	@ 0x3c
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	f083 0301 	eor.w	r3, r3, #1
 80035f6:	b2d8      	uxtb	r0, r3
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	333c      	adds	r3, #60	@ 0x3c
 8003606:	4602      	mov	r2, r0
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	f000 bc58 	b.w	8003ebe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	333c      	adds	r3, #60	@ 0x3c
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	f083 0301 	eor.w	r3, r3, #1
 8003626:	b2d8      	uxtb	r0, r3
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	333c      	adds	r3, #60	@ 0x3c
 8003636:	4602      	mov	r2, r0
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	f000 bc40 	b.w	8003ebe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f005 fbb3 	bl	8008db2 <USB_ReadChInterrupts>
 800364c:	4603      	mov	r3, r0
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b20      	cmp	r3, #32
 8003654:	d131      	bne.n	80036ba <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4413      	add	r3, r2
 800365e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003662:	461a      	mov	r2, r3
 8003664:	2320      	movs	r3, #32
 8003666:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	331a      	adds	r3, #26
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	f040 841f 	bne.w	8003ebe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	331b      	adds	r3, #27
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	334d      	adds	r3, #77	@ 0x4d
 80036a4:	2203      	movs	r2, #3
 80036a6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f006 f922 	bl	80098fa <USB_HC_Halt>
 80036b6:	f000 bc02 	b.w	8003ebe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f005 fb75 	bl	8008db2 <USB_ReadChInterrupts>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	f040 8305 	bne.w	8003cde <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e0:	461a      	mov	r2, r3
 80036e2:	2302      	movs	r3, #2
 80036e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	334d      	adds	r3, #77	@ 0x4d
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d114      	bne.n	8003726 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	334d      	adds	r3, #77	@ 0x4d
 800370c:	2202      	movs	r2, #2
 800370e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	334c      	adds	r3, #76	@ 0x4c
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e2cc      	b.n	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	334d      	adds	r3, #77	@ 0x4d
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b06      	cmp	r3, #6
 800373a:	d114      	bne.n	8003766 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334d      	adds	r3, #77	@ 0x4d
 800374c:	2202      	movs	r2, #2
 800374e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	334c      	adds	r3, #76	@ 0x4c
 8003760:	2205      	movs	r2, #5
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	e2ac      	b.n	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	334d      	adds	r3, #77	@ 0x4d
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b07      	cmp	r3, #7
 800377a:	d00b      	beq.n	8003794 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	334d      	adds	r3, #77	@ 0x4d
 800378c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800378e:	2b09      	cmp	r3, #9
 8003790:	f040 80a6 	bne.w	80038e0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334d      	adds	r3, #77	@ 0x4d
 80037a4:	2202      	movs	r2, #2
 80037a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	3344      	adds	r3, #68	@ 0x44
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	1c59      	adds	r1, r3, #1
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4403      	add	r3, r0
 80037c8:	3344      	adds	r3, #68	@ 0x44
 80037ca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	3344      	adds	r3, #68	@ 0x44
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d943      	bls.n	800386a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3344      	adds	r3, #68	@ 0x44
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	331a      	adds	r3, #26
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d123      	bne.n	8003854 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	331b      	adds	r3, #27
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	331c      	adds	r3, #28
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	0151      	lsls	r1, r2, #5
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	440a      	add	r2, r1
 800384a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800384e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003852:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	334c      	adds	r3, #76	@ 0x4c
 8003864:	2204      	movs	r2, #4
 8003866:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003868:	e229      	b.n	8003cbe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	334c      	adds	r3, #76	@ 0x4c
 800387a:	2202      	movs	r2, #2
 800387c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	3326      	adds	r3, #38	@ 0x26
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	3326      	adds	r3, #38	@ 0x26
 80038a4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	f040 8209 	bne.w	8003cbe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038c2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038ca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d8:	461a      	mov	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038de:	e1ee      	b.n	8003cbe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	334d      	adds	r3, #77	@ 0x4d
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	f040 80c8 	bne.w	8003a88 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	334d      	adds	r3, #77	@ 0x4d
 8003908:	2202      	movs	r2, #2
 800390a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	331b      	adds	r3, #27
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	f040 81ce 	bne.w	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	3326      	adds	r3, #38	@ 0x26
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b03      	cmp	r3, #3
 8003938:	d16b      	bne.n	8003a12 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	3348      	adds	r3, #72	@ 0x48
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	1c59      	adds	r1, r3, #1
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4403      	add	r3, r0
 800395a:	3348      	adds	r3, #72	@ 0x48
 800395c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3348      	adds	r3, #72	@ 0x48
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d943      	bls.n	80039fc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	3348      	adds	r3, #72	@ 0x48
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	331b      	adds	r3, #27
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	3344      	adds	r3, #68	@ 0x44
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d809      	bhi.n	80039c6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	331c      	adds	r3, #28
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	0151      	lsls	r1, r2, #5
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	440a      	add	r2, r1
 80039dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	334c      	adds	r3, #76	@ 0x4c
 80039f6:	2204      	movs	r2, #4
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e014      	b.n	8003a26 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334c      	adds	r3, #76	@ 0x4c
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	e009      	b.n	8003a26 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	334c      	adds	r3, #76	@ 0x4c
 8003a22:	2202      	movs	r2, #2
 8003a24:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3326      	adds	r3, #38	@ 0x26
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00b      	beq.n	8003a54 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	3326      	adds	r3, #38	@ 0x26
 8003a4c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	f040 8136 	bne.w	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a6a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a72:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a80:	461a      	mov	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e11b      	b.n	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	334d      	adds	r3, #77	@ 0x4d
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	f040 8081 	bne.w	8003ba2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	334d      	adds	r3, #77	@ 0x4d
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	331b      	adds	r3, #27
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	f040 80fa 	bne.w	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003acc:	78fa      	ldrb	r2, [r7, #3]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	334c      	adds	r3, #76	@ 0x4c
 8003adc:	2202      	movs	r2, #2
 8003ade:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	0151      	lsls	r1, r2, #5
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	440a      	add	r2, r1
 8003af6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afe:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	0151      	lsls	r1, r2, #5
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	440a      	add	r2, r1
 8003b16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b1e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b3a:	f023 0320 	bic.w	r3, r3, #32
 8003b3e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3326      	adds	r3, #38	@ 0x26
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	3326      	adds	r3, #38	@ 0x26
 8003b66:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	f040 80a9 	bne.w	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b84:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b8c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	e08e      	b.n	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	334d      	adds	r3, #77	@ 0x4d
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d143      	bne.n	8003c40 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	334d      	adds	r3, #77	@ 0x4d
 8003bc8:	2202      	movs	r2, #2
 8003bca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	334c      	adds	r3, #76	@ 0x4c
 8003bdc:	2202      	movs	r2, #2
 8003bde:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	3326      	adds	r3, #38	@ 0x26
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	3326      	adds	r3, #38	@ 0x26
 8003c06:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d159      	bne.n	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c22:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c2a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e03f      	b.n	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	334d      	adds	r3, #77	@ 0x4d
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d126      	bne.n	8003ca4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	334d      	adds	r3, #77	@ 0x4d
 8003c66:	2202      	movs	r2, #2
 8003c68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3344      	adds	r3, #68	@ 0x44
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	1c59      	adds	r1, r3, #1
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4403      	add	r3, r0
 8003c8a:	3344      	adds	r3, #68	@ 0x44
 8003c8c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	334c      	adds	r3, #76	@ 0x4c
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e00d      	b.n	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	334d      	adds	r3, #77	@ 0x4d
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	f000 8100 	beq.w	8003ebc <HCD_HC_IN_IRQHandler+0xcca>
 8003cbc:	e000      	b.n	8003cc0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cbe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	334c      	adds	r3, #76	@ 0x4c
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f008 f968 	bl	800bfac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cdc:	e0ef      	b.n	8003ebe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f005 f863 	bl	8008db2 <USB_ReadChInterrupts>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	d12f      	bne.n	8003d56 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d02:	461a      	mov	r2, r3
 8003d04:	2340      	movs	r3, #64	@ 0x40
 8003d06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	334d      	adds	r3, #77	@ 0x4d
 8003d18:	2205      	movs	r2, #5
 8003d1a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	331a      	adds	r3, #26
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	3344      	adds	r3, #68	@ 0x44
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f005 fdd3 	bl	80098fa <USB_HC_Halt>
 8003d54:	e0b3      	b.n	8003ebe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f005 f827 	bl	8008db2 <USB_ReadChInterrupts>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	f040 80a7 	bne.w	8003ebe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3326      	adds	r3, #38	@ 0x26
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d11b      	bne.n	8003dbe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	3344      	adds	r3, #68	@ 0x44
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	334d      	adds	r3, #77	@ 0x4d
 8003daa:	2204      	movs	r2, #4
 8003dac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f005 fd9f 	bl	80098fa <USB_HC_Halt>
 8003dbc:	e03f      	b.n	8003e3e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3326      	adds	r3, #38	@ 0x26
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	3326      	adds	r3, #38	@ 0x26
 8003de4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d129      	bne.n	8003e3e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	3344      	adds	r3, #68	@ 0x44
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	799b      	ldrb	r3, [r3, #6]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HCD_HC_IN_IRQHandler+0xc2a>
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	331b      	adds	r3, #27
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d110      	bne.n	8003e3e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	334d      	adds	r3, #77	@ 0x4d
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f005 fd5e 	bl	80098fa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	331b      	adds	r3, #27
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d129      	bne.n	8003ea8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	331b      	adds	r3, #27
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e86:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ea2:	f043 0320 	orr.w	r3, r3, #32
 8003ea6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	6093      	str	r3, [r2, #8]
 8003eba:	e000      	b.n	8003ebe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003ebc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	78fa      	ldrb	r2, [r7, #3]
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f004 ff65 	bl	8008db2 <USB_ReadChInterrupts>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d11b      	bne.n	8003f2a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003efe:	461a      	mov	r2, r3
 8003f00:	2304      	movs	r3, #4
 8003f02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	334d      	adds	r3, #77	@ 0x4d
 8003f14:	2207      	movs	r2, #7
 8003f16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f005 fcea 	bl	80098fa <USB_HC_Halt>
 8003f26:	f000 bc89 	b.w	800483c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f004 ff3d 	bl	8008db2 <USB_ReadChInterrupts>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	f040 8082 	bne.w	8004048 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f50:	461a      	mov	r2, r3
 8003f52:	2320      	movs	r3, #32
 8003f54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	3319      	adds	r3, #25
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d124      	bne.n	8003fb6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	3319      	adds	r3, #25
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f80:	78fa      	ldrb	r2, [r7, #3]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	334c      	adds	r3, #76	@ 0x4c
 8003f90:	2202      	movs	r2, #2
 8003f92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	334d      	adds	r3, #77	@ 0x4d
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f005 fca2 	bl	80098fa <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	331a      	adds	r3, #26
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	f040 8437 	bne.w	800483c <HCD_HC_OUT_IRQHandler+0x978>
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	331b      	adds	r3, #27
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 842b 	bne.w	800483c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3326      	adds	r3, #38	@ 0x26
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d009      	beq.n	8004010 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	331b      	adds	r3, #27
 800400c:	2201      	movs	r2, #1
 800400e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	334d      	adds	r3, #77	@ 0x4d
 8004020:	2203      	movs	r2, #3
 8004022:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	4611      	mov	r1, r2
 800402c:	4618      	mov	r0, r3
 800402e:	f005 fc64 	bl	80098fa <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	3344      	adds	r3, #68	@ 0x44
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e3f9      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	4611      	mov	r1, r2
 8004050:	4618      	mov	r0, r3
 8004052:	f004 feae 	bl	8008db2 <USB_ReadChInterrupts>
 8004056:	4603      	mov	r3, r0
 8004058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800405c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004060:	d111      	bne.n	8004086 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4413      	add	r3, r2
 800406a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800406e:	461a      	mov	r2, r3
 8004070:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004074:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	4611      	mov	r1, r2
 800407e:	4618      	mov	r0, r3
 8004080:	f005 fc3b 	bl	80098fa <USB_HC_Halt>
 8004084:	e3da      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f004 fe8f 	bl	8008db2 <USB_ReadChInterrupts>
 8004094:	4603      	mov	r3, r0
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d168      	bne.n	8004170 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	3344      	adds	r3, #68	@ 0x44
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	4611      	mov	r1, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f004 fe79 	bl	8008db2 <USB_ReadChInterrupts>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c6:	2b40      	cmp	r3, #64	@ 0x40
 80040c8:	d112      	bne.n	80040f0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	3319      	adds	r3, #25
 80040da:	2201      	movs	r2, #1
 80040dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ea:	461a      	mov	r2, r3
 80040ec:	2340      	movs	r3, #64	@ 0x40
 80040ee:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	331b      	adds	r3, #27
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d019      	beq.n	800413a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	331b      	adds	r3, #27
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	0151      	lsls	r1, r2, #5
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	440a      	add	r2, r1
 8004130:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004138:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004146:	461a      	mov	r2, r3
 8004148:	2301      	movs	r3, #1
 800414a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800414c:	78fa      	ldrb	r2, [r7, #3]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	334d      	adds	r3, #77	@ 0x4d
 800415c:	2201      	movs	r2, #1
 800415e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f005 fbc6 	bl	80098fa <USB_HC_Halt>
 800416e:	e365      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f004 fe1a 	bl	8008db2 <USB_ReadChInterrupts>
 800417e:	4603      	mov	r3, r0
 8004180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004184:	2b40      	cmp	r3, #64	@ 0x40
 8004186:	d139      	bne.n	80041fc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	334d      	adds	r3, #77	@ 0x4d
 8004198:	2205      	movs	r2, #5
 800419a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	331a      	adds	r3, #26
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	3319      	adds	r3, #25
 80041c2:	2201      	movs	r2, #1
 80041c4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	3344      	adds	r3, #68	@ 0x44
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f005 fb89 	bl	80098fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041f4:	461a      	mov	r2, r3
 80041f6:	2340      	movs	r3, #64	@ 0x40
 80041f8:	6093      	str	r3, [r2, #8]
 80041fa:	e31f      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f004 fdd4 	bl	8008db2 <USB_ReadChInterrupts>
 800420a:	4603      	mov	r3, r0
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d11a      	bne.n	800424a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004220:	461a      	mov	r2, r3
 8004222:	2308      	movs	r3, #8
 8004224:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	334d      	adds	r3, #77	@ 0x4d
 8004236:	2206      	movs	r2, #6
 8004238:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	78fa      	ldrb	r2, [r7, #3]
 8004240:	4611      	mov	r1, r2
 8004242:	4618      	mov	r0, r3
 8004244:	f005 fb59 	bl	80098fa <USB_HC_Halt>
 8004248:	e2f8      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f004 fdad 	bl	8008db2 <USB_ReadChInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b10      	cmp	r3, #16
 8004260:	d144      	bne.n	80042ec <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	3344      	adds	r3, #68	@ 0x44
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	334d      	adds	r3, #77	@ 0x4d
 8004286:	2204      	movs	r2, #4
 8004288:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	3319      	adds	r3, #25
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d114      	bne.n	80042ca <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	3318      	adds	r3, #24
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	3319      	adds	r3, #25
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f005 fb11 	bl	80098fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e4:	461a      	mov	r2, r3
 80042e6:	2310      	movs	r3, #16
 80042e8:	6093      	str	r3, [r2, #8]
 80042ea:	e2a7      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f004 fd5c 	bl	8008db2 <USB_ReadChInterrupts>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004300:	2b80      	cmp	r3, #128	@ 0x80
 8004302:	f040 8083 	bne.w	800440c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	799b      	ldrb	r3, [r3, #6]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d111      	bne.n	8004332 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	334d      	adds	r3, #77	@ 0x4d
 800431e:	2207      	movs	r2, #7
 8004320:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f005 fae5 	bl	80098fa <USB_HC_Halt>
 8004330:	e062      	b.n	80043f8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3344      	adds	r3, #68	@ 0x44
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	1c59      	adds	r1, r3, #1
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4403      	add	r3, r0
 8004352:	3344      	adds	r3, #68	@ 0x44
 8004354:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	3344      	adds	r3, #68	@ 0x44
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d922      	bls.n	80043b2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	3344      	adds	r3, #68	@ 0x44
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	334c      	adds	r3, #76	@ 0x4c
 8004390:	2204      	movs	r2, #4
 8004392:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	334c      	adds	r3, #76	@ 0x4c
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f007 fdfe 	bl	800bfac <HAL_HCD_HC_NotifyURBChange_Callback>
 80043b0:	e022      	b.n	80043f8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	334c      	adds	r3, #76	@ 0x4c
 80043c2:	2202      	movs	r2, #2
 80043c4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043dc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043e4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f2:	461a      	mov	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004404:	461a      	mov	r2, r3
 8004406:	2380      	movs	r3, #128	@ 0x80
 8004408:	6093      	str	r3, [r2, #8]
 800440a:	e217      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f004 fccc 	bl	8008db2 <USB_ReadChInterrupts>
 800441a:	4603      	mov	r3, r0
 800441c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004424:	d11b      	bne.n	800445e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	334d      	adds	r3, #77	@ 0x4d
 8004436:	2209      	movs	r2, #9
 8004438:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	4611      	mov	r1, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f005 fa59 	bl	80098fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4413      	add	r3, r2
 8004450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004454:	461a      	mov	r2, r3
 8004456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800445a:	6093      	str	r3, [r2, #8]
 800445c:	e1ee      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	78fa      	ldrb	r2, [r7, #3]
 8004464:	4611      	mov	r1, r2
 8004466:	4618      	mov	r0, r3
 8004468:	f004 fca3 	bl	8008db2 <USB_ReadChInterrupts>
 800446c:	4603      	mov	r3, r0
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b02      	cmp	r3, #2
 8004474:	f040 81df 	bne.w	8004836 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004484:	461a      	mov	r2, r3
 8004486:	2302      	movs	r3, #2
 8004488:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	334d      	adds	r3, #77	@ 0x4d
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b01      	cmp	r3, #1
 800449e:	f040 8093 	bne.w	80045c8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	334d      	adds	r3, #77	@ 0x4d
 80044b2:	2202      	movs	r2, #2
 80044b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	334c      	adds	r3, #76	@ 0x4c
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	3326      	adds	r3, #38	@ 0x26
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d00b      	beq.n	80044f8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	3326      	adds	r3, #38	@ 0x26
 80044f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	f040 8190 	bne.w	8004818 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	799b      	ldrb	r3, [r3, #6]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d115      	bne.n	800452c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	333d      	adds	r3, #61	@ 0x3d
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	78fa      	ldrb	r2, [r7, #3]
 8004514:	f083 0301 	eor.w	r3, r3, #1
 8004518:	b2d8      	uxtb	r0, r3
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	333d      	adds	r3, #61	@ 0x3d
 8004528:	4602      	mov	r2, r0
 800452a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	799b      	ldrb	r3, [r3, #6]
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 8171 	bne.w	8004818 <HCD_HC_OUT_IRQHandler+0x954>
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	3334      	adds	r3, #52	@ 0x34
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8165 	beq.w	8004818 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	3334      	adds	r3, #52	@ 0x34
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4403      	add	r3, r0
 800456e:	3328      	adds	r3, #40	@ 0x28
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	440b      	add	r3, r1
 8004574:	1e59      	subs	r1, r3, #1
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4403      	add	r3, r0
 8004584:	3328      	adds	r3, #40	@ 0x28
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	fbb1 f3f3 	udiv	r3, r1, r3
 800458c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 813f 	beq.w	8004818 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800459a:	78fa      	ldrb	r2, [r7, #3]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	333d      	adds	r3, #61	@ 0x3d
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	f083 0301 	eor.w	r3, r3, #1
 80045b2:	b2d8      	uxtb	r0, r3
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	333d      	adds	r3, #61	@ 0x3d
 80045c2:	4602      	mov	r2, r0
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e127      	b.n	8004818 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	334d      	adds	r3, #77	@ 0x4d
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d120      	bne.n	8004620 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	334d      	adds	r3, #77	@ 0x4d
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	331b      	adds	r3, #27
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	f040 8107 	bne.w	8004818 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	334c      	adds	r3, #76	@ 0x4c
 800461a:	2202      	movs	r2, #2
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	e0fb      	b.n	8004818 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	334d      	adds	r3, #77	@ 0x4d
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b04      	cmp	r3, #4
 8004634:	d13a      	bne.n	80046ac <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	334d      	adds	r3, #77	@ 0x4d
 8004646:	2202      	movs	r2, #2
 8004648:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800464a:	78fa      	ldrb	r2, [r7, #3]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	334c      	adds	r3, #76	@ 0x4c
 800465a:	2202      	movs	r2, #2
 800465c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800465e:	78fa      	ldrb	r2, [r7, #3]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	331b      	adds	r3, #27
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	f040 80d1 	bne.w	8004818 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004676:	78fa      	ldrb	r2, [r7, #3]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	331b      	adds	r3, #27
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a8:	6053      	str	r3, [r2, #4]
 80046aa:	e0b5      	b.n	8004818 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	334d      	adds	r3, #77	@ 0x4d
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d114      	bne.n	80046ec <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	334d      	adds	r3, #77	@ 0x4d
 80046d2:	2202      	movs	r2, #2
 80046d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	334c      	adds	r3, #76	@ 0x4c
 80046e6:	2202      	movs	r2, #2
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e095      	b.n	8004818 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	334d      	adds	r3, #77	@ 0x4d
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d114      	bne.n	800472c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004702:	78fa      	ldrb	r2, [r7, #3]
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	334d      	adds	r3, #77	@ 0x4d
 8004712:	2202      	movs	r2, #2
 8004714:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	334c      	adds	r3, #76	@ 0x4c
 8004726:	2205      	movs	r2, #5
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e075      	b.n	8004818 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	334d      	adds	r3, #77	@ 0x4d
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b07      	cmp	r3, #7
 8004740:	d00a      	beq.n	8004758 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	334d      	adds	r3, #77	@ 0x4d
 8004752:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004754:	2b09      	cmp	r3, #9
 8004756:	d170      	bne.n	800483a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	334d      	adds	r3, #77	@ 0x4d
 8004768:	2202      	movs	r2, #2
 800476a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	3344      	adds	r3, #68	@ 0x44
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	1c59      	adds	r1, r3, #1
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4403      	add	r3, r0
 800478c:	3344      	adds	r3, #68	@ 0x44
 800478e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	3344      	adds	r3, #68	@ 0x44
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d914      	bls.n	80047d0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047a6:	78fa      	ldrb	r2, [r7, #3]
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	3344      	adds	r3, #68	@ 0x44
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	334c      	adds	r3, #76	@ 0x4c
 80047ca:	2204      	movs	r2, #4
 80047cc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047ce:	e022      	b.n	8004816 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047d0:	78fa      	ldrb	r2, [r7, #3]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	334c      	adds	r3, #76	@ 0x4c
 80047e0:	2202      	movs	r2, #2
 80047e2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004802:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004810:	461a      	mov	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004816:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	334c      	adds	r3, #76	@ 0x4c
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f007 fbbc 	bl	800bfac <HAL_HCD_HC_NotifyURBChange_Callback>
 8004834:	e002      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004836:	bf00      	nop
 8004838:	e000      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800483a:	bf00      	nop
  }
}
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b08a      	sub	sp, #40	@ 0x28
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	0c5b      	lsrs	r3, r3, #17
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004876:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d004      	beq.n	8004888 <HCD_RXQLVL_IRQHandler+0x46>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b05      	cmp	r3, #5
 8004882:	f000 80b6 	beq.w	80049f2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004886:	e0b7      	b.n	80049f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80b3 	beq.w	80049f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	332c      	adds	r3, #44	@ 0x2c
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 80a7 	beq.w	80049f6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	3338      	adds	r3, #56	@ 0x38
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	18d1      	adds	r1, r2, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4403      	add	r3, r0
 80048cc:	3334      	adds	r3, #52	@ 0x34
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4299      	cmp	r1, r3
 80048d2:	f200 8083 	bhi.w	80049dc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	332c      	adds	r3, #44	@ 0x2c
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	b292      	uxth	r2, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	f004 f9f3 	bl	8008cdc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4613      	mov	r3, r2
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	332c      	adds	r3, #44	@ 0x2c
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	18d1      	adds	r1, r2, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4403      	add	r3, r0
 800491a:	332c      	adds	r3, #44	@ 0x2c
 800491c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4613      	mov	r3, r2
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	3338      	adds	r3, #56	@ 0x38
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	18d1      	adds	r1, r2, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4403      	add	r3, r0
 8004942:	3338      	adds	r3, #56	@ 0x38
 8004944:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	4413      	add	r3, r2
 800494e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	0cdb      	lsrs	r3, r3, #19
 8004956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800495a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4613      	mov	r3, r2
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	3328      	adds	r3, #40	@ 0x28
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	4293      	cmp	r3, r2
 8004974:	d13f      	bne.n	80049f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d03c      	beq.n	80049f6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	4413      	add	r3, r2
 8004984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004992:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800499a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049a8:	461a      	mov	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4613      	mov	r3, r2
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	333c      	adds	r3, #60	@ 0x3c
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	f083 0301 	eor.w	r3, r3, #1
 80049c4:	b2d8      	uxtb	r0, r3
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4613      	mov	r3, r2
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	333c      	adds	r3, #60	@ 0x3c
 80049d6:	4602      	mov	r2, r0
 80049d8:	701a      	strb	r2, [r3, #0]
      break;
 80049da:	e00c      	b.n	80049f6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4613      	mov	r3, r2
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	334c      	adds	r3, #76	@ 0x4c
 80049ec:	2204      	movs	r2, #4
 80049ee:	701a      	strb	r2, [r3, #0]
      break;
 80049f0:	e001      	b.n	80049f6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80049f6:	bf00      	nop
  }
}
 80049f8:	bf00      	nop
 80049fa:	3728      	adds	r7, #40	@ 0x28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004a2c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d10b      	bne.n	8004a50 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d102      	bne.n	8004a48 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f007 fa96 	bl	800bf74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f043 0302 	orr.w	r3, r3, #2
 8004a4e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d132      	bne.n	8004ac0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f043 0308 	orr.w	r3, r3, #8
 8004a60:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d126      	bne.n	8004aba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	7a5b      	ldrb	r3, [r3, #9]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d113      	bne.n	8004a9c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004a7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a7e:	d106      	bne.n	8004a8e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2102      	movs	r1, #2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f004 fab8 	bl	8008ffc <USB_InitFSLSPClkSel>
 8004a8c:	e011      	b.n	8004ab2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2101      	movs	r1, #1
 8004a94:	4618      	mov	r0, r3
 8004a96:	f004 fab1 	bl	8008ffc <USB_InitFSLSPClkSel>
 8004a9a:	e00a      	b.n	8004ab2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	79db      	ldrb	r3, [r3, #7]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d106      	bne.n	8004ab2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004ab0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f007 fa88 	bl	800bfc8 <HAL_HCD_PortEnabled_Callback>
 8004ab8:	e002      	b.n	8004ac0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f007 fa92 	bl	800bfe4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d103      	bne.n	8004ad2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f043 0320 	orr.w	r3, r3, #32
 8004ad0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6013      	str	r3, [r2, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e12b      	b.n	8004d52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc ff76 	bl	8001a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	@ 0x24
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b4c:	f001 fa20 	bl	8005f90 <HAL_RCC_GetPCLK1Freq>
 8004b50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	4a81      	ldr	r2, [pc, #516]	@ (8004d5c <HAL_I2C_Init+0x274>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d807      	bhi.n	8004b6c <HAL_I2C_Init+0x84>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a80      	ldr	r2, [pc, #512]	@ (8004d60 <HAL_I2C_Init+0x278>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	bf94      	ite	ls
 8004b64:	2301      	movls	r3, #1
 8004b66:	2300      	movhi	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	e006      	b.n	8004b7a <HAL_I2C_Init+0x92>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4a7d      	ldr	r2, [pc, #500]	@ (8004d64 <HAL_I2C_Init+0x27c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	bf94      	ite	ls
 8004b74:	2301      	movls	r3, #1
 8004b76:	2300      	movhi	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e0e7      	b.n	8004d52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4a78      	ldr	r2, [pc, #480]	@ (8004d68 <HAL_I2C_Init+0x280>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	0c9b      	lsrs	r3, r3, #18
 8004b8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	4a6a      	ldr	r2, [pc, #424]	@ (8004d5c <HAL_I2C_Init+0x274>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d802      	bhi.n	8004bbc <HAL_I2C_Init+0xd4>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	e009      	b.n	8004bd0 <HAL_I2C_Init+0xe8>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	4a69      	ldr	r2, [pc, #420]	@ (8004d6c <HAL_I2C_Init+0x284>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	099b      	lsrs	r3, r3, #6
 8004bce:	3301      	adds	r3, #1
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004be2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	495c      	ldr	r1, [pc, #368]	@ (8004d5c <HAL_I2C_Init+0x274>)
 8004bec:	428b      	cmp	r3, r1
 8004bee:	d819      	bhi.n	8004c24 <HAL_I2C_Init+0x13c>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1e59      	subs	r1, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bfe:	1c59      	adds	r1, r3, #1
 8004c00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c04:	400b      	ands	r3, r1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_I2C_Init+0x138>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1e59      	subs	r1, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c18:	3301      	adds	r3, #1
 8004c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c1e:	e051      	b.n	8004cc4 <HAL_I2C_Init+0x1dc>
 8004c20:	2304      	movs	r3, #4
 8004c22:	e04f      	b.n	8004cc4 <HAL_I2C_Init+0x1dc>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d111      	bne.n	8004c50 <HAL_I2C_Init+0x168>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1e58      	subs	r0, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6859      	ldr	r1, [r3, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	440b      	add	r3, r1
 8004c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	e012      	b.n	8004c76 <HAL_I2C_Init+0x18e>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	1e58      	subs	r0, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6859      	ldr	r1, [r3, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	0099      	lsls	r1, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c66:	3301      	adds	r3, #1
 8004c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf0c      	ite	eq
 8004c70:	2301      	moveq	r3, #1
 8004c72:	2300      	movne	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_I2C_Init+0x196>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e022      	b.n	8004cc4 <HAL_I2C_Init+0x1dc>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10e      	bne.n	8004ca4 <HAL_I2C_Init+0x1bc>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1e58      	subs	r0, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6859      	ldr	r1, [r3, #4]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	440b      	add	r3, r1
 8004c94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c98:	3301      	adds	r3, #1
 8004c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca2:	e00f      	b.n	8004cc4 <HAL_I2C_Init+0x1dc>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	1e58      	subs	r0, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6859      	ldr	r1, [r3, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	0099      	lsls	r1, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	6809      	ldr	r1, [r1, #0]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69da      	ldr	r2, [r3, #28]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004cf2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6911      	ldr	r1, [r2, #16]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68d2      	ldr	r2, [r2, #12]
 8004cfe:	4311      	orrs	r1, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	000186a0 	.word	0x000186a0
 8004d60:	001e847f 	.word	0x001e847f
 8004d64:	003d08ff 	.word	0x003d08ff
 8004d68:	431bde83 	.word	0x431bde83
 8004d6c:	10624dd3 	.word	0x10624dd3

08004d70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e128      	b.n	8004fd4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a90      	ldr	r2, [pc, #576]	@ (8004fdc <HAL_I2S_Init+0x26c>)
 8004d9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7fc fe77 	bl	8001a90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004db8:	f023 030f 	bic.w	r3, r3, #15
 8004dbc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d060      	beq.n	8004e90 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004dd6:	2310      	movs	r3, #16
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e001      	b.n	8004de0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ddc:	2320      	movs	r3, #32
 8004dde:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d802      	bhi.n	8004dee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004dee:	2001      	movs	r0, #1
 8004df0:	f001 f9d8 	bl	80061a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004df4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dfe:	d125      	bne.n	8004e4c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d010      	beq.n	8004e2a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	3305      	adds	r3, #5
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e01f      	b.n	8004e6a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	3305      	adds	r3, #5
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	e00e      	b.n	8004e6a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e66:	3305      	adds	r3, #5
 8004e68:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4a5c      	ldr	r2, [pc, #368]	@ (8004fe0 <HAL_I2S_Init+0x270>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	08db      	lsrs	r3, r3, #3
 8004e74:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	e003      	b.n	8004e98 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004e90:	2302      	movs	r3, #2
 8004e92:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d902      	bls.n	8004ea4 <HAL_I2S_Init+0x134>
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	2bff      	cmp	r3, #255	@ 0xff
 8004ea2:	d907      	bls.n	8004eb4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea8:	f043 0210 	orr.w	r2, r3, #16
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e08f      	b.n	8004fd4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	ea42 0103 	orr.w	r1, r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004ed2:	f023 030f 	bic.w	r3, r3, #15
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6851      	ldr	r1, [r2, #4]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6892      	ldr	r2, [r2, #8]
 8004ede:	4311      	orrs	r1, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68d2      	ldr	r2, [r2, #12]
 8004ee4:	4311      	orrs	r1, r2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6992      	ldr	r2, [r2, #24]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ef6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d161      	bne.n	8004fc4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a38      	ldr	r2, [pc, #224]	@ (8004fe4 <HAL_I2S_Init+0x274>)
 8004f04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a37      	ldr	r2, [pc, #220]	@ (8004fe8 <HAL_I2S_Init+0x278>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d101      	bne.n	8004f14 <HAL_I2S_Init+0x1a4>
 8004f10:	4b36      	ldr	r3, [pc, #216]	@ (8004fec <HAL_I2S_Init+0x27c>)
 8004f12:	e001      	b.n	8004f18 <HAL_I2S_Init+0x1a8>
 8004f14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	4932      	ldr	r1, [pc, #200]	@ (8004fe8 <HAL_I2S_Init+0x278>)
 8004f20:	428a      	cmp	r2, r1
 8004f22:	d101      	bne.n	8004f28 <HAL_I2S_Init+0x1b8>
 8004f24:	4a31      	ldr	r2, [pc, #196]	@ (8004fec <HAL_I2S_Init+0x27c>)
 8004f26:	e001      	b.n	8004f2c <HAL_I2S_Init+0x1bc>
 8004f28:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004f2c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004f30:	f023 030f 	bic.w	r3, r3, #15
 8004f34:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe8 <HAL_I2S_Init+0x278>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <HAL_I2S_Init+0x1d4>
 8004f40:	4b2a      	ldr	r3, [pc, #168]	@ (8004fec <HAL_I2S_Init+0x27c>)
 8004f42:	e001      	b.n	8004f48 <HAL_I2S_Init+0x1d8>
 8004f44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f48:	2202      	movs	r2, #2
 8004f4a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a25      	ldr	r2, [pc, #148]	@ (8004fe8 <HAL_I2S_Init+0x278>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d101      	bne.n	8004f5a <HAL_I2S_Init+0x1ea>
 8004f56:	4b25      	ldr	r3, [pc, #148]	@ (8004fec <HAL_I2S_Init+0x27c>)
 8004f58:	e001      	b.n	8004f5e <HAL_I2S_Init+0x1ee>
 8004f5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f6a:	d003      	beq.n	8004f74 <HAL_I2S_Init+0x204>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004f74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	e001      	b.n	8004f80 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f94:	4313      	orrs	r3, r2
 8004f96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	897b      	ldrh	r3, [r7, #10]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe8 <HAL_I2S_Init+0x278>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <HAL_I2S_Init+0x24c>
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004fec <HAL_I2S_Init+0x27c>)
 8004fba:	e001      	b.n	8004fc0 <HAL_I2S_Init+0x250>
 8004fbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fc0:	897a      	ldrh	r2, [r7, #10]
 8004fc2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3720      	adds	r7, #32
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	080050e7 	.word	0x080050e7
 8004fe0:	cccccccd 	.word	0xcccccccd
 8004fe4:	080051fd 	.word	0x080051fd
 8004fe8:	40003800 	.word	0x40003800
 8004fec:	40003400 	.word	0x40003400

08004ff0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	881a      	ldrh	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	1c9a      	adds	r2, r3, #2
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10e      	bne.n	8005080 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005070:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff ffb8 	bl	8004ff0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	b292      	uxth	r2, r2
 800509c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	1c9a      	adds	r2, r3, #2
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10e      	bne.n	80050de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff ff93 	bl	8005004 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b086      	sub	sp, #24
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d13a      	bne.n	8005178 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	d109      	bne.n	8005120 <I2S_IRQHandler+0x3a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005116:	2b40      	cmp	r3, #64	@ 0x40
 8005118:	d102      	bne.n	8005120 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff ffb4 	bl	8005088 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005126:	2b40      	cmp	r3, #64	@ 0x40
 8005128:	d126      	bne.n	8005178 <I2S_IRQHandler+0x92>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b20      	cmp	r3, #32
 8005136:	d11f      	bne.n	8005178 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005146:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	613b      	str	r3, [r7, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516a:	f043 0202 	orr.w	r2, r3, #2
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff ff50 	bl	8005018 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b03      	cmp	r3, #3
 8005182:	d136      	bne.n	80051f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b02      	cmp	r3, #2
 800518c:	d109      	bne.n	80051a2 <I2S_IRQHandler+0xbc>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005198:	2b80      	cmp	r3, #128	@ 0x80
 800519a:	d102      	bne.n	80051a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff ff45 	bl	800502c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d122      	bne.n	80051f2 <I2S_IRQHandler+0x10c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d11b      	bne.n	80051f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e4:	f043 0204 	orr.w	r2, r3, #4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff ff13 	bl	8005018 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051f2:	bf00      	nop
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a92      	ldr	r2, [pc, #584]	@ (800545c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d101      	bne.n	800521a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005216:	4b92      	ldr	r3, [pc, #584]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005218:	e001      	b.n	800521e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800521a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a8b      	ldr	r2, [pc, #556]	@ (800545c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005234:	4b8a      	ldr	r3, [pc, #552]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005236:	e001      	b.n	800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005238:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005248:	d004      	beq.n	8005254 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 8099 	bne.w	8005386 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b02      	cmp	r3, #2
 800525c:	d107      	bne.n	800526e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f925 	bl	80054b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	d107      	bne.n	8005288 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f9c8 	bl	8005618 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528e:	2b40      	cmp	r3, #64	@ 0x40
 8005290:	d13a      	bne.n	8005308 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d035      	beq.n	8005308 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a6e      	ldr	r2, [pc, #440]	@ (800545c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80052a6:	4b6e      	ldr	r3, [pc, #440]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052a8:	e001      	b.n	80052ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80052aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4969      	ldr	r1, [pc, #420]	@ (800545c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052b6:	428b      	cmp	r3, r1
 80052b8:	d101      	bne.n	80052be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80052ba:	4b69      	ldr	r3, [pc, #420]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052bc:	e001      	b.n	80052c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80052be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fa:	f043 0202 	orr.w	r2, r3, #2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff fe88 	bl	8005018 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b08      	cmp	r3, #8
 8005310:	f040 80c3 	bne.w	800549a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 80bd 	beq.w	800549a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800532e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a49      	ldr	r2, [pc, #292]	@ (800545c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d101      	bne.n	800533e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800533a:	4b49      	ldr	r3, [pc, #292]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800533c:	e001      	b.n	8005342 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800533e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4944      	ldr	r1, [pc, #272]	@ (800545c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800534a:	428b      	cmp	r3, r1
 800534c:	d101      	bne.n	8005352 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800534e:	4b44      	ldr	r3, [pc, #272]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005350:	e001      	b.n	8005356 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005352:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005356:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800535a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800535c:	2300      	movs	r3, #0
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	60bb      	str	r3, [r7, #8]
 8005368:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005376:	f043 0204 	orr.w	r2, r3, #4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff fe4a 	bl	8005018 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005384:	e089      	b.n	800549a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b02      	cmp	r3, #2
 800538e:	d107      	bne.n	80053a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f8be 	bl	800551c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d107      	bne.n	80053ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f8fd 	bl	80055b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	d12f      	bne.n	8005424 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d02a      	beq.n	8005424 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1e      	ldr	r2, [pc, #120]	@ (800545c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d101      	bne.n	80053ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80053e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053ea:	e001      	b.n	80053f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80053ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4919      	ldr	r1, [pc, #100]	@ (800545c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053f8:	428b      	cmp	r3, r1
 80053fa:	d101      	bne.n	8005400 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80053fc:	4b18      	ldr	r3, [pc, #96]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053fe:	e001      	b.n	8005404 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005400:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005404:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005408:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005416:	f043 0202 	orr.w	r2, r3, #2
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff fdfa 	bl	8005018 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b08      	cmp	r3, #8
 800542c:	d136      	bne.n	800549c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	d031      	beq.n	800549c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a07      	ldr	r2, [pc, #28]	@ (800545c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d101      	bne.n	8005446 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005442:	4b07      	ldr	r3, [pc, #28]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005444:	e001      	b.n	800544a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005446:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4902      	ldr	r1, [pc, #8]	@ (800545c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005452:	428b      	cmp	r3, r1
 8005454:	d106      	bne.n	8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005456:	4b02      	ldr	r3, [pc, #8]	@ (8005460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005458:	e006      	b.n	8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800545a:	bf00      	nop
 800545c:	40003800 	.word	0x40003800
 8005460:	40003400 	.word	0x40003400
 8005464:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005468:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800546c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800547c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	f043 0204 	orr.w	r2, r3, #4
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff fdc0 	bl	8005018 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005498:	e000      	b.n	800549c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800549a:	bf00      	nop
}
 800549c:	bf00      	nop
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	1c99      	adds	r1, r3, #2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6251      	str	r1, [r2, #36]	@ 0x24
 80054ca:	881a      	ldrh	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d113      	bne.n	8005512 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80054f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ffc9 	bl	80054a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	1c99      	adds	r1, r3, #2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6251      	str	r1, [r2, #36]	@ 0x24
 800552e:	8819      	ldrh	r1, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1d      	ldr	r2, [pc, #116]	@ (80055ac <I2SEx_TxISR_I2SExt+0x90>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d101      	bne.n	800553e <I2SEx_TxISR_I2SExt+0x22>
 800553a:	4b1d      	ldr	r3, [pc, #116]	@ (80055b0 <I2SEx_TxISR_I2SExt+0x94>)
 800553c:	e001      	b.n	8005542 <I2SEx_TxISR_I2SExt+0x26>
 800553e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005542:	460a      	mov	r2, r1
 8005544:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d121      	bne.n	80055a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a12      	ldr	r2, [pc, #72]	@ (80055ac <I2SEx_TxISR_I2SExt+0x90>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d101      	bne.n	800556c <I2SEx_TxISR_I2SExt+0x50>
 8005568:	4b11      	ldr	r3, [pc, #68]	@ (80055b0 <I2SEx_TxISR_I2SExt+0x94>)
 800556a:	e001      	b.n	8005570 <I2SEx_TxISR_I2SExt+0x54>
 800556c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	490d      	ldr	r1, [pc, #52]	@ (80055ac <I2SEx_TxISR_I2SExt+0x90>)
 8005578:	428b      	cmp	r3, r1
 800557a:	d101      	bne.n	8005580 <I2SEx_TxISR_I2SExt+0x64>
 800557c:	4b0c      	ldr	r3, [pc, #48]	@ (80055b0 <I2SEx_TxISR_I2SExt+0x94>)
 800557e:	e001      	b.n	8005584 <I2SEx_TxISR_I2SExt+0x68>
 8005580:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005584:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005588:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d106      	bne.n	80055a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff ff81 	bl	80054a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055a2:	bf00      	nop
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40003800 	.word	0x40003800
 80055b0:	40003400 	.word	0x40003400

080055b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68d8      	ldr	r0, [r3, #12]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c6:	1c99      	adds	r1, r3, #2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80055cc:	b282      	uxth	r2, r0
 80055ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d113      	bne.n	8005610 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ff4a 	bl	80054a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a20      	ldr	r2, [pc, #128]	@ (80056a8 <I2SEx_RxISR_I2SExt+0x90>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d101      	bne.n	800562e <I2SEx_RxISR_I2SExt+0x16>
 800562a:	4b20      	ldr	r3, [pc, #128]	@ (80056ac <I2SEx_RxISR_I2SExt+0x94>)
 800562c:	e001      	b.n	8005632 <I2SEx_RxISR_I2SExt+0x1a>
 800562e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005632:	68d8      	ldr	r0, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	1c99      	adds	r1, r3, #2
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800563e:	b282      	uxth	r2, r0
 8005640:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d121      	bne.n	800569e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a12      	ldr	r2, [pc, #72]	@ (80056a8 <I2SEx_RxISR_I2SExt+0x90>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d101      	bne.n	8005668 <I2SEx_RxISR_I2SExt+0x50>
 8005664:	4b11      	ldr	r3, [pc, #68]	@ (80056ac <I2SEx_RxISR_I2SExt+0x94>)
 8005666:	e001      	b.n	800566c <I2SEx_RxISR_I2SExt+0x54>
 8005668:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	490d      	ldr	r1, [pc, #52]	@ (80056a8 <I2SEx_RxISR_I2SExt+0x90>)
 8005674:	428b      	cmp	r3, r1
 8005676:	d101      	bne.n	800567c <I2SEx_RxISR_I2SExt+0x64>
 8005678:	4b0c      	ldr	r3, [pc, #48]	@ (80056ac <I2SEx_RxISR_I2SExt+0x94>)
 800567a:	e001      	b.n	8005680 <I2SEx_RxISR_I2SExt+0x68>
 800567c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005680:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005684:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff ff03 	bl	80054a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40003800 	.word	0x40003800
 80056ac:	40003400 	.word	0x40003400

080056b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e267      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d075      	beq.n	80057ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056ce:	4b88      	ldr	r3, [pc, #544]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d00c      	beq.n	80056f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056da:	4b85      	ldr	r3, [pc, #532]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d112      	bne.n	800570c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056e6:	4b82      	ldr	r3, [pc, #520]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056f2:	d10b      	bne.n	800570c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f4:	4b7e      	ldr	r3, [pc, #504]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d05b      	beq.n	80057b8 <HAL_RCC_OscConfig+0x108>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d157      	bne.n	80057b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e242      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005714:	d106      	bne.n	8005724 <HAL_RCC_OscConfig+0x74>
 8005716:	4b76      	ldr	r3, [pc, #472]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a75      	ldr	r2, [pc, #468]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 800571c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e01d      	b.n	8005760 <HAL_RCC_OscConfig+0xb0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800572c:	d10c      	bne.n	8005748 <HAL_RCC_OscConfig+0x98>
 800572e:	4b70      	ldr	r3, [pc, #448]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6f      	ldr	r2, [pc, #444]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4b6d      	ldr	r3, [pc, #436]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a6c      	ldr	r2, [pc, #432]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e00b      	b.n	8005760 <HAL_RCC_OscConfig+0xb0>
 8005748:	4b69      	ldr	r3, [pc, #420]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a68      	ldr	r2, [pc, #416]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 800574e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	4b66      	ldr	r3, [pc, #408]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a65      	ldr	r2, [pc, #404]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 800575a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800575e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d013      	beq.n	8005790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7fc fd00 	bl	800216c <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005770:	f7fc fcfc 	bl	800216c <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	@ 0x64
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e207      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005782:	4b5b      	ldr	r3, [pc, #364]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0xc0>
 800578e:	e014      	b.n	80057ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fc fcec 	bl	800216c <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005798:	f7fc fce8 	bl	800216c <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	@ 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e1f3      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057aa:	4b51      	ldr	r3, [pc, #324]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0xe8>
 80057b6:	e000      	b.n	80057ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d063      	beq.n	800588e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057c6:	4b4a      	ldr	r3, [pc, #296]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d2:	4b47      	ldr	r3, [pc, #284]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d11c      	bne.n	8005818 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057de:	4b44      	ldr	r3, [pc, #272]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d116      	bne.n	8005818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ea:	4b41      	ldr	r3, [pc, #260]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_RCC_OscConfig+0x152>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e1c7      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005802:	4b3b      	ldr	r3, [pc, #236]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4937      	ldr	r1, [pc, #220]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005812:	4313      	orrs	r3, r2
 8005814:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005816:	e03a      	b.n	800588e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d020      	beq.n	8005862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005820:	4b34      	ldr	r3, [pc, #208]	@ (80058f4 <HAL_RCC_OscConfig+0x244>)
 8005822:	2201      	movs	r2, #1
 8005824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005826:	f7fc fca1 	bl	800216c <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800582e:	f7fc fc9d 	bl	800216c <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e1a8      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005840:	4b2b      	ldr	r3, [pc, #172]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800584c:	4b28      	ldr	r3, [pc, #160]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4925      	ldr	r1, [pc, #148]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 800585c:	4313      	orrs	r3, r2
 800585e:	600b      	str	r3, [r1, #0]
 8005860:	e015      	b.n	800588e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005862:	4b24      	ldr	r3, [pc, #144]	@ (80058f4 <HAL_RCC_OscConfig+0x244>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fc fc80 	bl	800216c <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005870:	f7fc fc7c 	bl	800216c <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e187      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005882:	4b1b      	ldr	r3, [pc, #108]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d036      	beq.n	8005908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d016      	beq.n	80058d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058a2:	4b15      	ldr	r3, [pc, #84]	@ (80058f8 <HAL_RCC_OscConfig+0x248>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a8:	f7fc fc60 	bl	800216c <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b0:	f7fc fc5c 	bl	800216c <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e167      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058c2:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <HAL_RCC_OscConfig+0x240>)
 80058c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0f0      	beq.n	80058b0 <HAL_RCC_OscConfig+0x200>
 80058ce:	e01b      	b.n	8005908 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d0:	4b09      	ldr	r3, [pc, #36]	@ (80058f8 <HAL_RCC_OscConfig+0x248>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d6:	f7fc fc49 	bl	800216c <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058dc:	e00e      	b.n	80058fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058de:	f7fc fc45 	bl	800216c <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d907      	bls.n	80058fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e150      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
 80058f0:	40023800 	.word	0x40023800
 80058f4:	42470000 	.word	0x42470000
 80058f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058fc:	4b88      	ldr	r3, [pc, #544]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 80058fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ea      	bne.n	80058de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8097 	beq.w	8005a44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005916:	2300      	movs	r3, #0
 8005918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800591a:	4b81      	ldr	r3, [pc, #516]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 800591c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10f      	bne.n	8005946 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005926:	2300      	movs	r3, #0
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	4b7d      	ldr	r3, [pc, #500]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592e:	4a7c      	ldr	r2, [pc, #496]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005934:	6413      	str	r3, [r2, #64]	@ 0x40
 8005936:	4b7a      	ldr	r3, [pc, #488]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005942:	2301      	movs	r3, #1
 8005944:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005946:	4b77      	ldr	r3, [pc, #476]	@ (8005b24 <HAL_RCC_OscConfig+0x474>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800594e:	2b00      	cmp	r3, #0
 8005950:	d118      	bne.n	8005984 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005952:	4b74      	ldr	r3, [pc, #464]	@ (8005b24 <HAL_RCC_OscConfig+0x474>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a73      	ldr	r2, [pc, #460]	@ (8005b24 <HAL_RCC_OscConfig+0x474>)
 8005958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800595c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800595e:	f7fc fc05 	bl	800216c <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005966:	f7fc fc01 	bl	800216c <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e10c      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005978:	4b6a      	ldr	r3, [pc, #424]	@ (8005b24 <HAL_RCC_OscConfig+0x474>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0f0      	beq.n	8005966 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d106      	bne.n	800599a <HAL_RCC_OscConfig+0x2ea>
 800598c:	4b64      	ldr	r3, [pc, #400]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005990:	4a63      	ldr	r2, [pc, #396]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	6713      	str	r3, [r2, #112]	@ 0x70
 8005998:	e01c      	b.n	80059d4 <HAL_RCC_OscConfig+0x324>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b05      	cmp	r3, #5
 80059a0:	d10c      	bne.n	80059bc <HAL_RCC_OscConfig+0x30c>
 80059a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a6:	4a5e      	ldr	r2, [pc, #376]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059a8:	f043 0304 	orr.w	r3, r3, #4
 80059ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b2:	4a5b      	ldr	r2, [pc, #364]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ba:	e00b      	b.n	80059d4 <HAL_RCC_OscConfig+0x324>
 80059bc:	4b58      	ldr	r3, [pc, #352]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c0:	4a57      	ldr	r2, [pc, #348]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80059c8:	4b55      	ldr	r3, [pc, #340]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059cc:	4a54      	ldr	r2, [pc, #336]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059ce:	f023 0304 	bic.w	r3, r3, #4
 80059d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d015      	beq.n	8005a08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059dc:	f7fc fbc6 	bl	800216c <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e4:	f7fc fbc2 	bl	800216c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e0cb      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fa:	4b49      	ldr	r3, [pc, #292]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 80059fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ee      	beq.n	80059e4 <HAL_RCC_OscConfig+0x334>
 8005a06:	e014      	b.n	8005a32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a08:	f7fc fbb0 	bl	800216c <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a10:	f7fc fbac 	bl	800216c <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e0b5      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a26:	4b3e      	ldr	r3, [pc, #248]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1ee      	bne.n	8005a10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d105      	bne.n	8005a44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a38:	4b39      	ldr	r3, [pc, #228]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3c:	4a38      	ldr	r2, [pc, #224]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80a1 	beq.w	8005b90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a4e:	4b34      	ldr	r3, [pc, #208]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d05c      	beq.n	8005b14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d141      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a62:	4b31      	ldr	r3, [pc, #196]	@ (8005b28 <HAL_RCC_OscConfig+0x478>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a68:	f7fc fb80 	bl	800216c <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a70:	f7fc fb7c 	bl	800216c <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e087      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a82:	4b27      	ldr	r3, [pc, #156]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69da      	ldr	r2, [r3, #28]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	061b      	lsls	r3, r3, #24
 8005ab2:	491b      	ldr	r1, [pc, #108]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b28 <HAL_RCC_OscConfig+0x478>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abe:	f7fc fb55 	bl	800216c <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac6:	f7fc fb51 	bl	800216c <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e05c      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad8:	4b11      	ldr	r3, [pc, #68]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x416>
 8005ae4:	e054      	b.n	8005b90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae6:	4b10      	ldr	r3, [pc, #64]	@ (8005b28 <HAL_RCC_OscConfig+0x478>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aec:	f7fc fb3e 	bl	800216c <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af4:	f7fc fb3a 	bl	800216c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e045      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b06:	4b06      	ldr	r3, [pc, #24]	@ (8005b20 <HAL_RCC_OscConfig+0x470>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCC_OscConfig+0x444>
 8005b12:	e03d      	b.n	8005b90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e038      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
 8005b20:	40023800 	.word	0x40023800
 8005b24:	40007000 	.word	0x40007000
 8005b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b9c <HAL_RCC_OscConfig+0x4ec>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d028      	beq.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d121      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d11a      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d111      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	3b01      	subs	r3, #1
 8005b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40023800 	.word	0x40023800

08005ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0cc      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb4:	4b68      	ldr	r3, [pc, #416]	@ (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d90c      	bls.n	8005bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	4b65      	ldr	r3, [pc, #404]	@ (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	4b63      	ldr	r3, [pc, #396]	@ (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0b8      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d020      	beq.n	8005c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d005      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bf4:	4b59      	ldr	r3, [pc, #356]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	4a58      	ldr	r2, [pc, #352]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005bfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c0c:	4b53      	ldr	r3, [pc, #332]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4a52      	ldr	r2, [pc, #328]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c18:	4b50      	ldr	r3, [pc, #320]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	494d      	ldr	r1, [pc, #308]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d044      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d107      	bne.n	8005c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c3e:	4b47      	ldr	r3, [pc, #284]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d119      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e07f      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d003      	beq.n	8005c5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e06f      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e067      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c7e:	4b37      	ldr	r3, [pc, #220]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f023 0203 	bic.w	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4934      	ldr	r1, [pc, #208]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c90:	f7fc fa6c 	bl	800216c <HAL_GetTick>
 8005c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c98:	f7fc fa68 	bl	800216c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e04f      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	4b2b      	ldr	r3, [pc, #172]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 020c 	and.w	r2, r3, #12
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d1eb      	bne.n	8005c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc0:	4b25      	ldr	r3, [pc, #148]	@ (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d20c      	bcs.n	8005ce8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cce:	4b22      	ldr	r3, [pc, #136]	@ (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd6:	4b20      	ldr	r3, [pc, #128]	@ (8005d58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d001      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e032      	b.n	8005d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d008      	beq.n	8005d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cf4:	4b19      	ldr	r3, [pc, #100]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4916      	ldr	r1, [pc, #88]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d12:	4b12      	ldr	r3, [pc, #72]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	490e      	ldr	r1, [pc, #56]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d26:	f000 f821 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	091b      	lsrs	r3, r3, #4
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	490a      	ldr	r1, [pc, #40]	@ (8005d60 <HAL_RCC_ClockConfig+0x1c0>)
 8005d38:	5ccb      	ldrb	r3, [r1, r3]
 8005d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3e:	4a09      	ldr	r2, [pc, #36]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d42:	4b09      	ldr	r3, [pc, #36]	@ (8005d68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fc f9cc 	bl	80020e4 <HAL_InitTick>

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40023c00 	.word	0x40023c00
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	0800d2a8 	.word	0x0800d2a8
 8005d64:	20000000 	.word	0x20000000
 8005d68:	20000004 	.word	0x20000004

08005d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d70:	b094      	sub	sp, #80	@ 0x50
 8005d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d84:	4b79      	ldr	r3, [pc, #484]	@ (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 030c 	and.w	r3, r3, #12
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d00d      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x40>
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	f200 80e1 	bhi.w	8005f58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <HAL_RCC_GetSysClockFreq+0x34>
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d9e:	e0db      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005da0:	4b73      	ldr	r3, [pc, #460]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8005da2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005da4:	e0db      	b.n	8005f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005da6:	4b73      	ldr	r3, [pc, #460]	@ (8005f74 <HAL_RCC_GetSysClockFreq+0x208>)
 8005da8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005daa:	e0d8      	b.n	8005f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dac:	4b6f      	ldr	r3, [pc, #444]	@ (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005db4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005db6:	4b6d      	ldr	r3, [pc, #436]	@ (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d063      	beq.n	8005e8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	099b      	lsrs	r3, r3, #6
 8005dc8:	2200      	movs	r2, #0
 8005dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005dde:	4622      	mov	r2, r4
 8005de0:	462b      	mov	r3, r5
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	f04f 0100 	mov.w	r1, #0
 8005dea:	0159      	lsls	r1, r3, #5
 8005dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df0:	0150      	lsls	r0, r2, #5
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4621      	mov	r1, r4
 8005df8:	1a51      	subs	r1, r2, r1
 8005dfa:	6139      	str	r1, [r7, #16]
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e10:	4659      	mov	r1, fp
 8005e12:	018b      	lsls	r3, r1, #6
 8005e14:	4651      	mov	r1, sl
 8005e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e1a:	4651      	mov	r1, sl
 8005e1c:	018a      	lsls	r2, r1, #6
 8005e1e:	4651      	mov	r1, sl
 8005e20:	ebb2 0801 	subs.w	r8, r2, r1
 8005e24:	4659      	mov	r1, fp
 8005e26:	eb63 0901 	sbc.w	r9, r3, r1
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e3e:	4690      	mov	r8, r2
 8005e40:	4699      	mov	r9, r3
 8005e42:	4623      	mov	r3, r4
 8005e44:	eb18 0303 	adds.w	r3, r8, r3
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	462b      	mov	r3, r5
 8005e4c:	eb49 0303 	adc.w	r3, r9, r3
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e5e:	4629      	mov	r1, r5
 8005e60:	024b      	lsls	r3, r1, #9
 8005e62:	4621      	mov	r1, r4
 8005e64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e68:	4621      	mov	r1, r4
 8005e6a:	024a      	lsls	r2, r1, #9
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e72:	2200      	movs	r2, #0
 8005e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e7c:	f7fa fde6 	bl	8000a4c <__aeabi_uldivmod>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4613      	mov	r3, r2
 8005e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e88:	e058      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e8a:	4b38      	ldr	r3, [pc, #224]	@ (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	099b      	lsrs	r3, r3, #6
 8005e90:	2200      	movs	r2, #0
 8005e92:	4618      	mov	r0, r3
 8005e94:	4611      	mov	r1, r2
 8005e96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e9a:	623b      	str	r3, [r7, #32]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	f04f 0000 	mov.w	r0, #0
 8005eac:	f04f 0100 	mov.w	r1, #0
 8005eb0:	0159      	lsls	r1, r3, #5
 8005eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eb6:	0150      	lsls	r0, r2, #5
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ed4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ed8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005edc:	ebb2 040a 	subs.w	r4, r2, sl
 8005ee0:	eb63 050b 	sbc.w	r5, r3, fp
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	00eb      	lsls	r3, r5, #3
 8005eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ef2:	00e2      	lsls	r2, r4, #3
 8005ef4:	4614      	mov	r4, r2
 8005ef6:	461d      	mov	r5, r3
 8005ef8:	4643      	mov	r3, r8
 8005efa:	18e3      	adds	r3, r4, r3
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	464b      	mov	r3, r9
 8005f00:	eb45 0303 	adc.w	r3, r5, r3
 8005f04:	607b      	str	r3, [r7, #4]
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f12:	4629      	mov	r1, r5
 8005f14:	028b      	lsls	r3, r1, #10
 8005f16:	4621      	mov	r1, r4
 8005f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	028a      	lsls	r2, r1, #10
 8005f20:	4610      	mov	r0, r2
 8005f22:	4619      	mov	r1, r3
 8005f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f26:	2200      	movs	r2, #0
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	61fa      	str	r2, [r7, #28]
 8005f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f30:	f7fa fd8c 	bl	8000a4c <__aeabi_uldivmod>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4613      	mov	r3, r2
 8005f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	3301      	adds	r3, #1
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005f4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f56:	e002      	b.n	8005f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f58:	4b05      	ldr	r3, [pc, #20]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3750      	adds	r7, #80	@ 0x50
 8005f64:	46bd      	mov	sp, r7
 8005f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	00f42400 	.word	0x00f42400
 8005f74:	007a1200 	.word	0x007a1200

08005f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f7c:	4b03      	ldr	r3, [pc, #12]	@ (8005f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000000 	.word	0x20000000

08005f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f94:	f7ff fff0 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	0a9b      	lsrs	r3, r3, #10
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	4903      	ldr	r1, [pc, #12]	@ (8005fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fa6:	5ccb      	ldrb	r3, [r1, r3]
 8005fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	0800d2b8 	.word	0x0800d2b8

08005fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fbc:	f7ff ffdc 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	4b05      	ldr	r3, [pc, #20]	@ (8005fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	0b5b      	lsrs	r3, r3, #13
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	4903      	ldr	r1, [pc, #12]	@ (8005fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fce:	5ccb      	ldrb	r3, [r1, r3]
 8005fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	0800d2b8 	.word	0x0800d2b8

08005fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006004:	2b00      	cmp	r3, #0
 8006006:	d035      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006008:	4b62      	ldr	r3, [pc, #392]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800600e:	f7fc f8ad 	bl	800216c <HAL_GetTick>
 8006012:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006014:	e008      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006016:	f7fc f8a9 	bl	800216c <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e0b0      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006028:	4b5b      	ldr	r3, [pc, #364]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f0      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	019a      	lsls	r2, r3, #6
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	071b      	lsls	r3, r3, #28
 8006040:	4955      	ldr	r1, [pc, #340]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006048:	4b52      	ldr	r3, [pc, #328]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800604e:	f7fc f88d 	bl	800216c <HAL_GetTick>
 8006052:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006054:	e008      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006056:	f7fc f889 	bl	800216c <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e090      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006068:	4b4b      	ldr	r3, [pc, #300]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f0      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8083 	beq.w	8006188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	4b44      	ldr	r3, [pc, #272]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	4a43      	ldr	r2, [pc, #268]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800608c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006090:	6413      	str	r3, [r2, #64]	@ 0x40
 8006092:	4b41      	ldr	r3, [pc, #260]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800609e:	4b3f      	ldr	r3, [pc, #252]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a3e      	ldr	r2, [pc, #248]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060aa:	f7fc f85f 	bl	800216c <HAL_GetTick>
 80060ae:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80060b0:	e008      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b2:	f7fc f85b 	bl	800216c <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d901      	bls.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e062      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80060c4:	4b35      	ldr	r3, [pc, #212]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0f0      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060d0:	4b31      	ldr	r3, [pc, #196]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060d8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d02f      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d028      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060ee:	4b2a      	ldr	r3, [pc, #168]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060f8:	4b29      	ldr	r3, [pc, #164]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060fe:	4b28      	ldr	r3, [pc, #160]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006104:	4a24      	ldr	r2, [pc, #144]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800610a:	4b23      	ldr	r3, [pc, #140]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b01      	cmp	r3, #1
 8006114:	d114      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006116:	f7fc f829 	bl	800216c <HAL_GetTick>
 800611a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611c:	e00a      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611e:	f7fc f825 	bl	800216c <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612c:	4293      	cmp	r3, r2
 800612e:	d901      	bls.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e02a      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006134:	4b18      	ldr	r3, [pc, #96]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0ee      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800614c:	d10d      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800614e:	4b12      	ldr	r3, [pc, #72]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800615e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006162:	490d      	ldr	r1, [pc, #52]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006164:	4313      	orrs	r3, r2
 8006166:	608b      	str	r3, [r1, #8]
 8006168:	e005      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800616a:	4b0b      	ldr	r3, [pc, #44]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	4a0a      	ldr	r2, [pc, #40]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006170:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006174:	6093      	str	r3, [r2, #8]
 8006176:	4b08      	ldr	r3, [pc, #32]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006178:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006182:	4905      	ldr	r1, [pc, #20]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006184:	4313      	orrs	r3, r2
 8006186:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	42470068 	.word	0x42470068
 8006198:	40023800 	.word	0x40023800
 800619c:	40007000 	.word	0x40007000
 80061a0:	42470e40 	.word	0x42470e40

080061a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d13f      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80061c2:	4b24      	ldr	r3, [pc, #144]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d006      	beq.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061d8:	d12f      	bne.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80061da:	4b1f      	ldr	r3, [pc, #124]	@ (8006258 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80061dc:	617b      	str	r3, [r7, #20]
          break;
 80061de:	e02f      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80061e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061ec:	d108      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061ee:	4b19      	ldr	r3, [pc, #100]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061f6:	4a19      	ldr	r2, [pc, #100]	@ (800625c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	613b      	str	r3, [r7, #16]
 80061fe:	e007      	b.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006200:	4b14      	ldr	r3, [pc, #80]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006208:	4a15      	ldr	r2, [pc, #84]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800620a:	fbb2 f3f3 	udiv	r3, r2, r3
 800620e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006210:	4b10      	ldr	r3, [pc, #64]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006216:	099b      	lsrs	r3, r3, #6
 8006218:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006224:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006226:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800622a:	0f1b      	lsrs	r3, r3, #28
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	fbb2 f3f3 	udiv	r3, r2, r3
 8006236:	617b      	str	r3, [r7, #20]
          break;
 8006238:	e002      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
          break;
 800623e:	bf00      	nop
        }
      }
      break;
 8006240:	e000      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006242:	bf00      	nop
    }
  }
  return frequency;
 8006244:	697b      	ldr	r3, [r7, #20]
}
 8006246:	4618      	mov	r0, r3
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40023800 	.word	0x40023800
 8006258:	00bb8000 	.word	0x00bb8000
 800625c:	007a1200 	.word	0x007a1200
 8006260:	00f42400 	.word	0x00f42400

08006264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e07b      	b.n	800636e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627a:	2b00      	cmp	r3, #0
 800627c:	d108      	bne.n	8006290 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006286:	d009      	beq.n	800629c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	61da      	str	r2, [r3, #28]
 800628e:	e005      	b.n	800629c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fb fc6a 	bl	8001b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006320:	ea42 0103 	orr.w	r1, r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006328:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	0c1b      	lsrs	r3, r3, #16
 800633a:	f003 0104 	and.w	r1, r3, #4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006342:	f003 0210 	and.w	r2, r3, #16
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69da      	ldr	r2, [r3, #28]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800635c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e041      	b.n	800640c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d106      	bne.n	80063a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7fb fc3f 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2202      	movs	r2, #2
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f000 fe49 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e041      	b.n	80064aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7fb fc40 	bl	8001cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3304      	adds	r3, #4
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f000 fdfa 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <HAL_TIM_PWM_Start+0x24>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	bf14      	ite	ne
 80064d0:	2301      	movne	r3, #1
 80064d2:	2300      	moveq	r3, #0
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	e022      	b.n	800651e <HAL_TIM_PWM_Start+0x6a>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d109      	bne.n	80064f2 <HAL_TIM_PWM_Start+0x3e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	bf14      	ite	ne
 80064ea:	2301      	movne	r3, #1
 80064ec:	2300      	moveq	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	e015      	b.n	800651e <HAL_TIM_PWM_Start+0x6a>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d109      	bne.n	800650c <HAL_TIM_PWM_Start+0x58>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	e008      	b.n	800651e <HAL_TIM_PWM_Start+0x6a>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	bf14      	ite	ne
 8006518:	2301      	movne	r3, #1
 800651a:	2300      	moveq	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e07c      	b.n	8006620 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <HAL_TIM_PWM_Start+0x82>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006534:	e013      	b.n	800655e <HAL_TIM_PWM_Start+0xaa>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b04      	cmp	r3, #4
 800653a:	d104      	bne.n	8006546 <HAL_TIM_PWM_Start+0x92>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006544:	e00b      	b.n	800655e <HAL_TIM_PWM_Start+0xaa>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d104      	bne.n	8006556 <HAL_TIM_PWM_Start+0xa2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006554:	e003      	b.n	800655e <HAL_TIM_PWM_Start+0xaa>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2202      	movs	r2, #2
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2201      	movs	r2, #1
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f001 f990 	bl	800788c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a2d      	ldr	r2, [pc, #180]	@ (8006628 <HAL_TIM_PWM_Start+0x174>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d004      	beq.n	8006580 <HAL_TIM_PWM_Start+0xcc>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a2c      	ldr	r2, [pc, #176]	@ (800662c <HAL_TIM_PWM_Start+0x178>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d101      	bne.n	8006584 <HAL_TIM_PWM_Start+0xd0>
 8006580:	2301      	movs	r3, #1
 8006582:	e000      	b.n	8006586 <HAL_TIM_PWM_Start+0xd2>
 8006584:	2300      	movs	r3, #0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d007      	beq.n	800659a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006598:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a22      	ldr	r2, [pc, #136]	@ (8006628 <HAL_TIM_PWM_Start+0x174>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d022      	beq.n	80065ea <HAL_TIM_PWM_Start+0x136>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ac:	d01d      	beq.n	80065ea <HAL_TIM_PWM_Start+0x136>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006630 <HAL_TIM_PWM_Start+0x17c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d018      	beq.n	80065ea <HAL_TIM_PWM_Start+0x136>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006634 <HAL_TIM_PWM_Start+0x180>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <HAL_TIM_PWM_Start+0x136>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006638 <HAL_TIM_PWM_Start+0x184>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00e      	beq.n	80065ea <HAL_TIM_PWM_Start+0x136>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a16      	ldr	r2, [pc, #88]	@ (800662c <HAL_TIM_PWM_Start+0x178>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d009      	beq.n	80065ea <HAL_TIM_PWM_Start+0x136>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a18      	ldr	r2, [pc, #96]	@ (800663c <HAL_TIM_PWM_Start+0x188>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d004      	beq.n	80065ea <HAL_TIM_PWM_Start+0x136>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a16      	ldr	r2, [pc, #88]	@ (8006640 <HAL_TIM_PWM_Start+0x18c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d111      	bne.n	800660e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b06      	cmp	r3, #6
 80065fa:	d010      	beq.n	800661e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660c:	e007      	b.n	800661e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0201 	orr.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40010000 	.word	0x40010000
 800662c:	40010400 	.word	0x40010400
 8006630:	40000400 	.word	0x40000400
 8006634:	40000800 	.word	0x40000800
 8006638:	40000c00 	.word	0x40000c00
 800663c:	40014000 	.word	0x40014000
 8006640:	40001800 	.word	0x40001800

08006644 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e041      	b.n	80066da <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f839 	bl	80066e2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3304      	adds	r3, #4
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f000 fce2 	bl	800704c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <HAL_TIM_IC_Start_IT+0x1e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006712:	b2db      	uxtb	r3, r3
 8006714:	e013      	b.n	800673e <HAL_TIM_IC_Start_IT+0x46>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b04      	cmp	r3, #4
 800671a:	d104      	bne.n	8006726 <HAL_TIM_IC_Start_IT+0x2e>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006722:	b2db      	uxtb	r3, r3
 8006724:	e00b      	b.n	800673e <HAL_TIM_IC_Start_IT+0x46>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b08      	cmp	r3, #8
 800672a:	d104      	bne.n	8006736 <HAL_TIM_IC_Start_IT+0x3e>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006732:	b2db      	uxtb	r3, r3
 8006734:	e003      	b.n	800673e <HAL_TIM_IC_Start_IT+0x46>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673c:	b2db      	uxtb	r3, r3
 800673e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d104      	bne.n	8006750 <HAL_TIM_IC_Start_IT+0x58>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800674c:	b2db      	uxtb	r3, r3
 800674e:	e013      	b.n	8006778 <HAL_TIM_IC_Start_IT+0x80>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b04      	cmp	r3, #4
 8006754:	d104      	bne.n	8006760 <HAL_TIM_IC_Start_IT+0x68>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800675c:	b2db      	uxtb	r3, r3
 800675e:	e00b      	b.n	8006778 <HAL_TIM_IC_Start_IT+0x80>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b08      	cmp	r3, #8
 8006764:	d104      	bne.n	8006770 <HAL_TIM_IC_Start_IT+0x78>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800676c:	b2db      	uxtb	r3, r3
 800676e:	e003      	b.n	8006778 <HAL_TIM_IC_Start_IT+0x80>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006776:	b2db      	uxtb	r3, r3
 8006778:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800677a:	7bbb      	ldrb	r3, [r7, #14]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d102      	bne.n	8006786 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006780:	7b7b      	ldrb	r3, [r7, #13]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d001      	beq.n	800678a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e0cc      	b.n	8006924 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d104      	bne.n	800679a <HAL_TIM_IC_Start_IT+0xa2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006798:	e013      	b.n	80067c2 <HAL_TIM_IC_Start_IT+0xca>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b04      	cmp	r3, #4
 800679e:	d104      	bne.n	80067aa <HAL_TIM_IC_Start_IT+0xb2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067a8:	e00b      	b.n	80067c2 <HAL_TIM_IC_Start_IT+0xca>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d104      	bne.n	80067ba <HAL_TIM_IC_Start_IT+0xc2>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067b8:	e003      	b.n	80067c2 <HAL_TIM_IC_Start_IT+0xca>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2202      	movs	r2, #2
 80067be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <HAL_TIM_IC_Start_IT+0xda>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067d0:	e013      	b.n	80067fa <HAL_TIM_IC_Start_IT+0x102>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d104      	bne.n	80067e2 <HAL_TIM_IC_Start_IT+0xea>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067e0:	e00b      	b.n	80067fa <HAL_TIM_IC_Start_IT+0x102>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d104      	bne.n	80067f2 <HAL_TIM_IC_Start_IT+0xfa>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067f0:	e003      	b.n	80067fa <HAL_TIM_IC_Start_IT+0x102>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b0c      	cmp	r3, #12
 80067fe:	d841      	bhi.n	8006884 <HAL_TIM_IC_Start_IT+0x18c>
 8006800:	a201      	add	r2, pc, #4	@ (adr r2, 8006808 <HAL_TIM_IC_Start_IT+0x110>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	0800683d 	.word	0x0800683d
 800680c:	08006885 	.word	0x08006885
 8006810:	08006885 	.word	0x08006885
 8006814:	08006885 	.word	0x08006885
 8006818:	0800684f 	.word	0x0800684f
 800681c:	08006885 	.word	0x08006885
 8006820:	08006885 	.word	0x08006885
 8006824:	08006885 	.word	0x08006885
 8006828:	08006861 	.word	0x08006861
 800682c:	08006885 	.word	0x08006885
 8006830:	08006885 	.word	0x08006885
 8006834:	08006885 	.word	0x08006885
 8006838:	08006873 	.word	0x08006873
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0202 	orr.w	r2, r2, #2
 800684a:	60da      	str	r2, [r3, #12]
      break;
 800684c:	e01d      	b.n	800688a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0204 	orr.w	r2, r2, #4
 800685c:	60da      	str	r2, [r3, #12]
      break;
 800685e:	e014      	b.n	800688a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	60da      	str	r2, [r3, #12]
      break;
 8006870:	e00b      	b.n	800688a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68da      	ldr	r2, [r3, #12]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0210 	orr.w	r2, r2, #16
 8006880:	60da      	str	r2, [r3, #12]
      break;
 8006882:	e002      	b.n	800688a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
      break;
 8006888:	bf00      	nop
  }

  if (status == HAL_OK)
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d148      	bne.n	8006922 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2201      	movs	r2, #1
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f000 fff7 	bl	800788c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a22      	ldr	r2, [pc, #136]	@ (800692c <HAL_TIM_IC_Start_IT+0x234>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_TIM_IC_Start_IT+0x1f6>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b0:	d01d      	beq.n	80068ee <HAL_TIM_IC_Start_IT+0x1f6>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006930 <HAL_TIM_IC_Start_IT+0x238>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_TIM_IC_Start_IT+0x1f6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006934 <HAL_TIM_IC_Start_IT+0x23c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_TIM_IC_Start_IT+0x1f6>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006938 <HAL_TIM_IC_Start_IT+0x240>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_TIM_IC_Start_IT+0x1f6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a19      	ldr	r2, [pc, #100]	@ (800693c <HAL_TIM_IC_Start_IT+0x244>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_TIM_IC_Start_IT+0x1f6>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a18      	ldr	r2, [pc, #96]	@ (8006940 <HAL_TIM_IC_Start_IT+0x248>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIM_IC_Start_IT+0x1f6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a16      	ldr	r2, [pc, #88]	@ (8006944 <HAL_TIM_IC_Start_IT+0x24c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d111      	bne.n	8006912 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b06      	cmp	r3, #6
 80068fe:	d010      	beq.n	8006922 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006910:	e007      	b.n	8006922 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0201 	orr.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	40010000 	.word	0x40010000
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800
 8006938:	40000c00 	.word	0x40000c00
 800693c:	40010400 	.word	0x40010400
 8006940:	40014000 	.word	0x40014000
 8006944:	40001800 	.word	0x40001800

08006948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d020      	beq.n	80069ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01b      	beq.n	80069ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0202 	mvn.w	r2, #2
 800697c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fa fdd4 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 8006998:	e005      	b.n	80069a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fb38 	bl	8007010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fb3f 	bl	8007024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d020      	beq.n	80069f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01b      	beq.n	80069f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0204 	mvn.w	r2, #4
 80069c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7fa fdae 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 80069e4:	e005      	b.n	80069f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fb12 	bl	8007010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fb19 	bl	8007024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d020      	beq.n	8006a44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01b      	beq.n	8006a44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0208 	mvn.w	r2, #8
 8006a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2204      	movs	r2, #4
 8006a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fa fd88 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 8006a30:	e005      	b.n	8006a3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 faec 	bl	8007010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 faf3 	bl	8007024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d020      	beq.n	8006a90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01b      	beq.n	8006a90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0210 	mvn.w	r2, #16
 8006a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2208      	movs	r2, #8
 8006a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fa fd62 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 8006a7c:	e005      	b.n	8006a8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fac6 	bl	8007010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 facd 	bl	8007024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00c      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d007      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f06f 0201 	mvn.w	r2, #1
 8006aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 faa4 	bl	8006ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00c      	beq.n	8006ad8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d007      	beq.n	8006ad8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 ff86 	bl	80079e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00c      	beq.n	8006afc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa9e 	bl	8007038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00c      	beq.n	8006b20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0220 	mvn.w	r2, #32
 8006b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 ff58 	bl	80079d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006b42:	2302      	movs	r3, #2
 8006b44:	e088      	b.n	8006c58 <HAL_TIM_IC_ConfigChannel+0x130>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d11b      	bne.n	8006b8c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006b64:	f000 fcce 	bl	8007504 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 020c 	bic.w	r2, r2, #12
 8006b76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6999      	ldr	r1, [r3, #24]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	619a      	str	r2, [r3, #24]
 8006b8a:	e060      	b.n	8006c4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d11c      	bne.n	8006bcc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006ba2:	f000 fd52 	bl	800764a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006bb4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6999      	ldr	r1, [r3, #24]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	021a      	lsls	r2, r3, #8
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	619a      	str	r2, [r3, #24]
 8006bca:	e040      	b.n	8006c4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d11b      	bne.n	8006c0a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006be2:	f000 fd9f 	bl	8007724 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 020c 	bic.w	r2, r2, #12
 8006bf4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69d9      	ldr	r1, [r3, #28]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	61da      	str	r2, [r3, #28]
 8006c08:	e021      	b.n	8006c4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b0c      	cmp	r3, #12
 8006c0e:	d11c      	bne.n	8006c4a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006c20:	f000 fdbc 	bl	800779c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69da      	ldr	r2, [r3, #28]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006c32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69d9      	ldr	r1, [r3, #28]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	021a      	lsls	r2, r3, #8
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	61da      	str	r2, [r3, #28]
 8006c48:	e001      	b.n	8006c4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	e0ae      	b.n	8006ddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b0c      	cmp	r3, #12
 8006c8a:	f200 809f 	bhi.w	8006dcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cc9 	.word	0x08006cc9
 8006c98:	08006dcd 	.word	0x08006dcd
 8006c9c:	08006dcd 	.word	0x08006dcd
 8006ca0:	08006dcd 	.word	0x08006dcd
 8006ca4:	08006d09 	.word	0x08006d09
 8006ca8:	08006dcd 	.word	0x08006dcd
 8006cac:	08006dcd 	.word	0x08006dcd
 8006cb0:	08006dcd 	.word	0x08006dcd
 8006cb4:	08006d4b 	.word	0x08006d4b
 8006cb8:	08006dcd 	.word	0x08006dcd
 8006cbc:	08006dcd 	.word	0x08006dcd
 8006cc0:	08006dcd 	.word	0x08006dcd
 8006cc4:	08006d8b 	.word	0x08006d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fa68 	bl	80071a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699a      	ldr	r2, [r3, #24]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0208 	orr.w	r2, r2, #8
 8006ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699a      	ldr	r2, [r3, #24]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0204 	bic.w	r2, r2, #4
 8006cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6999      	ldr	r1, [r3, #24]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	691a      	ldr	r2, [r3, #16]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	619a      	str	r2, [r3, #24]
      break;
 8006d06:	e064      	b.n	8006dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68b9      	ldr	r1, [r7, #8]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fab8 	bl	8007284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6999      	ldr	r1, [r3, #24]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	021a      	lsls	r2, r3, #8
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	619a      	str	r2, [r3, #24]
      break;
 8006d48:	e043      	b.n	8006dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fb0d 	bl	8007370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0208 	orr.w	r2, r2, #8
 8006d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0204 	bic.w	r2, r2, #4
 8006d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69d9      	ldr	r1, [r3, #28]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	691a      	ldr	r2, [r3, #16]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	61da      	str	r2, [r3, #28]
      break;
 8006d88:	e023      	b.n	8006dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fb61 	bl	8007458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69d9      	ldr	r1, [r3, #28]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	021a      	lsls	r2, r3, #8
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	61da      	str	r2, [r3, #28]
      break;
 8006dca:	e002      	b.n	8006dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIM_ConfigClockSource+0x1c>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e0b4      	b.n	8006f6a <HAL_TIM_ConfigClockSource+0x186>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e38:	d03e      	beq.n	8006eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8006e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e3e:	f200 8087 	bhi.w	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e46:	f000 8086 	beq.w	8006f56 <HAL_TIM_ConfigClockSource+0x172>
 8006e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e4e:	d87f      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e50:	2b70      	cmp	r3, #112	@ 0x70
 8006e52:	d01a      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0xa6>
 8006e54:	2b70      	cmp	r3, #112	@ 0x70
 8006e56:	d87b      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e58:	2b60      	cmp	r3, #96	@ 0x60
 8006e5a:	d050      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0x11a>
 8006e5c:	2b60      	cmp	r3, #96	@ 0x60
 8006e5e:	d877      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e60:	2b50      	cmp	r3, #80	@ 0x50
 8006e62:	d03c      	beq.n	8006ede <HAL_TIM_ConfigClockSource+0xfa>
 8006e64:	2b50      	cmp	r3, #80	@ 0x50
 8006e66:	d873      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e68:	2b40      	cmp	r3, #64	@ 0x40
 8006e6a:	d058      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x13a>
 8006e6c:	2b40      	cmp	r3, #64	@ 0x40
 8006e6e:	d86f      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e70:	2b30      	cmp	r3, #48	@ 0x30
 8006e72:	d064      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e74:	2b30      	cmp	r3, #48	@ 0x30
 8006e76:	d86b      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d060      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	d867      	bhi.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d05c      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	d05a      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x15a>
 8006e88:	e062      	b.n	8006f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e9a:	f000 fcd7 	bl	800784c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	609a      	str	r2, [r3, #8]
      break;
 8006eb6:	e04f      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ec8:	f000 fcc0 	bl	800784c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eda:	609a      	str	r2, [r3, #8]
      break;
 8006edc:	e03c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eea:	461a      	mov	r2, r3
 8006eec:	f000 fb7e 	bl	80075ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2150      	movs	r1, #80	@ 0x50
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fc8d 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8006efc:	e02c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f000 fbda 	bl	80076c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2160      	movs	r1, #96	@ 0x60
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fc7d 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8006f1c:	e01c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f000 fb5e 	bl	80075ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2140      	movs	r1, #64	@ 0x40
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fc6d 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8006f3c:	e00c      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4619      	mov	r1, r3
 8006f48:	4610      	mov	r0, r2
 8006f4a:	f000 fc64 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8006f4e:	e003      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	73fb      	strb	r3, [r7, #15]
      break;
 8006f54:	e000      	b.n	8006f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b0c      	cmp	r3, #12
 8006f86:	d831      	bhi.n	8006fec <HAL_TIM_ReadCapturedValue+0x78>
 8006f88:	a201      	add	r2, pc, #4	@ (adr r2, 8006f90 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fc5 	.word	0x08006fc5
 8006f94:	08006fed 	.word	0x08006fed
 8006f98:	08006fed 	.word	0x08006fed
 8006f9c:	08006fed 	.word	0x08006fed
 8006fa0:	08006fcf 	.word	0x08006fcf
 8006fa4:	08006fed 	.word	0x08006fed
 8006fa8:	08006fed 	.word	0x08006fed
 8006fac:	08006fed 	.word	0x08006fed
 8006fb0:	08006fd9 	.word	0x08006fd9
 8006fb4:	08006fed 	.word	0x08006fed
 8006fb8:	08006fed 	.word	0x08006fed
 8006fbc:	08006fed 	.word	0x08006fed
 8006fc0:	08006fe3 	.word	0x08006fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fca:	60fb      	str	r3, [r7, #12]

      break;
 8006fcc:	e00f      	b.n	8006fee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd4:	60fb      	str	r3, [r7, #12]

      break;
 8006fd6:	e00a      	b.n	8006fee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fde:	60fb      	str	r3, [r7, #12]

      break;
 8006fe0:	e005      	b.n	8006fee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe8:	60fb      	str	r3, [r7, #12]

      break;
 8006fea:	e000      	b.n	8006fee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006fec:	bf00      	nop
  }

  return tmpreg;
 8006fee:	68fb      	ldr	r3, [r7, #12]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a46      	ldr	r2, [pc, #280]	@ (8007178 <TIM_Base_SetConfig+0x12c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d013      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800706a:	d00f      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a43      	ldr	r2, [pc, #268]	@ (800717c <TIM_Base_SetConfig+0x130>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00b      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a42      	ldr	r2, [pc, #264]	@ (8007180 <TIM_Base_SetConfig+0x134>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d007      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a41      	ldr	r2, [pc, #260]	@ (8007184 <TIM_Base_SetConfig+0x138>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a40      	ldr	r2, [pc, #256]	@ (8007188 <TIM_Base_SetConfig+0x13c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d108      	bne.n	800709e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a35      	ldr	r2, [pc, #212]	@ (8007178 <TIM_Base_SetConfig+0x12c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d02b      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ac:	d027      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a32      	ldr	r2, [pc, #200]	@ (800717c <TIM_Base_SetConfig+0x130>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d023      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a31      	ldr	r2, [pc, #196]	@ (8007180 <TIM_Base_SetConfig+0x134>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d01f      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a30      	ldr	r2, [pc, #192]	@ (8007184 <TIM_Base_SetConfig+0x138>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d01b      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a2f      	ldr	r2, [pc, #188]	@ (8007188 <TIM_Base_SetConfig+0x13c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d017      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a2e      	ldr	r2, [pc, #184]	@ (800718c <TIM_Base_SetConfig+0x140>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d013      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a2d      	ldr	r2, [pc, #180]	@ (8007190 <TIM_Base_SetConfig+0x144>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00f      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a2c      	ldr	r2, [pc, #176]	@ (8007194 <TIM_Base_SetConfig+0x148>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00b      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a2b      	ldr	r2, [pc, #172]	@ (8007198 <TIM_Base_SetConfig+0x14c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d007      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a2a      	ldr	r2, [pc, #168]	@ (800719c <TIM_Base_SetConfig+0x150>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a29      	ldr	r2, [pc, #164]	@ (80071a0 <TIM_Base_SetConfig+0x154>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d108      	bne.n	8007110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a10      	ldr	r2, [pc, #64]	@ (8007178 <TIM_Base_SetConfig+0x12c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_Base_SetConfig+0xf8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a12      	ldr	r2, [pc, #72]	@ (8007188 <TIM_Base_SetConfig+0x13c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d103      	bne.n	800714c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b01      	cmp	r3, #1
 800715c:	d105      	bne.n	800716a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f023 0201 	bic.w	r2, r3, #1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	611a      	str	r2, [r3, #16]
  }
}
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40010000 	.word	0x40010000
 800717c:	40000400 	.word	0x40000400
 8007180:	40000800 	.word	0x40000800
 8007184:	40000c00 	.word	0x40000c00
 8007188:	40010400 	.word	0x40010400
 800718c:	40014000 	.word	0x40014000
 8007190:	40014400 	.word	0x40014400
 8007194:	40014800 	.word	0x40014800
 8007198:	40001800 	.word	0x40001800
 800719c:	40001c00 	.word	0x40001c00
 80071a0:	40002000 	.word	0x40002000

080071a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	f023 0201 	bic.w	r2, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f023 0302 	bic.w	r3, r3, #2
 80071ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a20      	ldr	r2, [pc, #128]	@ (800727c <TIM_OC1_SetConfig+0xd8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d003      	beq.n	8007208 <TIM_OC1_SetConfig+0x64>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a1f      	ldr	r2, [pc, #124]	@ (8007280 <TIM_OC1_SetConfig+0xdc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d10c      	bne.n	8007222 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f023 0308 	bic.w	r3, r3, #8
 800720e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f023 0304 	bic.w	r3, r3, #4
 8007220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a15      	ldr	r2, [pc, #84]	@ (800727c <TIM_OC1_SetConfig+0xd8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d003      	beq.n	8007232 <TIM_OC1_SetConfig+0x8e>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a14      	ldr	r2, [pc, #80]	@ (8007280 <TIM_OC1_SetConfig+0xdc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d111      	bne.n	8007256 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	621a      	str	r2, [r3, #32]
}
 8007270:	bf00      	nop
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	40010000 	.word	0x40010000
 8007280:	40010400 	.word	0x40010400

08007284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	f023 0210 	bic.w	r2, r3, #16
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f023 0320 	bic.w	r3, r3, #32
 80072ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a22      	ldr	r2, [pc, #136]	@ (8007368 <TIM_OC2_SetConfig+0xe4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d003      	beq.n	80072ec <TIM_OC2_SetConfig+0x68>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a21      	ldr	r2, [pc, #132]	@ (800736c <TIM_OC2_SetConfig+0xe8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d10d      	bne.n	8007308 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007306:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a17      	ldr	r2, [pc, #92]	@ (8007368 <TIM_OC2_SetConfig+0xe4>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d003      	beq.n	8007318 <TIM_OC2_SetConfig+0x94>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a16      	ldr	r2, [pc, #88]	@ (800736c <TIM_OC2_SetConfig+0xe8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d113      	bne.n	8007340 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800731e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40010000 	.word	0x40010000
 800736c:	40010400 	.word	0x40010400

08007370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800739e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0303 	bic.w	r3, r3, #3
 80073a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	021b      	lsls	r3, r3, #8
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a21      	ldr	r2, [pc, #132]	@ (8007450 <TIM_OC3_SetConfig+0xe0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d003      	beq.n	80073d6 <TIM_OC3_SetConfig+0x66>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a20      	ldr	r2, [pc, #128]	@ (8007454 <TIM_OC3_SetConfig+0xe4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d10d      	bne.n	80073f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a16      	ldr	r2, [pc, #88]	@ (8007450 <TIM_OC3_SetConfig+0xe0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d003      	beq.n	8007402 <TIM_OC3_SetConfig+0x92>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a15      	ldr	r2, [pc, #84]	@ (8007454 <TIM_OC3_SetConfig+0xe4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d113      	bne.n	800742a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4313      	orrs	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	011b      	lsls	r3, r3, #4
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4313      	orrs	r3, r2
 8007428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	621a      	str	r2, [r3, #32]
}
 8007444:	bf00      	nop
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	40010000 	.word	0x40010000
 8007454:	40010400 	.word	0x40010400

08007458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800748e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	4313      	orrs	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	031b      	lsls	r3, r3, #12
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a12      	ldr	r2, [pc, #72]	@ (80074fc <TIM_OC4_SetConfig+0xa4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d003      	beq.n	80074c0 <TIM_OC4_SetConfig+0x68>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a11      	ldr	r2, [pc, #68]	@ (8007500 <TIM_OC4_SetConfig+0xa8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d109      	bne.n	80074d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	019b      	lsls	r3, r3, #6
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	621a      	str	r2, [r3, #32]
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40010000 	.word	0x40010000
 8007500:	40010400 	.word	0x40010400

08007504 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	f023 0201 	bic.w	r2, r3, #1
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4a28      	ldr	r2, [pc, #160]	@ (80075d0 <TIM_TI1_SetConfig+0xcc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d01b      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007538:	d017      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4a25      	ldr	r2, [pc, #148]	@ (80075d4 <TIM_TI1_SetConfig+0xd0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d013      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4a24      	ldr	r2, [pc, #144]	@ (80075d8 <TIM_TI1_SetConfig+0xd4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00f      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a23      	ldr	r2, [pc, #140]	@ (80075dc <TIM_TI1_SetConfig+0xd8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00b      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4a22      	ldr	r2, [pc, #136]	@ (80075e0 <TIM_TI1_SetConfig+0xdc>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d007      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a21      	ldr	r2, [pc, #132]	@ (80075e4 <TIM_TI1_SetConfig+0xe0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d003      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4a20      	ldr	r2, [pc, #128]	@ (80075e8 <TIM_TI1_SetConfig+0xe4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d101      	bne.n	800756e <TIM_TI1_SetConfig+0x6a>
 800756a:	2301      	movs	r3, #1
 800756c:	e000      	b.n	8007570 <TIM_TI1_SetConfig+0x6c>
 800756e:	2300      	movs	r3, #0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f023 0303 	bic.w	r3, r3, #3
 800757a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4313      	orrs	r3, r2
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	e003      	b.n	800758e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	b2db      	uxtb	r3, r3
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f023 030a 	bic.w	r3, r3, #10
 80075a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f003 030a 	and.w	r3, r3, #10
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	621a      	str	r2, [r3, #32]
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40010000 	.word	0x40010000
 80075d4:	40000400 	.word	0x40000400
 80075d8:	40000800 	.word	0x40000800
 80075dc:	40000c00 	.word	0x40000c00
 80075e0:	40010400 	.word	0x40010400
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40001800 	.word	0x40001800

080075ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	f023 0201 	bic.w	r2, r3, #1
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	011b      	lsls	r3, r3, #4
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f023 030a 	bic.w	r3, r3, #10
 8007628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	621a      	str	r2, [r3, #32]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800764a:	b480      	push	{r7}
 800764c:	b087      	sub	sp, #28
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
 8007656:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f023 0210 	bic.w	r2, r3, #16
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	021b      	lsls	r3, r3, #8
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	4313      	orrs	r3, r2
 8007680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	031b      	lsls	r3, r3, #12
 800768e:	b29b      	uxth	r3, r3
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4313      	orrs	r3, r2
 8007694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800769c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	621a      	str	r2, [r3, #32]
}
 80076b8:	bf00      	nop
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f023 0210 	bic.w	r2, r3, #16
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	031b      	lsls	r3, r3, #12
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007700:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	621a      	str	r2, [r3, #32]
}
 8007718:	bf00      	nop
 800771a:	371c      	adds	r7, #28
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f023 0303 	bic.w	r3, r3, #3
 8007750:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4313      	orrs	r3, r2
 8007758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007760:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	011b      	lsls	r3, r3, #4
 8007766:	b2db      	uxtb	r3, r3
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007774:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	621a      	str	r2, [r3, #32]
}
 8007790:	bf00      	nop
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	031b      	lsls	r3, r3, #12
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80077ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	031b      	lsls	r3, r3, #12
 80077f4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	621a      	str	r2, [r3, #32]
}
 800780a:	bf00      	nop
 800780c:	371c      	adds	r7, #28
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4313      	orrs	r3, r2
 8007834:	f043 0307 	orr.w	r3, r3, #7
 8007838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	609a      	str	r2, [r3, #8]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	021a      	lsls	r2, r3, #8
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	431a      	orrs	r2, r3
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4313      	orrs	r3, r2
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	609a      	str	r2, [r3, #8]
}
 8007880:	bf00      	nop
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	2201      	movs	r2, #1
 80078a0:	fa02 f303 	lsl.w	r3, r2, r3
 80078a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a1a      	ldr	r2, [r3, #32]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	43db      	mvns	r3, r3
 80078ae:	401a      	ands	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1a      	ldr	r2, [r3, #32]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	fa01 f303 	lsl.w	r3, r1, r3
 80078c4:	431a      	orrs	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	621a      	str	r2, [r3, #32]
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
	...

080078d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d101      	bne.n	80078f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078ec:	2302      	movs	r3, #2
 80078ee:	e05a      	b.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a21      	ldr	r2, [pc, #132]	@ (80079b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d022      	beq.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800793c:	d01d      	beq.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a1d      	ldr	r2, [pc, #116]	@ (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d018      	beq.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a1b      	ldr	r2, [pc, #108]	@ (80079bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d013      	beq.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a1a      	ldr	r2, [pc, #104]	@ (80079c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00e      	beq.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a18      	ldr	r2, [pc, #96]	@ (80079c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d009      	beq.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a17      	ldr	r2, [pc, #92]	@ (80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d004      	beq.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a15      	ldr	r2, [pc, #84]	@ (80079cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d10c      	bne.n	8007994 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	4313      	orrs	r3, r2
 800798a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40010000 	.word	0x40010000
 80079b8:	40000400 	.word	0x40000400
 80079bc:	40000800 	.word	0x40000800
 80079c0:	40000c00 	.word	0x40000c00
 80079c4:	40010400 	.word	0x40010400
 80079c8:	40014000 	.word	0x40014000
 80079cc:	40001800 	.word	0x40001800

080079d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e042      	b.n	8007a90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fa f9d2 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2224      	movs	r2, #36	@ 0x24
 8007a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fd69 	bl	8008514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	695a      	ldr	r2, [r3, #20]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	@ 0x28
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	603b      	str	r3, [r7, #0]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b20      	cmp	r3, #32
 8007ab6:	d175      	bne.n	8007ba4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <HAL_UART_Transmit+0x2c>
 8007abe:	88fb      	ldrh	r3, [r7, #6]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e06e      	b.n	8007ba6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2221      	movs	r2, #33	@ 0x21
 8007ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ad6:	f7fa fb49 	bl	800216c <HAL_GetTick>
 8007ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	88fa      	ldrh	r2, [r7, #6]
 8007ae0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	88fa      	ldrh	r2, [r7, #6]
 8007ae6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007af0:	d108      	bne.n	8007b04 <HAL_UART_Transmit+0x6c>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d104      	bne.n	8007b04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	61bb      	str	r3, [r7, #24]
 8007b02:	e003      	b.n	8007b0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b0c:	e02e      	b.n	8007b6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2200      	movs	r2, #0
 8007b16:	2180      	movs	r1, #128	@ 0x80
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 fb05 	bl	8008128 <UART_WaitOnFlagUntilTimeout>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e03a      	b.n	8007ba6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10b      	bne.n	8007b4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	3302      	adds	r3, #2
 8007b4a:	61bb      	str	r3, [r7, #24]
 8007b4c:	e007      	b.n	8007b5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	781a      	ldrb	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1cb      	bne.n	8007b0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2140      	movs	r1, #64	@ 0x40
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 fad1 	bl	8008128 <UART_WaitOnFlagUntilTimeout>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e006      	b.n	8007ba6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e000      	b.n	8007ba6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007ba4:	2302      	movs	r3, #2
  }
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3720      	adds	r7, #32
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b0ba      	sub	sp, #232	@ 0xe8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10f      	bne.n	8007c16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bfa:	f003 0320 	and.w	r3, r3, #32
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d009      	beq.n	8007c16 <HAL_UART_IRQHandler+0x66>
 8007c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fbc2 	bl	8008398 <UART_Receive_IT>
      return;
 8007c14:	e25b      	b.n	80080ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 80de 	beq.w	8007ddc <HAL_UART_IRQHandler+0x22c>
 8007c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d106      	bne.n	8007c3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 80d1 	beq.w	8007ddc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00b      	beq.n	8007c5e <HAL_UART_IRQHandler+0xae>
 8007c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d005      	beq.n	8007c5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c56:	f043 0201 	orr.w	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c62:	f003 0304 	and.w	r3, r3, #4
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00b      	beq.n	8007c82 <HAL_UART_IRQHandler+0xd2>
 8007c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c7a:	f043 0202 	orr.w	r2, r3, #2
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00b      	beq.n	8007ca6 <HAL_UART_IRQHandler+0xf6>
 8007c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c9e:	f043 0204 	orr.w	r2, r3, #4
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d011      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x126>
 8007cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d105      	bne.n	8007cca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cce:	f043 0208 	orr.w	r2, r3, #8
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 81f2 	beq.w	80080c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ce4:	f003 0320 	and.w	r3, r3, #32
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_UART_IRQHandler+0x14e>
 8007cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cf0:	f003 0320 	and.w	r3, r3, #32
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fb4d 	bl	8008398 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d08:	2b40      	cmp	r3, #64	@ 0x40
 8007d0a:	bf0c      	ite	eq
 8007d0c:	2301      	moveq	r3, #1
 8007d0e:	2300      	movne	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d1a:	f003 0308 	and.w	r3, r3, #8
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d103      	bne.n	8007d2a <HAL_UART_IRQHandler+0x17a>
 8007d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d04f      	beq.n	8007dca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa55 	bl	80081da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3a:	2b40      	cmp	r3, #64	@ 0x40
 8007d3c:	d141      	bne.n	8007dc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3314      	adds	r3, #20
 8007d44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3314      	adds	r3, #20
 8007d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1d9      	bne.n	8007d3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d013      	beq.n	8007dba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d96:	4a7e      	ldr	r2, [pc, #504]	@ (8007f90 <HAL_UART_IRQHandler+0x3e0>)
 8007d98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fa fb95 	bl	80024ce <HAL_DMA_Abort_IT>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d016      	beq.n	8007dd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007db4:	4610      	mov	r0, r2
 8007db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db8:	e00e      	b.n	8007dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f99e 	bl	80080fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc0:	e00a      	b.n	8007dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f99a 	bl	80080fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc8:	e006      	b.n	8007dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f996 	bl	80080fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007dd6:	e175      	b.n	80080c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd8:	bf00      	nop
    return;
 8007dda:	e173      	b.n	80080c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	f040 814f 	bne.w	8008084 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dea:	f003 0310 	and.w	r3, r3, #16
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 8148 	beq.w	8008084 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8141 	beq.w	8008084 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e02:	2300      	movs	r3, #0
 8007e04:	60bb      	str	r3, [r7, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	60bb      	str	r3, [r7, #8]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e22:	2b40      	cmp	r3, #64	@ 0x40
 8007e24:	f040 80b6 	bne.w	8007f94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 8145 	beq.w	80080c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e46:	429a      	cmp	r2, r3
 8007e48:	f080 813e 	bcs.w	80080c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e5e:	f000 8088 	beq.w	8007f72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	330c      	adds	r3, #12
 8007e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	330c      	adds	r3, #12
 8007e8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007e8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1d9      	bne.n	8007e62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3314      	adds	r3, #20
 8007eb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ebe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3314      	adds	r3, #20
 8007ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ed2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ed6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007eda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ee4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e1      	bne.n	8007eae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3314      	adds	r3, #20
 8007ef0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007efa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3314      	adds	r3, #20
 8007f0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e3      	bne.n	8007eea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	330c      	adds	r3, #12
 8007f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f3a:	e853 3f00 	ldrex	r3, [r3]
 8007f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f42:	f023 0310 	bic.w	r3, r3, #16
 8007f46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	330c      	adds	r3, #12
 8007f50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007f54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e3      	bne.n	8007f30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fa fa3e 	bl	80023ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2202      	movs	r2, #2
 8007f76:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f8c1 	bl	8008110 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f8e:	e09b      	b.n	80080c8 <HAL_UART_IRQHandler+0x518>
 8007f90:	080082a1 	.word	0x080082a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 808e 	beq.w	80080cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 8089 	beq.w	80080cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	330c      	adds	r3, #12
 8007fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	330c      	adds	r3, #12
 8007fda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007fde:	647a      	str	r2, [r7, #68]	@ 0x44
 8007fe0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fe4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e3      	bne.n	8007fba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3314      	adds	r3, #20
 8007ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	623b      	str	r3, [r7, #32]
   return(result);
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	f023 0301 	bic.w	r3, r3, #1
 8008008:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3314      	adds	r3, #20
 8008012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008016:	633a      	str	r2, [r7, #48]	@ 0x30
 8008018:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800801c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e3      	bne.n	8007ff2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2220      	movs	r2, #32
 800802e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	330c      	adds	r3, #12
 800803e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	60fb      	str	r3, [r7, #12]
   return(result);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0310 	bic.w	r3, r3, #16
 800804e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	330c      	adds	r3, #12
 8008058:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800805c:	61fa      	str	r2, [r7, #28]
 800805e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008060:	69b9      	ldr	r1, [r7, #24]
 8008062:	69fa      	ldr	r2, [r7, #28]
 8008064:	e841 2300 	strex	r3, r2, [r1]
 8008068:	617b      	str	r3, [r7, #20]
   return(result);
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1e3      	bne.n	8008038 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008076:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f847 	bl	8008110 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008082:	e023      	b.n	80080cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800808c:	2b00      	cmp	r3, #0
 800808e:	d009      	beq.n	80080a4 <HAL_UART_IRQHandler+0x4f4>
 8008090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f913 	bl	80082c8 <UART_Transmit_IT>
    return;
 80080a2:	e014      	b.n	80080ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00e      	beq.n	80080ce <HAL_UART_IRQHandler+0x51e>
 80080b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d008      	beq.n	80080ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f953 	bl	8008368 <UART_EndTransmit_IT>
    return;
 80080c2:	e004      	b.n	80080ce <HAL_UART_IRQHandler+0x51e>
    return;
 80080c4:	bf00      	nop
 80080c6:	e002      	b.n	80080ce <HAL_UART_IRQHandler+0x51e>
      return;
 80080c8:	bf00      	nop
 80080ca:	e000      	b.n	80080ce <HAL_UART_IRQHandler+0x51e>
      return;
 80080cc:	bf00      	nop
  }
}
 80080ce:	37e8      	adds	r7, #232	@ 0xe8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	4613      	mov	r3, r2
 8008136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008138:	e03b      	b.n	80081b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008140:	d037      	beq.n	80081b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008142:	f7fa f813 	bl	800216c <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	6a3a      	ldr	r2, [r7, #32]
 800814e:	429a      	cmp	r2, r3
 8008150:	d302      	bcc.n	8008158 <UART_WaitOnFlagUntilTimeout+0x30>
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e03a      	b.n	80081d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	d023      	beq.n	80081b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2b80      	cmp	r3, #128	@ 0x80
 800816e:	d020      	beq.n	80081b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b40      	cmp	r3, #64	@ 0x40
 8008174:	d01d      	beq.n	80081b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0308 	and.w	r3, r3, #8
 8008180:	2b08      	cmp	r3, #8
 8008182:	d116      	bne.n	80081b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008184:	2300      	movs	r3, #0
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 f81d 	bl	80081da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2208      	movs	r2, #8
 80081a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e00f      	b.n	80081d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4013      	ands	r3, r2
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	429a      	cmp	r2, r3
 80081c0:	bf0c      	ite	eq
 80081c2:	2301      	moveq	r3, #1
 80081c4:	2300      	movne	r3, #0
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d0b4      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081da:	b480      	push	{r7}
 80081dc:	b095      	sub	sp, #84	@ 0x54
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	330c      	adds	r3, #12
 80081e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	330c      	adds	r3, #12
 8008200:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008202:	643a      	str	r2, [r7, #64]	@ 0x40
 8008204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008206:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008208:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e5      	bne.n	80081e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3314      	adds	r3, #20
 800821c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	61fb      	str	r3, [r7, #28]
   return(result);
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	f023 0301 	bic.w	r3, r3, #1
 800822c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3314      	adds	r3, #20
 8008234:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008238:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800823c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e5      	bne.n	8008216 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824e:	2b01      	cmp	r3, #1
 8008250:	d119      	bne.n	8008286 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	330c      	adds	r3, #12
 8008258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	60bb      	str	r3, [r7, #8]
   return(result);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f023 0310 	bic.w	r3, r3, #16
 8008268:	647b      	str	r3, [r7, #68]	@ 0x44
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	330c      	adds	r3, #12
 8008270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008272:	61ba      	str	r2, [r7, #24]
 8008274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	6979      	ldr	r1, [r7, #20]
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	613b      	str	r3, [r7, #16]
   return(result);
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e5      	bne.n	8008252 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008294:	bf00      	nop
 8008296:	3754      	adds	r7, #84	@ 0x54
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7ff ff1e 	bl	80080fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082c0:	bf00      	nop
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b21      	cmp	r3, #33	@ 0x21
 80082da:	d13e      	bne.n	800835a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e4:	d114      	bne.n	8008310 <UART_Transmit_IT+0x48>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d110      	bne.n	8008310 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008302:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	1c9a      	adds	r2, r3, #2
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	621a      	str	r2, [r3, #32]
 800830e:	e008      	b.n	8008322 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	1c59      	adds	r1, r3, #1
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6211      	str	r1, [r2, #32]
 800831a:	781a      	ldrb	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008326:	b29b      	uxth	r3, r3
 8008328:	3b01      	subs	r3, #1
 800832a:	b29b      	uxth	r3, r3
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	4619      	mov	r1, r3
 8008330:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10f      	bne.n	8008356 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008344:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68da      	ldr	r2, [r3, #12]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008354:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	e000      	b.n	800835c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800835a:	2302      	movs	r3, #2
  }
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800837e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff fea3 	bl	80080d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08c      	sub	sp, #48	@ 0x30
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b22      	cmp	r3, #34	@ 0x22
 80083aa:	f040 80ae 	bne.w	800850a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b6:	d117      	bne.n	80083e8 <UART_Receive_IT+0x50>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d113      	bne.n	80083e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083c0:	2300      	movs	r3, #0
 80083c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	1c9a      	adds	r2, r3, #2
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80083e6:	e026      	b.n	8008436 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083fa:	d007      	beq.n	800840c <UART_Receive_IT+0x74>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10a      	bne.n	800841a <UART_Receive_IT+0x82>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d106      	bne.n	800841a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	b2da      	uxtb	r2, r3
 8008414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008416:	701a      	strb	r2, [r3, #0]
 8008418:	e008      	b.n	800842c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008426:	b2da      	uxtb	r2, r3
 8008428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800843a:	b29b      	uxth	r3, r3
 800843c:	3b01      	subs	r3, #1
 800843e:	b29b      	uxth	r3, r3
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	4619      	mov	r1, r3
 8008444:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008446:	2b00      	cmp	r3, #0
 8008448:	d15d      	bne.n	8008506 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0220 	bic.w	r2, r2, #32
 8008458:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008468:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	695a      	ldr	r2, [r3, #20]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0201 	bic.w	r2, r2, #1
 8008478:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848c:	2b01      	cmp	r3, #1
 800848e:	d135      	bne.n	80084fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	330c      	adds	r3, #12
 800849c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	613b      	str	r3, [r7, #16]
   return(result);
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f023 0310 	bic.w	r3, r3, #16
 80084ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	330c      	adds	r3, #12
 80084b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b6:	623a      	str	r2, [r7, #32]
 80084b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	69f9      	ldr	r1, [r7, #28]
 80084bc:	6a3a      	ldr	r2, [r7, #32]
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e5      	bne.n	8008496 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0310 	and.w	r3, r3, #16
 80084d4:	2b10      	cmp	r3, #16
 80084d6:	d10a      	bne.n	80084ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7ff fe0b 	bl	8008110 <HAL_UARTEx_RxEventCallback>
 80084fa:	e002      	b.n	8008502 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff fdf3 	bl	80080e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	e002      	b.n	800850c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	e000      	b.n	800850c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800850a:	2302      	movs	r3, #2
  }
}
 800850c:	4618      	mov	r0, r3
 800850e:	3730      	adds	r7, #48	@ 0x30
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008518:	b0c0      	sub	sp, #256	@ 0x100
 800851a:	af00      	add	r7, sp, #0
 800851c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800852c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008530:	68d9      	ldr	r1, [r3, #12]
 8008532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	ea40 0301 	orr.w	r3, r0, r1
 800853c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800853e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	431a      	orrs	r2, r3
 800854c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	431a      	orrs	r2, r3
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	4313      	orrs	r3, r2
 800855c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800856c:	f021 010c 	bic.w	r1, r1, #12
 8008570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800857a:	430b      	orrs	r3, r1
 800857c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800857e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800858a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800858e:	6999      	ldr	r1, [r3, #24]
 8008590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	ea40 0301 	orr.w	r3, r0, r1
 800859a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800859c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b8f      	ldr	r3, [pc, #572]	@ (80087e0 <UART_SetConfig+0x2cc>)
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d005      	beq.n	80085b4 <UART_SetConfig+0xa0>
 80085a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	4b8d      	ldr	r3, [pc, #564]	@ (80087e4 <UART_SetConfig+0x2d0>)
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d104      	bne.n	80085be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085b4:	f7fd fd00 	bl	8005fb8 <HAL_RCC_GetPCLK2Freq>
 80085b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80085bc:	e003      	b.n	80085c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085be:	f7fd fce7 	bl	8005f90 <HAL_RCC_GetPCLK1Freq>
 80085c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085d0:	f040 810c 	bne.w	80087ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085d8:	2200      	movs	r2, #0
 80085da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80085e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80085e6:	4622      	mov	r2, r4
 80085e8:	462b      	mov	r3, r5
 80085ea:	1891      	adds	r1, r2, r2
 80085ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80085ee:	415b      	adcs	r3, r3
 80085f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80085f6:	4621      	mov	r1, r4
 80085f8:	eb12 0801 	adds.w	r8, r2, r1
 80085fc:	4629      	mov	r1, r5
 80085fe:	eb43 0901 	adc.w	r9, r3, r1
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800860e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008616:	4690      	mov	r8, r2
 8008618:	4699      	mov	r9, r3
 800861a:	4623      	mov	r3, r4
 800861c:	eb18 0303 	adds.w	r3, r8, r3
 8008620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008624:	462b      	mov	r3, r5
 8008626:	eb49 0303 	adc.w	r3, r9, r3
 800862a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800862e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800863a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800863e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008642:	460b      	mov	r3, r1
 8008644:	18db      	adds	r3, r3, r3
 8008646:	653b      	str	r3, [r7, #80]	@ 0x50
 8008648:	4613      	mov	r3, r2
 800864a:	eb42 0303 	adc.w	r3, r2, r3
 800864e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008658:	f7f8 f9f8 	bl	8000a4c <__aeabi_uldivmod>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4b61      	ldr	r3, [pc, #388]	@ (80087e8 <UART_SetConfig+0x2d4>)
 8008662:	fba3 2302 	umull	r2, r3, r3, r2
 8008666:	095b      	lsrs	r3, r3, #5
 8008668:	011c      	lsls	r4, r3, #4
 800866a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800866e:	2200      	movs	r2, #0
 8008670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008674:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800867c:	4642      	mov	r2, r8
 800867e:	464b      	mov	r3, r9
 8008680:	1891      	adds	r1, r2, r2
 8008682:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008684:	415b      	adcs	r3, r3
 8008686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800868c:	4641      	mov	r1, r8
 800868e:	eb12 0a01 	adds.w	sl, r2, r1
 8008692:	4649      	mov	r1, r9
 8008694:	eb43 0b01 	adc.w	fp, r3, r1
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	f04f 0300 	mov.w	r3, #0
 80086a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ac:	4692      	mov	sl, r2
 80086ae:	469b      	mov	fp, r3
 80086b0:	4643      	mov	r3, r8
 80086b2:	eb1a 0303 	adds.w	r3, sl, r3
 80086b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086ba:	464b      	mov	r3, r9
 80086bc:	eb4b 0303 	adc.w	r3, fp, r3
 80086c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80086d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086d8:	460b      	mov	r3, r1
 80086da:	18db      	adds	r3, r3, r3
 80086dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80086de:	4613      	mov	r3, r2
 80086e0:	eb42 0303 	adc.w	r3, r2, r3
 80086e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80086e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80086ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80086ee:	f7f8 f9ad 	bl	8000a4c <__aeabi_uldivmod>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	4611      	mov	r1, r2
 80086f8:	4b3b      	ldr	r3, [pc, #236]	@ (80087e8 <UART_SetConfig+0x2d4>)
 80086fa:	fba3 2301 	umull	r2, r3, r3, r1
 80086fe:	095b      	lsrs	r3, r3, #5
 8008700:	2264      	movs	r2, #100	@ 0x64
 8008702:	fb02 f303 	mul.w	r3, r2, r3
 8008706:	1acb      	subs	r3, r1, r3
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800870e:	4b36      	ldr	r3, [pc, #216]	@ (80087e8 <UART_SetConfig+0x2d4>)
 8008710:	fba3 2302 	umull	r2, r3, r3, r2
 8008714:	095b      	lsrs	r3, r3, #5
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800871c:	441c      	add	r4, r3
 800871e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008722:	2200      	movs	r2, #0
 8008724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008728:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800872c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008730:	4642      	mov	r2, r8
 8008732:	464b      	mov	r3, r9
 8008734:	1891      	adds	r1, r2, r2
 8008736:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008738:	415b      	adcs	r3, r3
 800873a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800873c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008740:	4641      	mov	r1, r8
 8008742:	1851      	adds	r1, r2, r1
 8008744:	6339      	str	r1, [r7, #48]	@ 0x30
 8008746:	4649      	mov	r1, r9
 8008748:	414b      	adcs	r3, r1
 800874a:	637b      	str	r3, [r7, #52]	@ 0x34
 800874c:	f04f 0200 	mov.w	r2, #0
 8008750:	f04f 0300 	mov.w	r3, #0
 8008754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008758:	4659      	mov	r1, fp
 800875a:	00cb      	lsls	r3, r1, #3
 800875c:	4651      	mov	r1, sl
 800875e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008762:	4651      	mov	r1, sl
 8008764:	00ca      	lsls	r2, r1, #3
 8008766:	4610      	mov	r0, r2
 8008768:	4619      	mov	r1, r3
 800876a:	4603      	mov	r3, r0
 800876c:	4642      	mov	r2, r8
 800876e:	189b      	adds	r3, r3, r2
 8008770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008774:	464b      	mov	r3, r9
 8008776:	460a      	mov	r2, r1
 8008778:	eb42 0303 	adc.w	r3, r2, r3
 800877c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800878c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008794:	460b      	mov	r3, r1
 8008796:	18db      	adds	r3, r3, r3
 8008798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800879a:	4613      	mov	r3, r2
 800879c:	eb42 0303 	adc.w	r3, r2, r3
 80087a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80087a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80087aa:	f7f8 f94f 	bl	8000a4c <__aeabi_uldivmod>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4b0d      	ldr	r3, [pc, #52]	@ (80087e8 <UART_SetConfig+0x2d4>)
 80087b4:	fba3 1302 	umull	r1, r3, r3, r2
 80087b8:	095b      	lsrs	r3, r3, #5
 80087ba:	2164      	movs	r1, #100	@ 0x64
 80087bc:	fb01 f303 	mul.w	r3, r1, r3
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	3332      	adds	r3, #50	@ 0x32
 80087c6:	4a08      	ldr	r2, [pc, #32]	@ (80087e8 <UART_SetConfig+0x2d4>)
 80087c8:	fba2 2303 	umull	r2, r3, r2, r3
 80087cc:	095b      	lsrs	r3, r3, #5
 80087ce:	f003 0207 	and.w	r2, r3, #7
 80087d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4422      	add	r2, r4
 80087da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087dc:	e106      	b.n	80089ec <UART_SetConfig+0x4d8>
 80087de:	bf00      	nop
 80087e0:	40011000 	.word	0x40011000
 80087e4:	40011400 	.word	0x40011400
 80087e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80087fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80087fe:	4642      	mov	r2, r8
 8008800:	464b      	mov	r3, r9
 8008802:	1891      	adds	r1, r2, r2
 8008804:	6239      	str	r1, [r7, #32]
 8008806:	415b      	adcs	r3, r3
 8008808:	627b      	str	r3, [r7, #36]	@ 0x24
 800880a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800880e:	4641      	mov	r1, r8
 8008810:	1854      	adds	r4, r2, r1
 8008812:	4649      	mov	r1, r9
 8008814:	eb43 0501 	adc.w	r5, r3, r1
 8008818:	f04f 0200 	mov.w	r2, #0
 800881c:	f04f 0300 	mov.w	r3, #0
 8008820:	00eb      	lsls	r3, r5, #3
 8008822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008826:	00e2      	lsls	r2, r4, #3
 8008828:	4614      	mov	r4, r2
 800882a:	461d      	mov	r5, r3
 800882c:	4643      	mov	r3, r8
 800882e:	18e3      	adds	r3, r4, r3
 8008830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008834:	464b      	mov	r3, r9
 8008836:	eb45 0303 	adc.w	r3, r5, r3
 800883a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800883e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800884a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800884e:	f04f 0200 	mov.w	r2, #0
 8008852:	f04f 0300 	mov.w	r3, #0
 8008856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800885a:	4629      	mov	r1, r5
 800885c:	008b      	lsls	r3, r1, #2
 800885e:	4621      	mov	r1, r4
 8008860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008864:	4621      	mov	r1, r4
 8008866:	008a      	lsls	r2, r1, #2
 8008868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800886c:	f7f8 f8ee 	bl	8000a4c <__aeabi_uldivmod>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4b60      	ldr	r3, [pc, #384]	@ (80089f8 <UART_SetConfig+0x4e4>)
 8008876:	fba3 2302 	umull	r2, r3, r3, r2
 800887a:	095b      	lsrs	r3, r3, #5
 800887c:	011c      	lsls	r4, r3, #4
 800887e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008882:	2200      	movs	r2, #0
 8008884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008888:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800888c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008890:	4642      	mov	r2, r8
 8008892:	464b      	mov	r3, r9
 8008894:	1891      	adds	r1, r2, r2
 8008896:	61b9      	str	r1, [r7, #24]
 8008898:	415b      	adcs	r3, r3
 800889a:	61fb      	str	r3, [r7, #28]
 800889c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088a0:	4641      	mov	r1, r8
 80088a2:	1851      	adds	r1, r2, r1
 80088a4:	6139      	str	r1, [r7, #16]
 80088a6:	4649      	mov	r1, r9
 80088a8:	414b      	adcs	r3, r1
 80088aa:	617b      	str	r3, [r7, #20]
 80088ac:	f04f 0200 	mov.w	r2, #0
 80088b0:	f04f 0300 	mov.w	r3, #0
 80088b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088b8:	4659      	mov	r1, fp
 80088ba:	00cb      	lsls	r3, r1, #3
 80088bc:	4651      	mov	r1, sl
 80088be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088c2:	4651      	mov	r1, sl
 80088c4:	00ca      	lsls	r2, r1, #3
 80088c6:	4610      	mov	r0, r2
 80088c8:	4619      	mov	r1, r3
 80088ca:	4603      	mov	r3, r0
 80088cc:	4642      	mov	r2, r8
 80088ce:	189b      	adds	r3, r3, r2
 80088d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088d4:	464b      	mov	r3, r9
 80088d6:	460a      	mov	r2, r1
 80088d8:	eb42 0303 	adc.w	r3, r2, r3
 80088dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80088f8:	4649      	mov	r1, r9
 80088fa:	008b      	lsls	r3, r1, #2
 80088fc:	4641      	mov	r1, r8
 80088fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008902:	4641      	mov	r1, r8
 8008904:	008a      	lsls	r2, r1, #2
 8008906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800890a:	f7f8 f89f 	bl	8000a4c <__aeabi_uldivmod>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4611      	mov	r1, r2
 8008914:	4b38      	ldr	r3, [pc, #224]	@ (80089f8 <UART_SetConfig+0x4e4>)
 8008916:	fba3 2301 	umull	r2, r3, r3, r1
 800891a:	095b      	lsrs	r3, r3, #5
 800891c:	2264      	movs	r2, #100	@ 0x64
 800891e:	fb02 f303 	mul.w	r3, r2, r3
 8008922:	1acb      	subs	r3, r1, r3
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	3332      	adds	r3, #50	@ 0x32
 8008928:	4a33      	ldr	r2, [pc, #204]	@ (80089f8 <UART_SetConfig+0x4e4>)
 800892a:	fba2 2303 	umull	r2, r3, r2, r3
 800892e:	095b      	lsrs	r3, r3, #5
 8008930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008934:	441c      	add	r4, r3
 8008936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800893a:	2200      	movs	r2, #0
 800893c:	673b      	str	r3, [r7, #112]	@ 0x70
 800893e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008940:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008944:	4642      	mov	r2, r8
 8008946:	464b      	mov	r3, r9
 8008948:	1891      	adds	r1, r2, r2
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	415b      	adcs	r3, r3
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008954:	4641      	mov	r1, r8
 8008956:	1851      	adds	r1, r2, r1
 8008958:	6039      	str	r1, [r7, #0]
 800895a:	4649      	mov	r1, r9
 800895c:	414b      	adcs	r3, r1
 800895e:	607b      	str	r3, [r7, #4]
 8008960:	f04f 0200 	mov.w	r2, #0
 8008964:	f04f 0300 	mov.w	r3, #0
 8008968:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800896c:	4659      	mov	r1, fp
 800896e:	00cb      	lsls	r3, r1, #3
 8008970:	4651      	mov	r1, sl
 8008972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008976:	4651      	mov	r1, sl
 8008978:	00ca      	lsls	r2, r1, #3
 800897a:	4610      	mov	r0, r2
 800897c:	4619      	mov	r1, r3
 800897e:	4603      	mov	r3, r0
 8008980:	4642      	mov	r2, r8
 8008982:	189b      	adds	r3, r3, r2
 8008984:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008986:	464b      	mov	r3, r9
 8008988:	460a      	mov	r2, r1
 800898a:	eb42 0303 	adc.w	r3, r2, r3
 800898e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	663b      	str	r3, [r7, #96]	@ 0x60
 800899a:	667a      	str	r2, [r7, #100]	@ 0x64
 800899c:	f04f 0200 	mov.w	r2, #0
 80089a0:	f04f 0300 	mov.w	r3, #0
 80089a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80089a8:	4649      	mov	r1, r9
 80089aa:	008b      	lsls	r3, r1, #2
 80089ac:	4641      	mov	r1, r8
 80089ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089b2:	4641      	mov	r1, r8
 80089b4:	008a      	lsls	r2, r1, #2
 80089b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80089ba:	f7f8 f847 	bl	8000a4c <__aeabi_uldivmod>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4b0d      	ldr	r3, [pc, #52]	@ (80089f8 <UART_SetConfig+0x4e4>)
 80089c4:	fba3 1302 	umull	r1, r3, r3, r2
 80089c8:	095b      	lsrs	r3, r3, #5
 80089ca:	2164      	movs	r1, #100	@ 0x64
 80089cc:	fb01 f303 	mul.w	r3, r1, r3
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	3332      	adds	r3, #50	@ 0x32
 80089d6:	4a08      	ldr	r2, [pc, #32]	@ (80089f8 <UART_SetConfig+0x4e4>)
 80089d8:	fba2 2303 	umull	r2, r3, r2, r3
 80089dc:	095b      	lsrs	r3, r3, #5
 80089de:	f003 020f 	and.w	r2, r3, #15
 80089e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4422      	add	r2, r4
 80089ea:	609a      	str	r2, [r3, #8]
}
 80089ec:	bf00      	nop
 80089ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80089f2:	46bd      	mov	sp, r7
 80089f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089f8:	51eb851f 	.word	0x51eb851f

080089fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089fc:	b084      	sub	sp, #16
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	f107 001c 	add.w	r0, r7, #28
 8008a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d123      	bne.n	8008a5e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008a2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d105      	bne.n	8008a52 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f9dc 	bl	8008e10 <USB_CoreReset>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]
 8008a5c:	e01b      	b.n	8008a96 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f9d0 	bl	8008e10 <USB_CoreReset>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d106      	bne.n	8008a8a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	639a      	str	r2, [r3, #56]	@ 0x38
 8008a88:	e005      	b.n	8008a96 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a96:	7fbb      	ldrb	r3, [r7, #30]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d10b      	bne.n	8008ab4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f043 0206 	orr.w	r2, r3, #6
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f043 0220 	orr.w	r2, r3, #32
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ac0:	b004      	add	sp, #16
 8008ac2:	4770      	bx	lr

08008ac4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f043 0201 	orr.w	r2, r3, #1
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f023 0201 	bic.w	r2, r3, #1
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d115      	bne.n	8008b56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b36:	200a      	movs	r0, #10
 8008b38:	f7f9 fb24 	bl	8002184 <HAL_Delay>
      ms += 10U;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	330a      	adds	r3, #10
 8008b40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f956 	bl	8008df4 <USB_GetMode>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d01e      	beq.n	8008b8c <USB_SetCurrentMode+0x84>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2bc7      	cmp	r3, #199	@ 0xc7
 8008b52:	d9f0      	bls.n	8008b36 <USB_SetCurrentMode+0x2e>
 8008b54:	e01a      	b.n	8008b8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b56:	78fb      	ldrb	r3, [r7, #3]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d115      	bne.n	8008b88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b68:	200a      	movs	r0, #10
 8008b6a:	f7f9 fb0b 	bl	8002184 <HAL_Delay>
      ms += 10U;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	330a      	adds	r3, #10
 8008b72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f93d 	bl	8008df4 <USB_GetMode>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <USB_SetCurrentMode+0x84>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2bc7      	cmp	r3, #199	@ 0xc7
 8008b84:	d9f0      	bls.n	8008b68 <USB_SetCurrentMode+0x60>
 8008b86:	e001      	b.n	8008b8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e005      	b.n	8008b98 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008b90:	d101      	bne.n	8008b96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e000      	b.n	8008b98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bba:	d901      	bls.n	8008bc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e01b      	b.n	8008bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	daf2      	bge.n	8008bae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	019b      	lsls	r3, r3, #6
 8008bd0:	f043 0220 	orr.w	r2, r3, #32
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008be4:	d901      	bls.n	8008bea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e006      	b.n	8008bf8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	d0f0      	beq.n	8008bd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	3301      	adds	r3, #1
 8008c14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c1c:	d901      	bls.n	8008c22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e018      	b.n	8008c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	daf2      	bge.n	8008c10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2210      	movs	r2, #16
 8008c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3301      	adds	r3, #1
 8008c38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c40:	d901      	bls.n	8008c46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e006      	b.n	8008c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	f003 0310 	and.w	r3, r3, #16
 8008c4e:	2b10      	cmp	r3, #16
 8008c50:	d0f0      	beq.n	8008c34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b089      	sub	sp, #36	@ 0x24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	460b      	mov	r3, r1
 8008c70:	71fb      	strb	r3, [r7, #7]
 8008c72:	4613      	mov	r3, r2
 8008c74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d123      	bne.n	8008cce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c86:	88bb      	ldrh	r3, [r7, #4]
 8008c88:	3303      	adds	r3, #3
 8008c8a:	089b      	lsrs	r3, r3, #2
 8008c8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c8e:	2300      	movs	r3, #0
 8008c90:	61bb      	str	r3, [r7, #24]
 8008c92:	e018      	b.n	8008cc6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c94:	79fb      	ldrb	r3, [r7, #7]
 8008c96:	031a      	lsls	r2, r3, #12
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	3301      	adds	r3, #1
 8008cac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	61bb      	str	r3, [r7, #24]
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d3e2      	bcc.n	8008c94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3724      	adds	r7, #36	@ 0x24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b08b      	sub	sp, #44	@ 0x2c
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008cf2:	88fb      	ldrh	r3, [r7, #6]
 8008cf4:	089b      	lsrs	r3, r3, #2
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008cfa:	88fb      	ldrh	r3, [r7, #6]
 8008cfc:	f003 0303 	and.w	r3, r3, #3
 8008d00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d02:	2300      	movs	r3, #0
 8008d04:	623b      	str	r3, [r7, #32]
 8008d06:	e014      	b.n	8008d32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d12:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d16:	3301      	adds	r3, #1
 8008d18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d22:	3301      	adds	r3, #1
 8008d24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d28:	3301      	adds	r3, #1
 8008d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	623b      	str	r3, [r7, #32]
 8008d32:	6a3a      	ldr	r2, [r7, #32]
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d3e6      	bcc.n	8008d08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d3a:	8bfb      	ldrh	r3, [r7, #30]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d01e      	beq.n	8008d7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d40:	2300      	movs	r3, #0
 8008d42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f107 0310 	add.w	r3, r7, #16
 8008d50:	6812      	ldr	r2, [r2, #0]
 8008d52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d64:	701a      	strb	r2, [r3, #0]
      i++;
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	3301      	adds	r3, #1
 8008d70:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008d72:	8bfb      	ldrh	r3, [r7, #30]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d78:	8bfb      	ldrh	r3, [r7, #30]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1ea      	bne.n	8008d54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	372c      	adds	r7, #44	@ 0x2c
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	4013      	ands	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008da4:	68fb      	ldr	r3, [r7, #12]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008dc2:	78fb      	ldrb	r3, [r7, #3]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008dd2:	78fb      	ldrb	r3, [r7, #3]
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	4013      	ands	r3, r2
 8008de4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008de6:	68bb      	ldr	r3, [r7, #8]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	f003 0301 	and.w	r3, r3, #1
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e28:	d901      	bls.n	8008e2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e01b      	b.n	8008e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	daf2      	bge.n	8008e1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	f043 0201 	orr.w	r2, r3, #1
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e52:	d901      	bls.n	8008e58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e006      	b.n	8008e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d0f0      	beq.n	8008e46 <USB_CoreReset+0x36>

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e74:	b084      	sub	sp, #16
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b086      	sub	sp, #24
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e94:	461a      	mov	r2, r3
 8008e96:	2300      	movs	r3, #0
 8008e98:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eaa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d119      	bne.n	8008efe <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008eca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d10a      	bne.n	8008ee8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ee0:	f043 0304 	orr.w	r3, r3, #4
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	e014      	b.n	8008f12 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ef6:	f023 0304 	bic.w	r3, r3, #4
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	e009      	b.n	8008f12 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008f0c:	f023 0304 	bic.w	r3, r3, #4
 8008f10:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f12:	2110      	movs	r1, #16
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7ff fe43 	bl	8008ba0 <USB_FlushTxFifo>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff fe6d 	bl	8008c04 <USB_FlushRxFifo>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f34:	2300      	movs	r3, #0
 8008f36:	613b      	str	r3, [r7, #16]
 8008f38:	e015      	b.n	8008f66 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f46:	461a      	mov	r2, r3
 8008f48:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	3301      	adds	r3, #1
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d3e3      	bcc.n	8008f3a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f7e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a18      	ldr	r2, [pc, #96]	@ (8008fe4 <USB_HostInit+0x170>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d10b      	bne.n	8008fa0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f8e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a15      	ldr	r2, [pc, #84]	@ (8008fe8 <USB_HostInit+0x174>)
 8008f94:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a14      	ldr	r2, [pc, #80]	@ (8008fec <USB_HostInit+0x178>)
 8008f9a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008f9e:	e009      	b.n	8008fb4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2280      	movs	r2, #128	@ 0x80
 8008fa4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a11      	ldr	r2, [pc, #68]	@ (8008ff0 <USB_HostInit+0x17c>)
 8008faa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a11      	ldr	r2, [pc, #68]	@ (8008ff4 <USB_HostInit+0x180>)
 8008fb0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d105      	bne.n	8008fc8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	f043 0210 	orr.w	r2, r3, #16
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	699a      	ldr	r2, [r3, #24]
 8008fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff8 <USB_HostInit+0x184>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fe0:	b004      	add	sp, #16
 8008fe2:	4770      	bx	lr
 8008fe4:	40040000 	.word	0x40040000
 8008fe8:	01000200 	.word	0x01000200
 8008fec:	00e00300 	.word	0x00e00300
 8008ff0:	00600080 	.word	0x00600080
 8008ff4:	004000e0 	.word	0x004000e0
 8008ff8:	a3200008 	.word	0xa3200008

08008ffc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800901a:	f023 0303 	bic.w	r3, r3, #3
 800901e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	68f9      	ldr	r1, [r7, #12]
 8009030:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009034:	4313      	orrs	r3, r2
 8009036:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d107      	bne.n	800904e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009044:	461a      	mov	r2, r3
 8009046:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800904a:	6053      	str	r3, [r2, #4]
 800904c:	e00c      	b.n	8009068 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800904e:	78fb      	ldrb	r3, [r7, #3]
 8009050:	2b02      	cmp	r3, #2
 8009052:	d107      	bne.n	8009064 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800905a:	461a      	mov	r2, r3
 800905c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009060:	6053      	str	r3, [r2, #4]
 8009062:	e001      	b.n	8009068 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e000      	b.n	800906a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009096:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80090a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090a4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80090a6:	2064      	movs	r0, #100	@ 0x64
 80090a8:	f7f9 f86c 	bl	8002184 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80090b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80090ba:	200a      	movs	r0, #10
 80090bc:	f7f9 f862 	bl	8002184 <HAL_Delay>

  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b085      	sub	sp, #20
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	460b      	mov	r3, r1
 80090d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80090ee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d109      	bne.n	800910e <USB_DriveVbus+0x44>
 80090fa:	78fb      	ldrb	r3, [r7, #3]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d106      	bne.n	800910e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009108:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800910c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009118:	d109      	bne.n	800912e <USB_DriveVbus+0x64>
 800911a:	78fb      	ldrb	r3, [r7, #3]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d106      	bne.n	800912e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009128:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800912c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	0c5b      	lsrs	r3, r3, #17
 800915a:	f003 0303 	and.w	r3, r3, #3
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800916a:	b480      	push	{r7}
 800916c:	b085      	sub	sp, #20
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	b29b      	uxth	r3, r3
}
 8009180:	4618      	mov	r0, r3
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b088      	sub	sp, #32
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	4608      	mov	r0, r1
 8009196:	4611      	mov	r1, r2
 8009198:	461a      	mov	r2, r3
 800919a:	4603      	mov	r3, r0
 800919c:	70fb      	strb	r3, [r7, #3]
 800919e:	460b      	mov	r3, r1
 80091a0:	70bb      	strb	r3, [r7, #2]
 80091a2:	4613      	mov	r3, r2
 80091a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ba:	461a      	mov	r2, r3
 80091bc:	f04f 33ff 	mov.w	r3, #4294967295
 80091c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80091c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d87c      	bhi.n	80092c4 <USB_HC_Init+0x138>
 80091ca:	a201      	add	r2, pc, #4	@ (adr r2, 80091d0 <USB_HC_Init+0x44>)
 80091cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d0:	080091e1 	.word	0x080091e1
 80091d4:	08009287 	.word	0x08009287
 80091d8:	080091e1 	.word	0x080091e1
 80091dc:	08009249 	.word	0x08009249
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ec:	461a      	mov	r2, r3
 80091ee:	f240 439d 	movw	r3, #1181	@ 0x49d
 80091f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80091f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	da10      	bge.n	800921e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	4413      	add	r3, r2
 8009204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	440a      	add	r2, r1
 8009212:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800921a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800921c:	e055      	b.n	80092ca <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a6f      	ldr	r2, [pc, #444]	@ (80093e0 <USB_HC_Init+0x254>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d151      	bne.n	80092ca <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009226:	78fb      	ldrb	r3, [r7, #3]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	4413      	add	r3, r2
 800922e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	78fa      	ldrb	r2, [r7, #3]
 8009236:	0151      	lsls	r1, r2, #5
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	440a      	add	r2, r1
 800923c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009240:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009244:	60d3      	str	r3, [r2, #12]
      break;
 8009246:	e040      	b.n	80092ca <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	4413      	add	r3, r2
 8009250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009254:	461a      	mov	r2, r3
 8009256:	f240 639d 	movw	r3, #1693	@ 0x69d
 800925a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800925c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009260:	2b00      	cmp	r3, #0
 8009262:	da34      	bge.n	80092ce <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	4413      	add	r3, r2
 800926c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	0151      	lsls	r1, r2, #5
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	440a      	add	r2, r1
 800927a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800927e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009282:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009284:	e023      	b.n	80092ce <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	015a      	lsls	r2, r3, #5
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	4413      	add	r3, r2
 800928e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009292:	461a      	mov	r2, r3
 8009294:	f240 2325 	movw	r3, #549	@ 0x225
 8009298:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800929a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	da17      	bge.n	80092d2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092bc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80092c0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80092c2:	e006      	b.n	80092d2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	77fb      	strb	r3, [r7, #31]
      break;
 80092c8:	e004      	b.n	80092d4 <USB_HC_Init+0x148>
      break;
 80092ca:	bf00      	nop
 80092cc:	e002      	b.n	80092d4 <USB_HC_Init+0x148>
      break;
 80092ce:	bf00      	nop
 80092d0:	e000      	b.n	80092d4 <USB_HC_Init+0x148>
      break;
 80092d2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80092d4:	78fb      	ldrb	r3, [r7, #3]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092e0:	461a      	mov	r2, r3
 80092e2:	2300      	movs	r3, #0
 80092e4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80092e6:	78fb      	ldrb	r3, [r7, #3]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	78fa      	ldrb	r2, [r7, #3]
 80092f6:	0151      	lsls	r1, r2, #5
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	440a      	add	r2, r1
 80092fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800930c:	699a      	ldr	r2, [r3, #24]
 800930e:	78fb      	ldrb	r3, [r7, #3]
 8009310:	f003 030f 	and.w	r3, r3, #15
 8009314:	2101      	movs	r1, #1
 8009316:	fa01 f303 	lsl.w	r3, r1, r3
 800931a:	6939      	ldr	r1, [r7, #16]
 800931c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009320:	4313      	orrs	r3, r2
 8009322:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009330:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009334:	2b00      	cmp	r3, #0
 8009336:	da03      	bge.n	8009340 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009338:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800933c:	61bb      	str	r3, [r7, #24]
 800933e:	e001      	b.n	8009344 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff fef9 	bl	800913c <USB_GetHostSpeed>
 800934a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800934c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009350:	2b02      	cmp	r3, #2
 8009352:	d106      	bne.n	8009362 <USB_HC_Init+0x1d6>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2b02      	cmp	r3, #2
 8009358:	d003      	beq.n	8009362 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800935a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	e001      	b.n	8009366 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009366:	787b      	ldrb	r3, [r7, #1]
 8009368:	059b      	lsls	r3, r3, #22
 800936a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800936e:	78bb      	ldrb	r3, [r7, #2]
 8009370:	02db      	lsls	r3, r3, #11
 8009372:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009376:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009378:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800937c:	049b      	lsls	r3, r3, #18
 800937e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009382:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009384:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009386:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800938a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	431a      	orrs	r2, r3
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	0151      	lsls	r1, r2, #5
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	440a      	add	r2, r1
 800939c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80093a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80093a4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80093a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d003      	beq.n	80093b6 <USB_HC_Init+0x22a>
 80093ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d10f      	bne.n	80093d6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80093b6:	78fb      	ldrb	r3, [r7, #3]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	78fa      	ldrb	r2, [r7, #3]
 80093c6:	0151      	lsls	r1, r2, #5
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	440a      	add	r2, r1
 80093cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80093d4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80093d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3720      	adds	r7, #32
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40040000 	.word	0x40040000

080093e4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08c      	sub	sp, #48	@ 0x30
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	4613      	mov	r3, r2
 80093f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	785b      	ldrb	r3, [r3, #1]
 80093fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80093fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009400:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4a5d      	ldr	r2, [pc, #372]	@ (800957c <USB_HC_StartXfer+0x198>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d12f      	bne.n	800946a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d11c      	bne.n	800944a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	7c9b      	ldrb	r3, [r3, #18]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <USB_HC_StartXfer+0x3c>
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	7c9b      	ldrb	r3, [r3, #18]
 800941c:	2b02      	cmp	r3, #2
 800941e:	d124      	bne.n	800946a <USB_HC_StartXfer+0x86>
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	799b      	ldrb	r3, [r3, #6]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d120      	bne.n	800946a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	4413      	add	r3, r2
 8009430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	69fa      	ldr	r2, [r7, #28]
 8009438:	0151      	lsls	r1, r2, #5
 800943a:	6a3a      	ldr	r2, [r7, #32]
 800943c:	440a      	add	r2, r1
 800943e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009446:	60d3      	str	r3, [r2, #12]
 8009448:	e00f      	b.n	800946a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	791b      	ldrb	r3, [r3, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10b      	bne.n	800946a <USB_HC_StartXfer+0x86>
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	795b      	ldrb	r3, [r3, #5]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d107      	bne.n	800946a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	785b      	ldrb	r3, [r3, #1]
 800945e:	4619      	mov	r1, r3
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 fb6b 	bl	8009b3c <USB_DoPing>
        return HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	e232      	b.n	80098d0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	799b      	ldrb	r3, [r3, #6]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d158      	bne.n	8009524 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009472:	2301      	movs	r3, #1
 8009474:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	78db      	ldrb	r3, [r3, #3]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d007      	beq.n	800948e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800947e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	8a92      	ldrh	r2, [r2, #20]
 8009484:	fb03 f202 	mul.w	r2, r3, r2
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	61da      	str	r2, [r3, #28]
 800948c:	e07c      	b.n	8009588 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	7c9b      	ldrb	r3, [r3, #18]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d130      	bne.n	80094f8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	2bbc      	cmp	r3, #188	@ 0xbc
 800949c:	d918      	bls.n	80094d0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	8a9b      	ldrh	r3, [r3, #20]
 80094a2:	461a      	mov	r2, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	69da      	ldr	r2, [r3, #28]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d003      	beq.n	80094c0 <USB_HC_StartXfer+0xdc>
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d103      	bne.n	80094c8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2202      	movs	r2, #2
 80094c4:	60da      	str	r2, [r3, #12]
 80094c6:	e05f      	b.n	8009588 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2201      	movs	r2, #1
 80094cc:	60da      	str	r2, [r3, #12]
 80094ce:	e05b      	b.n	8009588 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	6a1a      	ldr	r2, [r3, #32]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d007      	beq.n	80094f0 <USB_HC_StartXfer+0x10c>
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d003      	beq.n	80094f0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2204      	movs	r2, #4
 80094ec:	60da      	str	r2, [r3, #12]
 80094ee:	e04b      	b.n	8009588 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	2203      	movs	r2, #3
 80094f4:	60da      	str	r2, [r3, #12]
 80094f6:	e047      	b.n	8009588 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d10d      	bne.n	800951a <USB_HC_StartXfer+0x136>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	8a92      	ldrh	r2, [r2, #20]
 8009506:	4293      	cmp	r3, r2
 8009508:	d907      	bls.n	800951a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800950a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	8a92      	ldrh	r2, [r2, #20]
 8009510:	fb03 f202 	mul.w	r2, r3, r2
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	61da      	str	r2, [r3, #28]
 8009518:	e036      	b.n	8009588 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	6a1a      	ldr	r2, [r3, #32]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	61da      	str	r2, [r3, #28]
 8009522:	e031      	b.n	8009588 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	6a1b      	ldr	r3, [r3, #32]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d018      	beq.n	800955e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	6a1b      	ldr	r3, [r3, #32]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	8a92      	ldrh	r2, [r2, #20]
 8009534:	4413      	add	r3, r2
 8009536:	3b01      	subs	r3, #1
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	8a92      	ldrh	r2, [r2, #20]
 800953c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009540:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009542:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009544:	8b7b      	ldrh	r3, [r7, #26]
 8009546:	429a      	cmp	r2, r3
 8009548:	d90b      	bls.n	8009562 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800954a:	8b7b      	ldrh	r3, [r7, #26]
 800954c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800954e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	8a92      	ldrh	r2, [r2, #20]
 8009554:	fb03 f202 	mul.w	r2, r3, r2
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	61da      	str	r2, [r3, #28]
 800955c:	e001      	b.n	8009562 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800955e:	2301      	movs	r3, #1
 8009560:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	78db      	ldrb	r3, [r3, #3]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800956a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	8a92      	ldrh	r2, [r2, #20]
 8009570:	fb03 f202 	mul.w	r2, r3, r2
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	61da      	str	r2, [r3, #28]
 8009578:	e006      	b.n	8009588 <USB_HC_StartXfer+0x1a4>
 800957a:	bf00      	nop
 800957c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	6a1a      	ldr	r2, [r3, #32]
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	69db      	ldr	r3, [r3, #28]
 800958c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009590:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009592:	04d9      	lsls	r1, r3, #19
 8009594:	4ba3      	ldr	r3, [pc, #652]	@ (8009824 <USB_HC_StartXfer+0x440>)
 8009596:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009598:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	7d9b      	ldrb	r3, [r3, #22]
 800959e:	075b      	lsls	r3, r3, #29
 80095a0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095a4:	69f9      	ldr	r1, [r7, #28]
 80095a6:	0148      	lsls	r0, r1, #5
 80095a8:	6a39      	ldr	r1, [r7, #32]
 80095aa:	4401      	add	r1, r0
 80095ac:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80095b0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095b2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d009      	beq.n	80095ce <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	6999      	ldr	r1, [r3, #24]
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095ca:	460a      	mov	r2, r1
 80095cc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	bf0c      	ite	eq
 80095de:	2301      	moveq	r3, #1
 80095e0:	2300      	movne	r3, #0
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	0151      	lsls	r1, r2, #5
 80095f8:	6a3a      	ldr	r2, [r7, #32]
 80095fa:	440a      	add	r2, r1
 80095fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009600:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009604:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	4413      	add	r3, r2
 800960e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	7e7b      	ldrb	r3, [r7, #25]
 8009616:	075b      	lsls	r3, r3, #29
 8009618:	69f9      	ldr	r1, [r7, #28]
 800961a:	0148      	lsls	r0, r1, #5
 800961c:	6a39      	ldr	r1, [r7, #32]
 800961e:	4401      	add	r1, r0
 8009620:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009624:	4313      	orrs	r3, r2
 8009626:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	799b      	ldrb	r3, [r3, #6]
 800962c:	2b01      	cmp	r3, #1
 800962e:	f040 80c3 	bne.w	80097b8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	7c5b      	ldrb	r3, [r3, #17]
 8009636:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800963c:	4313      	orrs	r3, r2
 800963e:	69fa      	ldr	r2, [r7, #28]
 8009640:	0151      	lsls	r1, r2, #5
 8009642:	6a3a      	ldr	r2, [r7, #32]
 8009644:	440a      	add	r2, r1
 8009646:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800964a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800964e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	4413      	add	r3, r2
 8009658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	0151      	lsls	r1, r2, #5
 8009662:	6a3a      	ldr	r2, [r7, #32]
 8009664:	440a      	add	r2, r1
 8009666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800966a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800966e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	79db      	ldrb	r3, [r3, #7]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d123      	bne.n	80096c0 <USB_HC_StartXfer+0x2dc>
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	78db      	ldrb	r3, [r3, #3]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d11f      	bne.n	80096c0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	4413      	add	r3, r2
 8009688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	0151      	lsls	r1, r2, #5
 8009692:	6a3a      	ldr	r2, [r7, #32]
 8009694:	440a      	add	r2, r1
 8009696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800969a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800969e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	69fa      	ldr	r2, [r7, #28]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	6a3a      	ldr	r2, [r7, #32]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096be:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	7c9b      	ldrb	r3, [r3, #18]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d003      	beq.n	80096d0 <USB_HC_StartXfer+0x2ec>
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	7c9b      	ldrb	r3, [r3, #18]
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d117      	bne.n	8009700 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d113      	bne.n	8009700 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	78db      	ldrb	r3, [r3, #3]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d10f      	bne.n	8009700 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	0151      	lsls	r1, r2, #5
 80096f2:	6a3a      	ldr	r2, [r7, #32]
 80096f4:	440a      	add	r2, r1
 80096f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096fe:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	7c9b      	ldrb	r3, [r3, #18]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d162      	bne.n	80097ce <USB_HC_StartXfer+0x3ea>
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	78db      	ldrb	r3, [r3, #3]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d15e      	bne.n	80097ce <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	3b01      	subs	r3, #1
 8009716:	2b03      	cmp	r3, #3
 8009718:	d858      	bhi.n	80097cc <USB_HC_StartXfer+0x3e8>
 800971a:	a201      	add	r2, pc, #4	@ (adr r2, 8009720 <USB_HC_StartXfer+0x33c>)
 800971c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009720:	08009731 	.word	0x08009731
 8009724:	08009753 	.word	0x08009753
 8009728:	08009775 	.word	0x08009775
 800972c:	08009797 	.word	0x08009797
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	4413      	add	r3, r2
 8009738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	0151      	lsls	r1, r2, #5
 8009742:	6a3a      	ldr	r2, [r7, #32]
 8009744:	440a      	add	r2, r1
 8009746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800974a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800974e:	6053      	str	r3, [r2, #4]
          break;
 8009750:	e03d      	b.n	80097ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	4413      	add	r3, r2
 800975a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	69fa      	ldr	r2, [r7, #28]
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	6a3a      	ldr	r2, [r7, #32]
 8009766:	440a      	add	r2, r1
 8009768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800976c:	f043 030e 	orr.w	r3, r3, #14
 8009770:	6053      	str	r3, [r2, #4]
          break;
 8009772:	e02c      	b.n	80097ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	4413      	add	r3, r2
 800977c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	69fa      	ldr	r2, [r7, #28]
 8009784:	0151      	lsls	r1, r2, #5
 8009786:	6a3a      	ldr	r2, [r7, #32]
 8009788:	440a      	add	r2, r1
 800978a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800978e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009792:	6053      	str	r3, [r2, #4]
          break;
 8009794:	e01b      	b.n	80097ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	4413      	add	r3, r2
 800979e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	69fa      	ldr	r2, [r7, #28]
 80097a6:	0151      	lsls	r1, r2, #5
 80097a8:	6a3a      	ldr	r2, [r7, #32]
 80097aa:	440a      	add	r2, r1
 80097ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80097b4:	6053      	str	r3, [r2, #4]
          break;
 80097b6:	e00a      	b.n	80097ce <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	015a      	lsls	r2, r3, #5
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	4413      	add	r3, r2
 80097c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097c4:	461a      	mov	r2, r3
 80097c6:	2300      	movs	r3, #0
 80097c8:	6053      	str	r3, [r2, #4]
 80097ca:	e000      	b.n	80097ce <USB_HC_StartXfer+0x3ea>
          break;
 80097cc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097e4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	78db      	ldrb	r3, [r3, #3]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d004      	beq.n	80097f8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097f4:	613b      	str	r3, [r7, #16]
 80097f6:	e003      	b.n	8009800 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80097fe:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009806:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	4413      	add	r3, r2
 8009810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009814:	461a      	mov	r2, r3
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800981a:	79fb      	ldrb	r3, [r7, #7]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d003      	beq.n	8009828 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	e055      	b.n	80098d0 <USB_HC_StartXfer+0x4ec>
 8009824:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	78db      	ldrb	r3, [r3, #3]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d14e      	bne.n	80098ce <USB_HC_StartXfer+0x4ea>
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d04a      	beq.n	80098ce <USB_HC_StartXfer+0x4ea>
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	79db      	ldrb	r3, [r3, #7]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d146      	bne.n	80098ce <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	7c9b      	ldrb	r3, [r3, #18]
 8009844:	2b03      	cmp	r3, #3
 8009846:	d831      	bhi.n	80098ac <USB_HC_StartXfer+0x4c8>
 8009848:	a201      	add	r2, pc, #4	@ (adr r2, 8009850 <USB_HC_StartXfer+0x46c>)
 800984a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984e:	bf00      	nop
 8009850:	08009861 	.word	0x08009861
 8009854:	08009885 	.word	0x08009885
 8009858:	08009861 	.word	0x08009861
 800985c:	08009885 	.word	0x08009885
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	6a1b      	ldr	r3, [r3, #32]
 8009864:	3303      	adds	r3, #3
 8009866:	089b      	lsrs	r3, r3, #2
 8009868:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800986a:	8afa      	ldrh	r2, [r7, #22]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009870:	b29b      	uxth	r3, r3
 8009872:	429a      	cmp	r2, r3
 8009874:	d91c      	bls.n	80098b0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	f043 0220 	orr.w	r2, r3, #32
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	619a      	str	r2, [r3, #24]
        }
        break;
 8009882:	e015      	b.n	80098b0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	3303      	adds	r3, #3
 800988a:	089b      	lsrs	r3, r3, #2
 800988c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800988e:	8afa      	ldrh	r2, [r7, #22]
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	b29b      	uxth	r3, r3
 800989a:	429a      	cmp	r2, r3
 800989c:	d90a      	bls.n	80098b4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80098aa:	e003      	b.n	80098b4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80098ac:	bf00      	nop
 80098ae:	e002      	b.n	80098b6 <USB_HC_StartXfer+0x4d2>
        break;
 80098b0:	bf00      	nop
 80098b2:	e000      	b.n	80098b6 <USB_HC_StartXfer+0x4d2>
        break;
 80098b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	6999      	ldr	r1, [r3, #24]
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	785a      	ldrb	r2, [r3, #1]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	2000      	movs	r0, #0
 80098c6:	9000      	str	r0, [sp, #0]
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7ff f9c9 	bl	8008c60 <USB_WritePacket>
  }

  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3728      	adds	r7, #40	@ 0x28
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	b29b      	uxth	r3, r3
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b089      	sub	sp, #36	@ 0x24
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800990a:	78fb      	ldrb	r3, [r7, #3]
 800990c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	4413      	add	r3, r2
 800991a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	0c9b      	lsrs	r3, r3, #18
 8009922:	f003 0303 	and.w	r3, r3, #3
 8009926:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	4413      	add	r3, r2
 8009930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	0fdb      	lsrs	r3, r3, #31
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	4413      	add	r3, r2
 8009946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	0fdb      	lsrs	r3, r3, #31
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f003 0320 	and.w	r3, r3, #32
 800995c:	2b20      	cmp	r3, #32
 800995e:	d10d      	bne.n	800997c <USB_HC_Halt+0x82>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10a      	bne.n	800997c <USB_HC_Halt+0x82>
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d005      	beq.n	8009978 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d002      	beq.n	8009978 <USB_HC_Halt+0x7e>
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	2b03      	cmp	r3, #3
 8009976:	d101      	bne.n	800997c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	e0d8      	b.n	8009b2e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d002      	beq.n	8009988 <USB_HC_Halt+0x8e>
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	2b02      	cmp	r3, #2
 8009986:	d173      	bne.n	8009a70 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	4413      	add	r3, r2
 8009990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	0151      	lsls	r1, r2, #5
 800999a:	69fa      	ldr	r2, [r7, #28]
 800999c:	440a      	add	r2, r1
 800999e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d14a      	bne.n	8009a4a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d133      	bne.n	8009a28 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69ba      	ldr	r2, [r7, #24]
 80099d0:	0151      	lsls	r1, r2, #5
 80099d2:	69fa      	ldr	r2, [r7, #28]
 80099d4:	440a      	add	r2, r1
 80099d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099de:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	0151      	lsls	r1, r2, #5
 80099f2:	69fa      	ldr	r2, [r7, #28]
 80099f4:	440a      	add	r2, r1
 80099f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80099fe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	3301      	adds	r3, #1
 8009a04:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a0c:	d82e      	bhi.n	8009a6c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a24:	d0ec      	beq.n	8009a00 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a26:	e081      	b.n	8009b2c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	69ba      	ldr	r2, [r7, #24]
 8009a38:	0151      	lsls	r1, r2, #5
 8009a3a:	69fa      	ldr	r2, [r7, #28]
 8009a3c:	440a      	add	r2, r1
 8009a3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a46:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a48:	e070      	b.n	8009b2c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	69ba      	ldr	r2, [r7, #24]
 8009a5a:	0151      	lsls	r1, r2, #5
 8009a5c:	69fa      	ldr	r2, [r7, #28]
 8009a5e:	440a      	add	r2, r1
 8009a60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a68:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a6a:	e05f      	b.n	8009b2c <USB_HC_Halt+0x232>
            break;
 8009a6c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a6e:	e05d      	b.n	8009b2c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	0151      	lsls	r1, r2, #5
 8009a82:	69fa      	ldr	r2, [r7, #28]
 8009a84:	440a      	add	r2, r1
 8009a86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a8e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d133      	bne.n	8009b08 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	0151      	lsls	r1, r2, #5
 8009ab2:	69fa      	ldr	r2, [r7, #28]
 8009ab4:	440a      	add	r2, r1
 8009ab6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009aba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009abe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69ba      	ldr	r2, [r7, #24]
 8009ad0:	0151      	lsls	r1, r2, #5
 8009ad2:	69fa      	ldr	r2, [r7, #28]
 8009ad4:	440a      	add	r2, r1
 8009ad6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ada:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009ade:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009aec:	d81d      	bhi.n	8009b2a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b04:	d0ec      	beq.n	8009ae0 <USB_HC_Halt+0x1e6>
 8009b06:	e011      	b.n	8009b2c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	0151      	lsls	r1, r2, #5
 8009b1a:	69fa      	ldr	r2, [r7, #28]
 8009b1c:	440a      	add	r2, r1
 8009b1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	e000      	b.n	8009b2c <USB_HC_Halt+0x232>
          break;
 8009b2a:	bf00      	nop
    }
  }

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3724      	adds	r7, #36	@ 0x24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
	...

08009b3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	460b      	mov	r3, r1
 8009b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009b4c:	78fb      	ldrb	r3, [r7, #3]
 8009b4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009b50:	2301      	movs	r3, #1
 8009b52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	04da      	lsls	r2, r3, #19
 8009b58:	4b15      	ldr	r3, [pc, #84]	@ (8009bb0 <USB_DoPing+0x74>)
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	0151      	lsls	r1, r2, #5
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	440a      	add	r2, r1
 8009b64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009b6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009b84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009b8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	371c      	adds	r7, #28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	1ff80000 	.word	0x1ff80000

08009bb4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b088      	sub	sp, #32
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7fe ff8c 	bl	8008ae6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bce:	2110      	movs	r1, #16
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7fe ffe5 	bl	8008ba0 <USB_FlushTxFifo>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7ff f80f 	bl	8008c04 <USB_FlushRxFifo>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	61bb      	str	r3, [r7, #24]
 8009bf4:	e01f      	b.n	8009c36 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c1c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	3301      	adds	r3, #1
 8009c34:	61bb      	str	r3, [r7, #24]
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2b0f      	cmp	r3, #15
 8009c3a:	d9dc      	bls.n	8009bf6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61bb      	str	r3, [r7, #24]
 8009c40:	e034      	b.n	8009cac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	015a      	lsls	r2, r3, #5
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	4413      	add	r3, r2
 8009c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c58:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009c60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c68:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	015a      	lsls	r2, r3, #5
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	4413      	add	r3, r2
 8009c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c76:	461a      	mov	r2, r3
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c88:	d80c      	bhi.n	8009ca4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ca0:	d0ec      	beq.n	8009c7c <USB_StopHost+0xc8>
 8009ca2:	e000      	b.n	8009ca6 <USB_StopHost+0xf2>
        break;
 8009ca4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	61bb      	str	r3, [r7, #24]
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	2b0f      	cmp	r3, #15
 8009cb0:	d9c7      	bls.n	8009c42 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009cb8:	461a      	mov	r2, r3
 8009cba:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7fe fefb 	bl	8008ac4 <USB_EnableGlobalInt>

  return ret;
 8009cce:	7ffb      	ldrb	r3, [r7, #31]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3720      	adds	r7, #32
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009cd8:	b590      	push	{r4, r7, lr}
 8009cda:	b089      	sub	sp, #36	@ 0x24
 8009cdc:	af04      	add	r7, sp, #16
 8009cde:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	2102      	movs	r1, #2
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fc85 	bl	800a5f6 <USBH_FindInterface>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
 8009cf2:	2bff      	cmp	r3, #255	@ 0xff
 8009cf4:	d002      	beq.n	8009cfc <USBH_CDC_InterfaceInit+0x24>
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d901      	bls.n	8009d00 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e13d      	b.n	8009f7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fc5a 	bl	800a5be <USBH_SelectInterface>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009d14:	2302      	movs	r3, #2
 8009d16:	e131      	b.n	8009f7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009d1e:	2050      	movs	r0, #80	@ 0x50
 8009d20:	f002 fb64 	bl	800c3ec <malloc>
 8009d24:	4603      	mov	r3, r0
 8009d26:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e11f      	b.n	8009f7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009d3c:	2250      	movs	r2, #80	@ 0x50
 8009d3e:	2100      	movs	r1, #0
 8009d40:	68b8      	ldr	r0, [r7, #8]
 8009d42:	f002 fd28 	bl	800c796 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	211a      	movs	r1, #26
 8009d4c:	fb01 f303 	mul.w	r3, r1, r3
 8009d50:	4413      	add	r3, r2
 8009d52:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	b25b      	sxtb	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	da15      	bge.n	8009d8a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	211a      	movs	r1, #26
 8009d64:	fb01 f303 	mul.w	r3, r1, r3
 8009d68:	4413      	add	r3, r2
 8009d6a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009d6e:	781a      	ldrb	r2, [r3, #0]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	211a      	movs	r1, #26
 8009d7a:	fb01 f303 	mul.w	r3, r1, r3
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009d84:	881a      	ldrh	r2, [r3, #0]
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	785b      	ldrb	r3, [r3, #1]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 ffbe 	bl	800bd12 <USBH_AllocPipe>
 8009d96:	4603      	mov	r3, r0
 8009d98:	461a      	mov	r2, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	7819      	ldrb	r1, [r3, #0]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	7858      	ldrb	r0, [r3, #1]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	8952      	ldrh	r2, [r2, #10]
 8009db6:	9202      	str	r2, [sp, #8]
 8009db8:	2203      	movs	r2, #3
 8009dba:	9201      	str	r2, [sp, #4]
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	4623      	mov	r3, r4
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 ff76 	bl	800bcb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f002 fa85 	bl	800c2e0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	2200      	movs	r2, #0
 8009dda:	210a      	movs	r1, #10
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fc0a 	bl	800a5f6 <USBH_FindInterface>
 8009de2:	4603      	mov	r3, r0
 8009de4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	2bff      	cmp	r3, #255	@ 0xff
 8009dea:	d002      	beq.n	8009df2 <USBH_CDC_InterfaceInit+0x11a>
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d901      	bls.n	8009df6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009df2:	2302      	movs	r3, #2
 8009df4:	e0c2      	b.n	8009f7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	211a      	movs	r1, #26
 8009dfc:	fb01 f303 	mul.w	r3, r1, r3
 8009e00:	4413      	add	r3, r2
 8009e02:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	b25b      	sxtb	r3, r3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	da16      	bge.n	8009e3c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	211a      	movs	r1, #26
 8009e14:	fb01 f303 	mul.w	r3, r1, r3
 8009e18:	4413      	add	r3, r2
 8009e1a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009e1e:	781a      	ldrb	r2, [r3, #0]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	211a      	movs	r1, #26
 8009e2a:	fb01 f303 	mul.w	r3, r1, r3
 8009e2e:	4413      	add	r3, r2
 8009e30:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009e34:	881a      	ldrh	r2, [r3, #0]
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	835a      	strh	r2, [r3, #26]
 8009e3a:	e015      	b.n	8009e68 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	211a      	movs	r1, #26
 8009e42:	fb01 f303 	mul.w	r3, r1, r3
 8009e46:	4413      	add	r3, r2
 8009e48:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009e4c:	781a      	ldrb	r2, [r3, #0]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	211a      	movs	r1, #26
 8009e58:	fb01 f303 	mul.w	r3, r1, r3
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009e62:	881a      	ldrh	r2, [r3, #0]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	211a      	movs	r1, #26
 8009e6e:	fb01 f303 	mul.w	r3, r1, r3
 8009e72:	4413      	add	r3, r2
 8009e74:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	b25b      	sxtb	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	da16      	bge.n	8009eae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	211a      	movs	r1, #26
 8009e86:	fb01 f303 	mul.w	r3, r1, r3
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009e90:	781a      	ldrb	r2, [r3, #0]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	211a      	movs	r1, #26
 8009e9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009ea6:	881a      	ldrh	r2, [r3, #0]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	835a      	strh	r2, [r3, #26]
 8009eac:	e015      	b.n	8009eda <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	211a      	movs	r1, #26
 8009eb4:	fb01 f303 	mul.w	r3, r1, r3
 8009eb8:	4413      	add	r3, r2
 8009eba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009ebe:	781a      	ldrb	r2, [r3, #0]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	211a      	movs	r1, #26
 8009eca:	fb01 f303 	mul.w	r3, r1, r3
 8009ece:	4413      	add	r3, r2
 8009ed0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009ed4:	881a      	ldrh	r2, [r3, #0]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	7b9b      	ldrb	r3, [r3, #14]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 ff16 	bl	800bd12 <USBH_AllocPipe>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	461a      	mov	r2, r3
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	7bdb      	ldrb	r3, [r3, #15]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f001 ff0c 	bl	800bd12 <USBH_AllocPipe>
 8009efa:	4603      	mov	r3, r0
 8009efc:	461a      	mov	r2, r3
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	7b59      	ldrb	r1, [r3, #13]
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	7b98      	ldrb	r0, [r3, #14]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	8b12      	ldrh	r2, [r2, #24]
 8009f1a:	9202      	str	r2, [sp, #8]
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	9201      	str	r2, [sp, #4]
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	4623      	mov	r3, r4
 8009f24:	4602      	mov	r2, r0
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 fec4 	bl	800bcb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	7b19      	ldrb	r1, [r3, #12]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	7bd8      	ldrb	r0, [r3, #15]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	8b52      	ldrh	r2, [r2, #26]
 8009f44:	9202      	str	r2, [sp, #8]
 8009f46:	2202      	movs	r2, #2
 8009f48:	9201      	str	r2, [sp, #4]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	4623      	mov	r3, r4
 8009f4e:	4602      	mov	r2, r0
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 feaf 	bl	800bcb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	7b5b      	ldrb	r3, [r3, #13]
 8009f62:	2200      	movs	r2, #0
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f002 f9ba 	bl	800c2e0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	7b1b      	ldrb	r3, [r3, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f002 f9b3 	bl	800c2e0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd90      	pop	{r4, r7, pc}

08009f84 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00e      	beq.n	8009fbc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f001 fea4 	bl	800bcf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f001 fecf 	bl	800bd54 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	7b1b      	ldrb	r3, [r3, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00e      	beq.n	8009fe2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	7b1b      	ldrb	r3, [r3, #12]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 fe91 	bl	800bcf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	7b1b      	ldrb	r3, [r3, #12]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f001 febc 	bl	800bd54 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	7b5b      	ldrb	r3, [r3, #13]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00e      	beq.n	800a008 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	7b5b      	ldrb	r3, [r3, #13]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 fe7e 	bl	800bcf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	7b5b      	ldrb	r3, [r3, #13]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f001 fea9 	bl	800bd54 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00b      	beq.n	800a02c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f002 f9ed 	bl	800c3fc <free>
    phost->pActiveClass->pData = 0U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a028:	2200      	movs	r2, #0
 800a02a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	3340      	adds	r3, #64	@ 0x40
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f8b1 	bl	800a1b6 <GetLineCoding>
 800a054:	4603      	mov	r3, r0
 800a056:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a058:	7afb      	ldrb	r3, [r7, #11]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d105      	bne.n	800a06a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a064:	2102      	movs	r1, #2
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a06a:	7afb      	ldrb	r3, [r7, #11]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a07c:	2301      	movs	r3, #1
 800a07e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a094:	2b04      	cmp	r3, #4
 800a096:	d877      	bhi.n	800a188 <USBH_CDC_Process+0x114>
 800a098:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a0 <USBH_CDC_Process+0x2c>)
 800a09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09e:	bf00      	nop
 800a0a0:	0800a0b5 	.word	0x0800a0b5
 800a0a4:	0800a0bb 	.word	0x0800a0bb
 800a0a8:	0800a0eb 	.word	0x0800a0eb
 800a0ac:	0800a15f 	.word	0x0800a15f
 800a0b0:	0800a16d 	.word	0x0800a16d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b8:	e06d      	b.n	800a196 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f897 	bl	800a1f4 <SetLineCoding>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d104      	bne.n	800a0da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a0d8:	e058      	b.n	800a18c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a0da:	7bbb      	ldrb	r3, [r7, #14]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d055      	beq.n	800a18c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2204      	movs	r2, #4
 800a0e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a0e8:	e050      	b.n	800a18c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	3340      	adds	r3, #64	@ 0x40
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f860 	bl	800a1b6 <GetLineCoding>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d126      	bne.n	800a14e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a112:	791b      	ldrb	r3, [r3, #4]
 800a114:	429a      	cmp	r2, r3
 800a116:	d13b      	bne.n	800a190 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a122:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a124:	429a      	cmp	r2, r3
 800a126:	d133      	bne.n	800a190 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a132:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a134:	429a      	cmp	r2, r3
 800a136:	d12b      	bne.n	800a190 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a140:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a142:	429a      	cmp	r2, r3
 800a144:	d124      	bne.n	800a190 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f958 	bl	800a3fc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a14c:	e020      	b.n	800a190 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d01d      	beq.n	800a190 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2204      	movs	r2, #4
 800a158:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a15c:	e018      	b.n	800a190 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f867 	bl	800a232 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f8da 	bl	800a31e <CDC_ProcessReception>
      break;
 800a16a:	e014      	b.n	800a196 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a16c:	2100      	movs	r1, #0
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f001 f81a 	bl	800b1a8 <USBH_ClrFeature>
 800a174:	4603      	mov	r3, r0
 800a176:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10a      	bne.n	800a194 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800a186:	e005      	b.n	800a194 <USBH_CDC_Process+0x120>

    default:
      break;
 800a188:	bf00      	nop
 800a18a:	e004      	b.n	800a196 <USBH_CDC_Process+0x122>
      break;
 800a18c:	bf00      	nop
 800a18e:	e002      	b.n	800a196 <USBH_CDC_Process+0x122>
      break;
 800a190:	bf00      	nop
 800a192:	e000      	b.n	800a196 <USBH_CDC_Process+0x122>
      break;
 800a194:	bf00      	nop

  }

  return status;
 800a196:	7bfb      	ldrb	r3, [r7, #15]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	22a1      	movs	r2, #161	@ 0xa1
 800a1c4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2221      	movs	r2, #33	@ 0x21
 800a1ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2207      	movs	r2, #7
 800a1dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2207      	movs	r2, #7
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 fb14 	bl	800b812 <USBH_CtlReq>
 800a1ea:	4603      	mov	r3, r0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2221      	movs	r2, #33	@ 0x21
 800a202:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2220      	movs	r2, #32
 800a208:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2207      	movs	r2, #7
 800a21a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2207      	movs	r2, #7
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f001 faf5 	bl	800b812 <USBH_CtlReq>
 800a228:	4603      	mov	r3, r0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b086      	sub	sp, #24
 800a236:	af02      	add	r7, sp, #8
 800a238:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a244:	2300      	movs	r3, #0
 800a246:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d002      	beq.n	800a258 <CDC_ProcessTransmission+0x26>
 800a252:	2b02      	cmp	r3, #2
 800a254:	d023      	beq.n	800a29e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a256:	e05e      	b.n	800a316 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	8b12      	ldrh	r2, [r2, #24]
 800a260:	4293      	cmp	r3, r2
 800a262:	d90b      	bls.n	800a27c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	69d9      	ldr	r1, [r3, #28]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	8b1a      	ldrh	r2, [r3, #24]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	7b5b      	ldrb	r3, [r3, #13]
 800a270:	2001      	movs	r0, #1
 800a272:	9000      	str	r0, [sp, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f001 fcda 	bl	800bc2e <USBH_BulkSendData>
 800a27a:	e00b      	b.n	800a294 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a284:	b29a      	uxth	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	7b5b      	ldrb	r3, [r3, #13]
 800a28a:	2001      	movs	r0, #1
 800a28c:	9000      	str	r0, [sp, #0]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f001 fccd 	bl	800bc2e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2202      	movs	r2, #2
 800a298:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a29c:	e03b      	b.n	800a316 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	7b5b      	ldrb	r3, [r3, #13]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f001 fff1 	bl	800c28c <USBH_LL_GetURBState>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a2ae:	7afb      	ldrb	r3, [r7, #11]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d128      	bne.n	800a306 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	8b12      	ldrh	r2, [r2, #24]
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d90e      	bls.n	800a2de <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	8b12      	ldrh	r2, [r2, #24]
 800a2c8:	1a9a      	subs	r2, r3, r2
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	8b12      	ldrh	r2, [r2, #24]
 800a2d6:	441a      	add	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	61da      	str	r2, [r3, #28]
 800a2dc:	e002      	b.n	800a2e4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d004      	beq.n	800a2f6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a2f4:	e00e      	b.n	800a314 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f868 	bl	800a3d4 <USBH_CDC_TransmitCallback>
      break;
 800a304:	e006      	b.n	800a314 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a306:	7afb      	ldrb	r3, [r7, #11]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d103      	bne.n	800a314 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a314:	bf00      	nop
  }
}
 800a316:	bf00      	nop
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b086      	sub	sp, #24
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a32c:	69db      	ldr	r3, [r3, #28]
 800a32e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a330:	2300      	movs	r3, #0
 800a332:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d002      	beq.n	800a344 <CDC_ProcessReception+0x26>
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d00e      	beq.n	800a360 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a342:	e043      	b.n	800a3cc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	6a19      	ldr	r1, [r3, #32]
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	8b5a      	ldrh	r2, [r3, #26]
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	7b1b      	ldrb	r3, [r3, #12]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f001 fc91 	bl	800bc78 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2204      	movs	r2, #4
 800a35a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a35e:	e035      	b.n	800a3cc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	7b1b      	ldrb	r3, [r3, #12]
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f001 ff90 	bl	800c28c <USBH_LL_GetURBState>
 800a36c:	4603      	mov	r3, r0
 800a36e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a370:	7cfb      	ldrb	r3, [r7, #19]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d129      	bne.n	800a3ca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	7b1b      	ldrb	r3, [r3, #12]
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f001 fef3 	bl	800c168 <USBH_LL_GetLastXferSize>
 800a382:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d016      	beq.n	800a3bc <CDC_ProcessReception+0x9e>
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	8b5b      	ldrh	r3, [r3, #26]
 800a392:	461a      	mov	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4293      	cmp	r3, r2
 800a398:	d110      	bne.n	800a3bc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	1ad2      	subs	r2, r2, r3
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	6a1a      	ldr	r2, [r3, #32]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	441a      	add	r2, r3
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2203      	movs	r2, #3
 800a3b6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a3ba:	e006      	b.n	800a3ca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f80f 	bl	800a3e8 <USBH_CDC_ReceiveCallback>
      break;
 800a3ca:	bf00      	nop
  }
}
 800a3cc:	bf00      	nop
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	4613      	mov	r3, r2
 800a41c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a424:	2302      	movs	r3, #2
 800a426:	e029      	b.n	800a47c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	79fa      	ldrb	r2, [r7, #7]
 800a42c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f000 f81f 	bl	800a484 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d003      	beq.n	800a474 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f001 fdc3 	bl	800c000 <USBH_LL_Init>

  return USBH_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a48c:	2300      	movs	r3, #0
 800a48e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a490:	2300      	movs	r3, #0
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	e009      	b.n	800a4aa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	33e0      	adds	r3, #224	@ 0xe0
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2b0f      	cmp	r3, #15
 800a4ae:	d9f2      	bls.n	800a496 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	e009      	b.n	800a4ca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	60fb      	str	r3, [r7, #12]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4d0:	d3f1      	bcc.n	800a4b6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2240      	movs	r2, #64	@ 0x40
 800a4f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	331c      	adds	r3, #28
 800a522:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a526:	2100      	movs	r1, #0
 800a528:	4618      	mov	r0, r3
 800a52a:	f002 f934 	bl	800c796 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a538:	2100      	movs	r1, #0
 800a53a:	4618      	mov	r0, r3
 800a53c:	f002 f92b 	bl	800c796 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a546:	2212      	movs	r2, #18
 800a548:	2100      	movs	r1, #0
 800a54a:	4618      	mov	r0, r3
 800a54c:	f002 f923 	bl	800c796 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a556:	223e      	movs	r2, #62	@ 0x3e
 800a558:	2100      	movs	r1, #0
 800a55a:	4618      	mov	r0, r3
 800a55c:	f002 f91b 	bl	800c796 <memset>

  return USBH_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b085      	sub	sp, #20
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a574:	2300      	movs	r3, #0
 800a576:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d016      	beq.n	800a5ac <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10e      	bne.n	800a5a6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a58e:	1c59      	adds	r1, r3, #1
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	33de      	adds	r3, #222	@ 0xde
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]
 800a5a4:	e004      	b.n	800a5b0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	73fb      	strb	r3, [r7, #15]
 800a5aa:	e001      	b.n	800a5b0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b085      	sub	sp, #20
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a5d4:	78fa      	ldrb	r2, [r7, #3]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d204      	bcs.n	800a5e4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	78fa      	ldrb	r2, [r7, #3]
 800a5de:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a5e2:	e001      	b.n	800a5e8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b087      	sub	sp, #28
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	4608      	mov	r0, r1
 800a600:	4611      	mov	r1, r2
 800a602:	461a      	mov	r2, r3
 800a604:	4603      	mov	r3, r0
 800a606:	70fb      	strb	r3, [r7, #3]
 800a608:	460b      	mov	r3, r1
 800a60a:	70bb      	strb	r3, [r7, #2]
 800a60c:	4613      	mov	r3, r2
 800a60e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a614:	2300      	movs	r3, #0
 800a616:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a61e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a620:	e025      	b.n	800a66e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a622:	7dfb      	ldrb	r3, [r7, #23]
 800a624:	221a      	movs	r2, #26
 800a626:	fb02 f303 	mul.w	r3, r2, r3
 800a62a:	3308      	adds	r3, #8
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	4413      	add	r3, r2
 800a630:	3302      	adds	r3, #2
 800a632:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	795b      	ldrb	r3, [r3, #5]
 800a638:	78fa      	ldrb	r2, [r7, #3]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d002      	beq.n	800a644 <USBH_FindInterface+0x4e>
 800a63e:	78fb      	ldrb	r3, [r7, #3]
 800a640:	2bff      	cmp	r3, #255	@ 0xff
 800a642:	d111      	bne.n	800a668 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a648:	78ba      	ldrb	r2, [r7, #2]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d002      	beq.n	800a654 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a64e:	78bb      	ldrb	r3, [r7, #2]
 800a650:	2bff      	cmp	r3, #255	@ 0xff
 800a652:	d109      	bne.n	800a668 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a658:	787a      	ldrb	r2, [r7, #1]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d002      	beq.n	800a664 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a65e:	787b      	ldrb	r3, [r7, #1]
 800a660:	2bff      	cmp	r3, #255	@ 0xff
 800a662:	d101      	bne.n	800a668 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a664:	7dfb      	ldrb	r3, [r7, #23]
 800a666:	e006      	b.n	800a676 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a668:	7dfb      	ldrb	r3, [r7, #23]
 800a66a:	3301      	adds	r3, #1
 800a66c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d9d6      	bls.n	800a622 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a674:	23ff      	movs	r3, #255	@ 0xff
}
 800a676:	4618      	mov	r0, r3
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f001 fcf4 	bl	800c078 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a690:	2101      	movs	r1, #1
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f001 fe0d 	bl	800c2b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
	...

0800a6a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af04      	add	r7, sp, #16
 800a6aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d102      	bne.n	800a6c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2203      	movs	r2, #3
 800a6c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	2b0b      	cmp	r3, #11
 800a6ce:	f200 81bb 	bhi.w	800aa48 <USBH_Process+0x3a4>
 800a6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d8 <USBH_Process+0x34>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a709 	.word	0x0800a709
 800a6dc:	0800a73b 	.word	0x0800a73b
 800a6e0:	0800a7a3 	.word	0x0800a7a3
 800a6e4:	0800a9e3 	.word	0x0800a9e3
 800a6e8:	0800aa49 	.word	0x0800aa49
 800a6ec:	0800a843 	.word	0x0800a843
 800a6f0:	0800a989 	.word	0x0800a989
 800a6f4:	0800a879 	.word	0x0800a879
 800a6f8:	0800a899 	.word	0x0800a899
 800a6fc:	0800a8b7 	.word	0x0800a8b7
 800a700:	0800a8fb 	.word	0x0800a8fb
 800a704:	0800a9cb 	.word	0x0800a9cb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 819b 	beq.w	800aa4c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2201      	movs	r2, #1
 800a71a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a71c:	20c8      	movs	r0, #200	@ 0xc8
 800a71e:	f001 fe12 	bl	800c346 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f001 fd05 	bl	800c132 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a738:	e188      	b.n	800aa4c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a740:	2b01      	cmp	r3, #1
 800a742:	d107      	bne.n	800a754 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2202      	movs	r2, #2
 800a750:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a752:	e18a      	b.n	800aa6a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a75a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a75e:	d914      	bls.n	800a78a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a766:	3301      	adds	r3, #1
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a776:	2b03      	cmp	r3, #3
 800a778:	d903      	bls.n	800a782 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	220d      	movs	r2, #13
 800a77e:	701a      	strb	r2, [r3, #0]
      break;
 800a780:	e173      	b.n	800aa6a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	701a      	strb	r2, [r3, #0]
      break;
 800a788:	e16f      	b.n	800aa6a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a790:	f103 020a 	add.w	r2, r3, #10
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a79a:	200a      	movs	r0, #10
 800a79c:	f001 fdd3 	bl	800c346 <USBH_Delay>
      break;
 800a7a0:	e163      	b.n	800aa6a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d005      	beq.n	800a7b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7b2:	2104      	movs	r1, #4
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a7b8:	2064      	movs	r0, #100	@ 0x64
 800a7ba:	f001 fdc4 	bl	800c346 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f001 fc90 	bl	800c0e4 <USBH_LL_GetSpeed>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2205      	movs	r2, #5
 800a7d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f001 fa9b 	bl	800bd12 <USBH_AllocPipe>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	461a      	mov	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a7e4:	2180      	movs	r1, #128	@ 0x80
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f001 fa93 	bl	800bd12 <USBH_AllocPipe>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	7919      	ldrb	r1, [r3, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a808:	9202      	str	r2, [sp, #8]
 800a80a:	2200      	movs	r2, #0
 800a80c:	9201      	str	r2, [sp, #4]
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	4603      	mov	r3, r0
 800a812:	2280      	movs	r2, #128	@ 0x80
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 fa4d 	bl	800bcb4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	7959      	ldrb	r1, [r3, #5]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a82e:	9202      	str	r2, [sp, #8]
 800a830:	2200      	movs	r2, #0
 800a832:	9201      	str	r2, [sp, #4]
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	4603      	mov	r3, r0
 800a838:	2200      	movs	r2, #0
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 fa3a 	bl	800bcb4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a840:	e113      	b.n	800aa6a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f916 	bl	800aa74 <USBH_HandleEnum>
 800a848:	4603      	mov	r3, r0
 800a84a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	f040 80fd 	bne.w	800aa50 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a864:	2b01      	cmp	r3, #1
 800a866:	d103      	bne.n	800a870 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2208      	movs	r2, #8
 800a86c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a86e:	e0ef      	b.n	800aa50 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2207      	movs	r2, #7
 800a874:	701a      	strb	r2, [r3, #0]
      break;
 800a876:	e0eb      	b.n	800aa50 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 80e8 	beq.w	800aa54 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a88a:	2101      	movs	r1, #1
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2208      	movs	r2, #8
 800a894:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a896:	e0dd      	b.n	800aa54 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fc3a 	bl	800b11a <USBH_SetCfg>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f040 80d5 	bne.w	800aa58 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2209      	movs	r2, #9
 800a8b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a8b4:	e0d0      	b.n	800aa58 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a8bc:	f003 0320 	and.w	r3, r3, #32
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d016      	beq.n	800a8f2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fc4a 	bl	800b160 <USBH_SetFeature>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d103      	bne.n	800a8e0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	220a      	movs	r2, #10
 800a8dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a8de:	e0bd      	b.n	800aa5c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800a8e0:	7bbb      	ldrb	r3, [r7, #14]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	f040 80b9 	bne.w	800aa5c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	220a      	movs	r2, #10
 800a8ee:	701a      	strb	r2, [r3, #0]
      break;
 800a8f0:	e0b4      	b.n	800aa5c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	220a      	movs	r2, #10
 800a8f6:	701a      	strb	r2, [r3, #0]
      break;
 800a8f8:	e0b0      	b.n	800aa5c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 80ad 	beq.w	800aa60 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a90e:	2300      	movs	r3, #0
 800a910:	73fb      	strb	r3, [r7, #15]
 800a912:	e016      	b.n	800a942 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a914:	7bfa      	ldrb	r2, [r7, #15]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	32de      	adds	r2, #222	@ 0xde
 800a91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91e:	791a      	ldrb	r2, [r3, #4]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a926:	429a      	cmp	r2, r3
 800a928:	d108      	bne.n	800a93c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a92a:	7bfa      	ldrb	r2, [r7, #15]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	32de      	adds	r2, #222	@ 0xde
 800a930:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a93a:	e005      	b.n	800a948 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
 800a93e:	3301      	adds	r3, #1
 800a940:	73fb      	strb	r3, [r7, #15]
 800a942:	7bfb      	ldrb	r3, [r7, #15]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d0e5      	beq.n	800a914 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d016      	beq.n	800a980 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	4798      	blx	r3
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d109      	bne.n	800a978 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2206      	movs	r2, #6
 800a968:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a970:	2103      	movs	r1, #3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a976:	e073      	b.n	800aa60 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	220d      	movs	r2, #13
 800a97c:	701a      	strb	r2, [r3, #0]
      break;
 800a97e:	e06f      	b.n	800aa60 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	220d      	movs	r2, #13
 800a984:	701a      	strb	r2, [r3, #0]
      break;
 800a986:	e06b      	b.n	800aa60 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d017      	beq.n	800a9c2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	4798      	blx	r3
 800a99e:	4603      	mov	r3, r0
 800a9a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d103      	bne.n	800a9b2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	220b      	movs	r2, #11
 800a9ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a9b0:	e058      	b.n	800aa64 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d154      	bne.n	800aa64 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	220d      	movs	r2, #13
 800a9be:	701a      	strb	r2, [r3, #0]
      break;
 800a9c0:	e050      	b.n	800aa64 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	220d      	movs	r2, #13
 800a9c6:	701a      	strb	r2, [r3, #0]
      break;
 800a9c8:	e04c      	b.n	800aa64 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d049      	beq.n	800aa68 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a9da:	695b      	ldr	r3, [r3, #20]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	4798      	blx	r3
      }
      break;
 800a9e0:	e042      	b.n	800aa68 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7ff fd4a 	bl	800a484 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d009      	beq.n	800aa0e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d005      	beq.n	800aa24 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aa1e:	2105      	movs	r1, #5
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d107      	bne.n	800aa40 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f7ff fe22 	bl	800a682 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aa3e:	e014      	b.n	800aa6a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 fb19 	bl	800c078 <USBH_LL_Start>
      break;
 800aa46:	e010      	b.n	800aa6a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800aa48:	bf00      	nop
 800aa4a:	e00e      	b.n	800aa6a <USBH_Process+0x3c6>
      break;
 800aa4c:	bf00      	nop
 800aa4e:	e00c      	b.n	800aa6a <USBH_Process+0x3c6>
      break;
 800aa50:	bf00      	nop
 800aa52:	e00a      	b.n	800aa6a <USBH_Process+0x3c6>
    break;
 800aa54:	bf00      	nop
 800aa56:	e008      	b.n	800aa6a <USBH_Process+0x3c6>
      break;
 800aa58:	bf00      	nop
 800aa5a:	e006      	b.n	800aa6a <USBH_Process+0x3c6>
      break;
 800aa5c:	bf00      	nop
 800aa5e:	e004      	b.n	800aa6a <USBH_Process+0x3c6>
      break;
 800aa60:	bf00      	nop
 800aa62:	e002      	b.n	800aa6a <USBH_Process+0x3c6>
      break;
 800aa64:	bf00      	nop
 800aa66:	e000      	b.n	800aa6a <USBH_Process+0x3c6>
      break;
 800aa68:	bf00      	nop
  }
  return USBH_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b088      	sub	sp, #32
 800aa78:	af04      	add	r7, sp, #16
 800aa7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aa80:	2301      	movs	r3, #1
 800aa82:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	785b      	ldrb	r3, [r3, #1]
 800aa88:	2b07      	cmp	r3, #7
 800aa8a:	f200 81bd 	bhi.w	800ae08 <USBH_HandleEnum+0x394>
 800aa8e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa94 <USBH_HandleEnum+0x20>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aab5 	.word	0x0800aab5
 800aa98:	0800ab6f 	.word	0x0800ab6f
 800aa9c:	0800abd9 	.word	0x0800abd9
 800aaa0:	0800ac63 	.word	0x0800ac63
 800aaa4:	0800accd 	.word	0x0800accd
 800aaa8:	0800ad3d 	.word	0x0800ad3d
 800aaac:	0800ad83 	.word	0x0800ad83
 800aab0:	0800adc9 	.word	0x0800adc9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800aab4:	2108      	movs	r1, #8
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fa4c 	bl	800af54 <USBH_Get_DevDesc>
 800aabc:	4603      	mov	r3, r0
 800aabe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d12e      	bne.n	800ab24 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	7919      	ldrb	r1, [r3, #4]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aaea:	9202      	str	r2, [sp, #8]
 800aaec:	2200      	movs	r2, #0
 800aaee:	9201      	str	r2, [sp, #4]
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2280      	movs	r2, #128	@ 0x80
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f001 f8dc 	bl	800bcb4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	7959      	ldrb	r1, [r3, #5]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab10:	9202      	str	r2, [sp, #8]
 800ab12:	2200      	movs	r2, #0
 800ab14:	9201      	str	r2, [sp, #4]
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f001 f8c9 	bl	800bcb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab22:	e173      	b.n	800ae0c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab24:	7bbb      	ldrb	r3, [r7, #14]
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	f040 8170 	bne.w	800ae0c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ab32:	3301      	adds	r3, #1
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d903      	bls.n	800ab4e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	220d      	movs	r2, #13
 800ab4a:	701a      	strb	r2, [r3, #0]
      break;
 800ab4c:	e15e      	b.n	800ae0c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	795b      	ldrb	r3, [r3, #5]
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f001 f8fd 	bl	800bd54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	791b      	ldrb	r3, [r3, #4]
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f001 f8f7 	bl	800bd54 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	701a      	strb	r2, [r3, #0]
      break;
 800ab6c:	e14e      	b.n	800ae0c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ab6e:	2112      	movs	r1, #18
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f9ef 	bl	800af54 <USBH_Get_DevDesc>
 800ab76:	4603      	mov	r3, r0
 800ab78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab7a:	7bbb      	ldrb	r3, [r7, #14]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d103      	bne.n	800ab88 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2202      	movs	r2, #2
 800ab84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab86:	e143      	b.n	800ae10 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab88:	7bbb      	ldrb	r3, [r7, #14]
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	f040 8140 	bne.w	800ae10 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ab96:	3301      	adds	r3, #1
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d903      	bls.n	800abb2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	220d      	movs	r2, #13
 800abae:	701a      	strb	r2, [r3, #0]
      break;
 800abb0:	e12e      	b.n	800ae10 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	795b      	ldrb	r3, [r3, #5]
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f001 f8cb 	bl	800bd54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	791b      	ldrb	r3, [r3, #4]
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f001 f8c5 	bl	800bd54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	701a      	strb	r2, [r3, #0]
      break;
 800abd6:	e11b      	b.n	800ae10 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800abd8:	2101      	movs	r1, #1
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fa79 	bl	800b0d2 <USBH_SetAddress>
 800abe0:	4603      	mov	r3, r0
 800abe2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abe4:	7bbb      	ldrb	r3, [r7, #14]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d130      	bne.n	800ac4c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800abea:	2002      	movs	r0, #2
 800abec:	f001 fbab 	bl	800c346 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2203      	movs	r2, #3
 800abfc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	7919      	ldrb	r1, [r3, #4]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ac12:	9202      	str	r2, [sp, #8]
 800ac14:	2200      	movs	r2, #0
 800ac16:	9201      	str	r2, [sp, #4]
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2280      	movs	r2, #128	@ 0x80
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f001 f848 	bl	800bcb4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7959      	ldrb	r1, [r3, #5]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac38:	9202      	str	r2, [sp, #8]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	9201      	str	r2, [sp, #4]
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	4603      	mov	r3, r0
 800ac42:	2200      	movs	r2, #0
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f001 f835 	bl	800bcb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac4a:	e0e3      	b.n	800ae14 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	f040 80e0 	bne.w	800ae14 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	220d      	movs	r2, #13
 800ac58:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	705a      	strb	r2, [r3, #1]
      break;
 800ac60:	e0d8      	b.n	800ae14 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ac62:	2109      	movs	r1, #9
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f9a1 	bl	800afac <USBH_Get_CfgDesc>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac6e:	7bbb      	ldrb	r3, [r7, #14]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d103      	bne.n	800ac7c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2204      	movs	r2, #4
 800ac78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac7a:	e0cd      	b.n	800ae18 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	f040 80ca 	bne.w	800ae18 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d903      	bls.n	800aca6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	220d      	movs	r2, #13
 800aca2:	701a      	strb	r2, [r3, #0]
      break;
 800aca4:	e0b8      	b.n	800ae18 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	795b      	ldrb	r3, [r3, #5]
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f001 f851 	bl	800bd54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	791b      	ldrb	r3, [r3, #4]
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f001 f84b 	bl	800bd54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	701a      	strb	r2, [r3, #0]
      break;
 800acca:	e0a5      	b.n	800ae18 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800acd2:	4619      	mov	r1, r3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f969 	bl	800afac <USBH_Get_CfgDesc>
 800acda:	4603      	mov	r3, r0
 800acdc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800acde:	7bbb      	ldrb	r3, [r7, #14]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d103      	bne.n	800acec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2205      	movs	r2, #5
 800ace8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800acea:	e097      	b.n	800ae1c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	2b03      	cmp	r3, #3
 800acf0:	f040 8094 	bne.w	800ae1c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800acfa:	3301      	adds	r3, #1
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	d903      	bls.n	800ad16 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	220d      	movs	r2, #13
 800ad12:	701a      	strb	r2, [r3, #0]
      break;
 800ad14:	e082      	b.n	800ae1c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	795b      	ldrb	r3, [r3, #5]
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f001 f819 	bl	800bd54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	791b      	ldrb	r3, [r3, #4]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f001 f813 	bl	800bd54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	701a      	strb	r2, [r3, #0]
      break;
 800ad3a:	e06f      	b.n	800ae1c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d019      	beq.n	800ad7a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad52:	23ff      	movs	r3, #255	@ 0xff
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f953 	bl	800b000 <USBH_Get_StringDesc>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad5e:	7bbb      	ldrb	r3, [r7, #14]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d103      	bne.n	800ad6c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2206      	movs	r2, #6
 800ad68:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ad6a:	e059      	b.n	800ae20 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	2b03      	cmp	r3, #3
 800ad70:	d156      	bne.n	800ae20 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2206      	movs	r2, #6
 800ad76:	705a      	strb	r2, [r3, #1]
      break;
 800ad78:	e052      	b.n	800ae20 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2206      	movs	r2, #6
 800ad7e:	705a      	strb	r2, [r3, #1]
      break;
 800ad80:	e04e      	b.n	800ae20 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d019      	beq.n	800adc0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ad98:	23ff      	movs	r3, #255	@ 0xff
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f930 	bl	800b000 <USBH_Get_StringDesc>
 800ada0:	4603      	mov	r3, r0
 800ada2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d103      	bne.n	800adb2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2207      	movs	r2, #7
 800adae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800adb0:	e038      	b.n	800ae24 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adb2:	7bbb      	ldrb	r3, [r7, #14]
 800adb4:	2b03      	cmp	r3, #3
 800adb6:	d135      	bne.n	800ae24 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2207      	movs	r2, #7
 800adbc:	705a      	strb	r2, [r3, #1]
      break;
 800adbe:	e031      	b.n	800ae24 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2207      	movs	r2, #7
 800adc4:	705a      	strb	r2, [r3, #1]
      break;
 800adc6:	e02d      	b.n	800ae24 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800adce:	2b00      	cmp	r3, #0
 800add0:	d017      	beq.n	800ae02 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800adde:	23ff      	movs	r3, #255	@ 0xff
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f90d 	bl	800b000 <USBH_Get_StringDesc>
 800ade6:	4603      	mov	r3, r0
 800ade8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d102      	bne.n	800adf6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800adf4:	e018      	b.n	800ae28 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	d115      	bne.n	800ae28 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ae00:	e012      	b.n	800ae28 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	73fb      	strb	r3, [r7, #15]
      break;
 800ae06:	e00f      	b.n	800ae28 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800ae08:	bf00      	nop
 800ae0a:	e00e      	b.n	800ae2a <USBH_HandleEnum+0x3b6>
      break;
 800ae0c:	bf00      	nop
 800ae0e:	e00c      	b.n	800ae2a <USBH_HandleEnum+0x3b6>
      break;
 800ae10:	bf00      	nop
 800ae12:	e00a      	b.n	800ae2a <USBH_HandleEnum+0x3b6>
      break;
 800ae14:	bf00      	nop
 800ae16:	e008      	b.n	800ae2a <USBH_HandleEnum+0x3b6>
      break;
 800ae18:	bf00      	nop
 800ae1a:	e006      	b.n	800ae2a <USBH_HandleEnum+0x3b6>
      break;
 800ae1c:	bf00      	nop
 800ae1e:	e004      	b.n	800ae2a <USBH_HandleEnum+0x3b6>
      break;
 800ae20:	bf00      	nop
 800ae22:	e002      	b.n	800ae2a <USBH_HandleEnum+0x3b6>
      break;
 800ae24:	bf00      	nop
 800ae26:	e000      	b.n	800ae2a <USBH_HandleEnum+0x3b6>
      break;
 800ae28:	bf00      	nop
  }
  return Status;
 800ae2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ae60:	1c5a      	adds	r2, r3, #1
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f804 	bl	800ae76 <USBH_HandleSof>
}
 800ae6e:	bf00      	nop
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b0b      	cmp	r3, #11
 800ae86:	d10a      	bne.n	800ae9e <USBH_HandleSof+0x28>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d005      	beq.n	800ae9e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	4798      	blx	r3
  }
}
 800ae9e:	bf00      	nop
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b083      	sub	sp, #12
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800aeb6:	bf00      	nop
}
 800aeb8:	370c      	adds	r7, #12
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr

0800aec2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aec2:	b480      	push	{r7}
 800aec4:	b083      	sub	sp, #12
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800aed2:	bf00      	nop
}
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aede:	b480      	push	{r7}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800aefe:	2300      	movs	r3, #0
}
 800af00:	4618      	mov	r0, r3
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f001 f8be 	bl	800c0ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	791b      	ldrb	r3, [r3, #4]
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 ff0b 	bl	800bd54 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	795b      	ldrb	r3, [r3, #5]
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 ff05 	bl	800bd54 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af02      	add	r7, sp, #8
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	460b      	mov	r3, r1
 800af5e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800af60:	887b      	ldrh	r3, [r7, #2]
 800af62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af66:	d901      	bls.n	800af6c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800af68:	2303      	movs	r3, #3
 800af6a:	e01b      	b.n	800afa4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800af72:	887b      	ldrh	r3, [r7, #2]
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	4613      	mov	r3, r2
 800af78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af7c:	2100      	movs	r1, #0
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f872 	bl	800b068 <USBH_GetDescriptor>
 800af84:	4603      	mov	r3, r0
 800af86:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d109      	bne.n	800afa2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800af94:	887a      	ldrh	r2, [r7, #2]
 800af96:	4619      	mov	r1, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f929 	bl	800b1f0 <USBH_ParseDevDesc>
 800af9e:	4603      	mov	r3, r0
 800afa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af02      	add	r7, sp, #8
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	331c      	adds	r3, #28
 800afbc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800afbe:	887b      	ldrh	r3, [r7, #2]
 800afc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afc4:	d901      	bls.n	800afca <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e016      	b.n	800aff8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800afca:	887b      	ldrh	r3, [r7, #2]
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afd4:	2100      	movs	r1, #0
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f846 	bl	800b068 <USBH_GetDescriptor>
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d107      	bne.n	800aff6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800afe6:	887b      	ldrh	r3, [r7, #2]
 800afe8:	461a      	mov	r2, r3
 800afea:	68b9      	ldr	r1, [r7, #8]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f9af 	bl	800b350 <USBH_ParseCfgDesc>
 800aff2:	4603      	mov	r3, r0
 800aff4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af02      	add	r7, sp, #8
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	607a      	str	r2, [r7, #4]
 800b00a:	461a      	mov	r2, r3
 800b00c:	460b      	mov	r3, r1
 800b00e:	72fb      	strb	r3, [r7, #11]
 800b010:	4613      	mov	r3, r2
 800b012:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b014:	893b      	ldrh	r3, [r7, #8]
 800b016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b01a:	d802      	bhi.n	800b022 <USBH_Get_StringDesc+0x22>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b022:	2303      	movs	r3, #3
 800b024:	e01c      	b.n	800b060 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b026:	7afb      	ldrb	r3, [r7, #11]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b02e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b036:	893b      	ldrh	r3, [r7, #8]
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	460b      	mov	r3, r1
 800b03c:	2100      	movs	r1, #0
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f000 f812 	bl	800b068 <USBH_GetDescriptor>
 800b044:	4603      	mov	r3, r0
 800b046:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b048:	7dfb      	ldrb	r3, [r7, #23]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d107      	bne.n	800b05e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b054:	893a      	ldrh	r2, [r7, #8]
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 fb8d 	bl	800b778 <USBH_ParseStringDesc>
  }

  return status;
 800b05e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3718      	adds	r7, #24
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	607b      	str	r3, [r7, #4]
 800b072:	460b      	mov	r3, r1
 800b074:	72fb      	strb	r3, [r7, #11]
 800b076:	4613      	mov	r3, r2
 800b078:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	789b      	ldrb	r3, [r3, #2]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d11c      	bne.n	800b0bc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b082:	7afb      	ldrb	r3, [r7, #11]
 800b084:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2206      	movs	r2, #6
 800b092:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	893a      	ldrh	r2, [r7, #8]
 800b098:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b09a:	893b      	ldrh	r3, [r7, #8]
 800b09c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b0a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0a4:	d104      	bne.n	800b0b0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f240 4209 	movw	r2, #1033	@ 0x409
 800b0ac:	829a      	strh	r2, [r3, #20]
 800b0ae:	e002      	b.n	800b0b6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	8b3a      	ldrh	r2, [r7, #24]
 800b0ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b0bc:	8b3b      	ldrh	r3, [r7, #24]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	6879      	ldr	r1, [r7, #4]
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f000 fba5 	bl	800b812 <USBH_CtlReq>
 800b0c8:	4603      	mov	r3, r0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	460b      	mov	r3, r1
 800b0dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	789b      	ldrb	r3, [r3, #2]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d10f      	bne.n	800b106 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2205      	movs	r2, #5
 800b0f0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b0f2:	78fb      	ldrb	r3, [r7, #3]
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b106:	2200      	movs	r2, #0
 800b108:	2100      	movs	r1, #0
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fb81 	bl	800b812 <USBH_CtlReq>
 800b110:	4603      	mov	r3, r0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b082      	sub	sp, #8
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	460b      	mov	r3, r1
 800b124:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	789b      	ldrb	r3, [r3, #2]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d10e      	bne.n	800b14c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2209      	movs	r2, #9
 800b138:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	887a      	ldrh	r2, [r7, #2]
 800b13e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b14c:	2200      	movs	r2, #0
 800b14e:	2100      	movs	r1, #0
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 fb5e 	bl	800b812 <USBH_CtlReq>
 800b156:	4603      	mov	r3, r0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	460b      	mov	r3, r1
 800b16a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	789b      	ldrb	r3, [r3, #2]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d10f      	bne.n	800b194 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2203      	movs	r2, #3
 800b17e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b180:	78fb      	ldrb	r3, [r7, #3]
 800b182:	b29a      	uxth	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b194:	2200      	movs	r2, #0
 800b196:	2100      	movs	r1, #0
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fb3a 	bl	800b812 <USBH_CtlReq>
 800b19e:	4603      	mov	r3, r0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	789b      	ldrb	r3, [r3, #2]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d10f      	bne.n	800b1dc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2202      	movs	r2, #2
 800b1c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b1ce:	78fb      	ldrb	r3, [r7, #3]
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2100      	movs	r1, #0
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fb16 	bl	800b812 <USBH_CtlReq>
 800b1e6:	4603      	mov	r3, r0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b204:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b210:	2302      	movs	r3, #2
 800b212:	e094      	b.n	800b33e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	781a      	ldrb	r2, [r3, #0]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	785a      	ldrb	r2, [r3, #1]
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	3302      	adds	r3, #2
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	461a      	mov	r2, r3
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	3303      	adds	r3, #3
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	021b      	lsls	r3, r3, #8
 800b234:	b29b      	uxth	r3, r3
 800b236:	4313      	orrs	r3, r2
 800b238:	b29a      	uxth	r2, r3
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	791a      	ldrb	r2, [r3, #4]
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	795a      	ldrb	r2, [r3, #5]
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	799a      	ldrb	r2, [r3, #6]
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	79da      	ldrb	r2, [r3, #7]
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b264:	2b00      	cmp	r3, #0
 800b266:	d004      	beq.n	800b272 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d11b      	bne.n	800b2aa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	79db      	ldrb	r3, [r3, #7]
 800b276:	2b20      	cmp	r3, #32
 800b278:	dc0f      	bgt.n	800b29a <USBH_ParseDevDesc+0xaa>
 800b27a:	2b08      	cmp	r3, #8
 800b27c:	db0f      	blt.n	800b29e <USBH_ParseDevDesc+0xae>
 800b27e:	3b08      	subs	r3, #8
 800b280:	4a32      	ldr	r2, [pc, #200]	@ (800b34c <USBH_ParseDevDesc+0x15c>)
 800b282:	fa22 f303 	lsr.w	r3, r2, r3
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	bf14      	ite	ne
 800b28e:	2301      	movne	r3, #1
 800b290:	2300      	moveq	r3, #0
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b00      	cmp	r3, #0
 800b296:	d106      	bne.n	800b2a6 <USBH_ParseDevDesc+0xb6>
 800b298:	e001      	b.n	800b29e <USBH_ParseDevDesc+0xae>
 800b29a:	2b40      	cmp	r3, #64	@ 0x40
 800b29c:	d003      	beq.n	800b2a6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	71da      	strb	r2, [r3, #7]
        break;
 800b2a4:	e000      	b.n	800b2a8 <USBH_ParseDevDesc+0xb8>
        break;
 800b2a6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b2a8:	e00e      	b.n	800b2c8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d107      	bne.n	800b2c4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	79db      	ldrb	r3, [r3, #7]
 800b2b8:	2b08      	cmp	r3, #8
 800b2ba:	d005      	beq.n	800b2c8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	2208      	movs	r2, #8
 800b2c0:	71da      	strb	r2, [r3, #7]
 800b2c2:	e001      	b.n	800b2c8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b2c8:	88fb      	ldrh	r3, [r7, #6]
 800b2ca:	2b08      	cmp	r3, #8
 800b2cc:	d936      	bls.n	800b33c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	3309      	adds	r3, #9
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	330a      	adds	r3, #10
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	330b      	adds	r3, #11
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	021b      	lsls	r3, r3, #8
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	330c      	adds	r3, #12
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	461a      	mov	r2, r3
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	330d      	adds	r3, #13
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	021b      	lsls	r3, r3, #8
 800b312:	b29b      	uxth	r3, r3
 800b314:	4313      	orrs	r3, r2
 800b316:	b29a      	uxth	r2, r3
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	7b9a      	ldrb	r2, [r3, #14]
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	7bda      	ldrb	r2, [r3, #15]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	7c1a      	ldrb	r2, [r3, #16]
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	7c5a      	ldrb	r2, [r3, #17]
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	371c      	adds	r7, #28
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	01000101 	.word	0x01000101

0800b350 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08c      	sub	sp, #48	@ 0x30
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	4613      	mov	r3, r2
 800b35c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b364:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b372:	2300      	movs	r3, #0
 800b374:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d101      	bne.n	800b382 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b37e:	2302      	movs	r3, #2
 800b380:	e0da      	b.n	800b538 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2b09      	cmp	r3, #9
 800b38c:	d002      	beq.n	800b394 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b390:	2209      	movs	r2, #9
 800b392:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	781a      	ldrb	r2, [r3, #0]
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	785a      	ldrb	r2, [r3, #1]
 800b3a0:	6a3b      	ldr	r3, [r7, #32]
 800b3a2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	3302      	adds	r3, #2
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	3303      	adds	r3, #3
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	021b      	lsls	r3, r3, #8
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3be:	bf28      	it	cs
 800b3c0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	791a      	ldrb	r2, [r3, #4]
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	795a      	ldrb	r2, [r3, #5]
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	799a      	ldrb	r2, [r3, #6]
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	79da      	ldrb	r2, [r3, #7]
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	7a1a      	ldrb	r2, [r3, #8]
 800b3ee:	6a3b      	ldr	r3, [r7, #32]
 800b3f0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b3f2:	88fb      	ldrh	r3, [r7, #6]
 800b3f4:	2b09      	cmp	r3, #9
 800b3f6:	f240 809d 	bls.w	800b534 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800b3fa:	2309      	movs	r3, #9
 800b3fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b3fe:	2300      	movs	r3, #0
 800b400:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b402:	e081      	b.n	800b508 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b404:	f107 0316 	add.w	r3, r7, #22
 800b408:	4619      	mov	r1, r3
 800b40a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b40c:	f000 f9e7 	bl	800b7de <USBH_GetNextDesc>
 800b410:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b414:	785b      	ldrb	r3, [r3, #1]
 800b416:	2b04      	cmp	r3, #4
 800b418:	d176      	bne.n	800b508 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	2b09      	cmp	r3, #9
 800b420:	d002      	beq.n	800b428 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b424:	2209      	movs	r2, #9
 800b426:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b42c:	221a      	movs	r2, #26
 800b42e:	fb02 f303 	mul.w	r3, r2, r3
 800b432:	3308      	adds	r3, #8
 800b434:	6a3a      	ldr	r2, [r7, #32]
 800b436:	4413      	add	r3, r2
 800b438:	3302      	adds	r3, #2
 800b43a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b43c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b43e:	69f8      	ldr	r0, [r7, #28]
 800b440:	f000 f87e 	bl	800b540 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b444:	2300      	movs	r3, #0
 800b446:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b44e:	e043      	b.n	800b4d8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b450:	f107 0316 	add.w	r3, r7, #22
 800b454:	4619      	mov	r1, r3
 800b456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b458:	f000 f9c1 	bl	800b7de <USBH_GetNextDesc>
 800b45c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b460:	785b      	ldrb	r3, [r3, #1]
 800b462:	2b05      	cmp	r3, #5
 800b464:	d138      	bne.n	800b4d8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	795b      	ldrb	r3, [r3, #5]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d113      	bne.n	800b496 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b472:	2b02      	cmp	r3, #2
 800b474:	d003      	beq.n	800b47e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	799b      	ldrb	r3, [r3, #6]
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d10b      	bne.n	800b496 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	79db      	ldrb	r3, [r3, #7]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10b      	bne.n	800b49e <USBH_ParseCfgDesc+0x14e>
 800b486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b09      	cmp	r3, #9
 800b48c:	d007      	beq.n	800b49e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b490:	2209      	movs	r2, #9
 800b492:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b494:	e003      	b.n	800b49e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b498:	2207      	movs	r2, #7
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	e000      	b.n	800b4a0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b49e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4a4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b4a8:	3201      	adds	r2, #1
 800b4aa:	00d2      	lsls	r2, r2, #3
 800b4ac:	211a      	movs	r1, #26
 800b4ae:	fb01 f303 	mul.w	r3, r1, r3
 800b4b2:	4413      	add	r3, r2
 800b4b4:	3308      	adds	r3, #8
 800b4b6:	6a3a      	ldr	r2, [r7, #32]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b4be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4c0:	69b9      	ldr	r1, [r7, #24]
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 f870 	bl	800b5a8 <USBH_ParseEPDesc>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b4ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	791b      	ldrb	r3, [r3, #4]
 800b4dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d204      	bcs.n	800b4ee <USBH_ParseCfgDesc+0x19e>
 800b4e4:	6a3b      	ldr	r3, [r7, #32]
 800b4e6:	885a      	ldrh	r2, [r3, #2]
 800b4e8:	8afb      	ldrh	r3, [r7, #22]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d8b0      	bhi.n	800b450 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	791b      	ldrb	r3, [r3, #4]
 800b4f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d201      	bcs.n	800b4fe <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e01c      	b.n	800b538 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800b4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b502:	3301      	adds	r3, #1
 800b504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d805      	bhi.n	800b51c <USBH_ParseCfgDesc+0x1cc>
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	885a      	ldrh	r2, [r3, #2]
 800b514:	8afb      	ldrh	r3, [r7, #22]
 800b516:	429a      	cmp	r2, r3
 800b518:	f63f af74 	bhi.w	800b404 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b51c:	6a3b      	ldr	r3, [r7, #32]
 800b51e:	791b      	ldrb	r3, [r3, #4]
 800b520:	2b02      	cmp	r3, #2
 800b522:	bf28      	it	cs
 800b524:	2302      	movcs	r3, #2
 800b526:	b2db      	uxtb	r3, r3
 800b528:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d201      	bcs.n	800b534 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800b530:	2303      	movs	r3, #3
 800b532:	e001      	b.n	800b538 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800b534:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3730      	adds	r7, #48	@ 0x30
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	781a      	ldrb	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	785a      	ldrb	r2, [r3, #1]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	789a      	ldrb	r2, [r3, #2]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	78da      	ldrb	r2, [r3, #3]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	3304      	adds	r3, #4
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	2b02      	cmp	r3, #2
 800b572:	bf28      	it	cs
 800b574:	2302      	movcs	r3, #2
 800b576:	b2da      	uxtb	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	795a      	ldrb	r2, [r3, #5]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	799a      	ldrb	r2, [r3, #6]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	79da      	ldrb	r2, [r3, #7]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	7a1a      	ldrb	r2, [r3, #8]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	721a      	strb	r2, [r3, #8]
}
 800b59c:	bf00      	nop
 800b59e:	370c      	adds	r7, #12
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	781a      	ldrb	r2, [r3, #0]
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	785a      	ldrb	r2, [r3, #1]
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	789a      	ldrb	r2, [r3, #2]
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	78da      	ldrb	r2, [r3, #3]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	461a      	mov	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3305      	adds	r3, #5
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	021b      	lsls	r3, r3, #8
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	799a      	ldrb	r2, [r3, #6]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	889b      	ldrh	r3, [r3, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d009      	beq.n	800b616 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b60a:	d804      	bhi.n	800b616 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b614:	d901      	bls.n	800b61a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b616:	2303      	movs	r3, #3
 800b618:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b620:	2b00      	cmp	r3, #0
 800b622:	d136      	bne.n	800b692 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	78db      	ldrb	r3, [r3, #3]
 800b628:	f003 0303 	and.w	r3, r3, #3
 800b62c:	2b02      	cmp	r3, #2
 800b62e:	d108      	bne.n	800b642 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	889b      	ldrh	r3, [r3, #4]
 800b634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b638:	f240 8097 	bls.w	800b76a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b63c:	2303      	movs	r3, #3
 800b63e:	75fb      	strb	r3, [r7, #23]
 800b640:	e093      	b.n	800b76a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	78db      	ldrb	r3, [r3, #3]
 800b646:	f003 0303 	and.w	r3, r3, #3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d107      	bne.n	800b65e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	889b      	ldrh	r3, [r3, #4]
 800b652:	2b40      	cmp	r3, #64	@ 0x40
 800b654:	f240 8089 	bls.w	800b76a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b658:	2303      	movs	r3, #3
 800b65a:	75fb      	strb	r3, [r7, #23]
 800b65c:	e085      	b.n	800b76a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	78db      	ldrb	r3, [r3, #3]
 800b662:	f003 0303 	and.w	r3, r3, #3
 800b666:	2b01      	cmp	r3, #1
 800b668:	d005      	beq.n	800b676 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	78db      	ldrb	r3, [r3, #3]
 800b66e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b672:	2b03      	cmp	r3, #3
 800b674:	d10a      	bne.n	800b68c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	799b      	ldrb	r3, [r3, #6]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <USBH_ParseEPDesc+0xde>
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	799b      	ldrb	r3, [r3, #6]
 800b682:	2b10      	cmp	r3, #16
 800b684:	d970      	bls.n	800b768 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b686:	2303      	movs	r3, #3
 800b688:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b68a:	e06d      	b.n	800b768 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b68c:	2303      	movs	r3, #3
 800b68e:	75fb      	strb	r3, [r7, #23]
 800b690:	e06b      	b.n	800b76a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d13c      	bne.n	800b716 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	78db      	ldrb	r3, [r3, #3]
 800b6a0:	f003 0303 	and.w	r3, r3, #3
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d005      	beq.n	800b6b4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	78db      	ldrb	r3, [r3, #3]
 800b6ac:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d106      	bne.n	800b6c2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	889b      	ldrh	r3, [r3, #4]
 800b6b8:	2b40      	cmp	r3, #64	@ 0x40
 800b6ba:	d956      	bls.n	800b76a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b6c0:	e053      	b.n	800b76a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	78db      	ldrb	r3, [r3, #3]
 800b6c6:	f003 0303 	and.w	r3, r3, #3
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d10e      	bne.n	800b6ec <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	799b      	ldrb	r3, [r3, #6]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d007      	beq.n	800b6e6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b6da:	2b10      	cmp	r3, #16
 800b6dc:	d803      	bhi.n	800b6e6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b6e2:	2b40      	cmp	r3, #64	@ 0x40
 800b6e4:	d941      	bls.n	800b76a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	75fb      	strb	r3, [r7, #23]
 800b6ea:	e03e      	b.n	800b76a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	78db      	ldrb	r3, [r3, #3]
 800b6f0:	f003 0303 	and.w	r3, r3, #3
 800b6f4:	2b03      	cmp	r3, #3
 800b6f6:	d10b      	bne.n	800b710 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	799b      	ldrb	r3, [r3, #6]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d004      	beq.n	800b70a <USBH_ParseEPDesc+0x162>
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	889b      	ldrh	r3, [r3, #4]
 800b704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b708:	d32f      	bcc.n	800b76a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b70a:	2303      	movs	r3, #3
 800b70c:	75fb      	strb	r3, [r7, #23]
 800b70e:	e02c      	b.n	800b76a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b710:	2303      	movs	r3, #3
 800b712:	75fb      	strb	r3, [r7, #23]
 800b714:	e029      	b.n	800b76a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d120      	bne.n	800b762 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	78db      	ldrb	r3, [r3, #3]
 800b724:	f003 0303 	and.w	r3, r3, #3
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d106      	bne.n	800b73a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	889b      	ldrh	r3, [r3, #4]
 800b730:	2b08      	cmp	r3, #8
 800b732:	d01a      	beq.n	800b76a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b734:	2303      	movs	r3, #3
 800b736:	75fb      	strb	r3, [r7, #23]
 800b738:	e017      	b.n	800b76a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	78db      	ldrb	r3, [r3, #3]
 800b73e:	f003 0303 	and.w	r3, r3, #3
 800b742:	2b03      	cmp	r3, #3
 800b744:	d10a      	bne.n	800b75c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	799b      	ldrb	r3, [r3, #6]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <USBH_ParseEPDesc+0x1ae>
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	889b      	ldrh	r3, [r3, #4]
 800b752:	2b08      	cmp	r3, #8
 800b754:	d909      	bls.n	800b76a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b756:	2303      	movs	r3, #3
 800b758:	75fb      	strb	r3, [r7, #23]
 800b75a:	e006      	b.n	800b76a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b75c:	2303      	movs	r3, #3
 800b75e:	75fb      	strb	r3, [r7, #23]
 800b760:	e003      	b.n	800b76a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b762:	2303      	movs	r3, #3
 800b764:	75fb      	strb	r3, [r7, #23]
 800b766:	e000      	b.n	800b76a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b768:	bf00      	nop
  }

  return status;
 800b76a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	371c      	adds	r7, #28
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b778:	b480      	push	{r7}
 800b77a:	b087      	sub	sp, #28
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	4613      	mov	r3, r2
 800b784:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	3301      	adds	r3, #1
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	2b03      	cmp	r3, #3
 800b78e:	d120      	bne.n	800b7d2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	1e9a      	subs	r2, r3, #2
 800b796:	88fb      	ldrh	r3, [r7, #6]
 800b798:	4293      	cmp	r3, r2
 800b79a:	bf28      	it	cs
 800b79c:	4613      	movcs	r3, r2
 800b79e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3302      	adds	r3, #2
 800b7a4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	82fb      	strh	r3, [r7, #22]
 800b7aa:	e00b      	b.n	800b7c4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b7ac:	8afb      	ldrh	r3, [r7, #22]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	781a      	ldrb	r2, [r3, #0]
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b7be:	8afb      	ldrh	r3, [r7, #22]
 800b7c0:	3302      	adds	r3, #2
 800b7c2:	82fb      	strh	r3, [r7, #22]
 800b7c4:	8afa      	ldrh	r2, [r7, #22]
 800b7c6:	8abb      	ldrh	r3, [r7, #20]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d3ef      	bcc.n	800b7ac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	701a      	strb	r2, [r3, #0]
  }
}
 800b7d2:	bf00      	nop
 800b7d4:	371c      	adds	r7, #28
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b085      	sub	sp, #20
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	881b      	ldrh	r3, [r3, #0]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	7812      	ldrb	r2, [r2, #0]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b804:	68fb      	ldr	r3, [r7, #12]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3714      	adds	r7, #20
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b086      	sub	sp, #24
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	4613      	mov	r3, r2
 800b81e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b820:	2301      	movs	r3, #1
 800b822:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	789b      	ldrb	r3, [r3, #2]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d002      	beq.n	800b832 <USBH_CtlReq+0x20>
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d00f      	beq.n	800b850 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b830:	e027      	b.n	800b882 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	88fa      	ldrh	r2, [r7, #6]
 800b83c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2201      	movs	r2, #1
 800b842:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2202      	movs	r2, #2
 800b848:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b84a:	2301      	movs	r3, #1
 800b84c:	75fb      	strb	r3, [r7, #23]
      break;
 800b84e:	e018      	b.n	800b882 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 f81b 	bl	800b88c <USBH_HandleControl>
 800b856:	4603      	mov	r3, r0
 800b858:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b85a:	7dfb      	ldrb	r3, [r7, #23]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <USBH_CtlReq+0x54>
 800b860:	7dfb      	ldrb	r3, [r7, #23]
 800b862:	2b03      	cmp	r3, #3
 800b864:	d106      	bne.n	800b874 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2201      	movs	r2, #1
 800b86a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	761a      	strb	r2, [r3, #24]
      break;
 800b872:	e005      	b.n	800b880 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b874:	7dfb      	ldrb	r3, [r7, #23]
 800b876:	2b02      	cmp	r3, #2
 800b878:	d102      	bne.n	800b880 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2201      	movs	r2, #1
 800b87e:	709a      	strb	r2, [r3, #2]
      break;
 800b880:	bf00      	nop
  }
  return status;
 800b882:	7dfb      	ldrb	r3, [r7, #23]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3718      	adds	r7, #24
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af02      	add	r7, sp, #8
 800b892:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b894:	2301      	movs	r3, #1
 800b896:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b898:	2300      	movs	r3, #0
 800b89a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	7e1b      	ldrb	r3, [r3, #24]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	2b0a      	cmp	r3, #10
 800b8a4:	f200 8156 	bhi.w	800bb54 <USBH_HandleControl+0x2c8>
 800b8a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b0 <USBH_HandleControl+0x24>)
 800b8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ae:	bf00      	nop
 800b8b0:	0800b8dd 	.word	0x0800b8dd
 800b8b4:	0800b8f7 	.word	0x0800b8f7
 800b8b8:	0800b961 	.word	0x0800b961
 800b8bc:	0800b987 	.word	0x0800b987
 800b8c0:	0800b9bf 	.word	0x0800b9bf
 800b8c4:	0800b9e9 	.word	0x0800b9e9
 800b8c8:	0800ba3b 	.word	0x0800ba3b
 800b8cc:	0800ba5d 	.word	0x0800ba5d
 800b8d0:	0800ba99 	.word	0x0800ba99
 800b8d4:	0800babf 	.word	0x0800babf
 800b8d8:	0800bafd 	.word	0x0800bafd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f103 0110 	add.w	r1, r3, #16
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	795b      	ldrb	r3, [r3, #5]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 f943 	bl	800bb74 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	761a      	strb	r2, [r3, #24]
      break;
 800b8f4:	e139      	b.n	800bb6a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	795b      	ldrb	r3, [r3, #5]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fcc5 	bl	800c28c <USBH_LL_GetURBState>
 800b902:	4603      	mov	r3, r0
 800b904:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b906:	7bbb      	ldrb	r3, [r7, #14]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d11e      	bne.n	800b94a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	7c1b      	ldrb	r3, [r3, #16]
 800b910:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b914:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	8adb      	ldrh	r3, [r3, #22]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00a      	beq.n	800b934 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b91e:	7b7b      	ldrb	r3, [r7, #13]
 800b920:	2b80      	cmp	r3, #128	@ 0x80
 800b922:	d103      	bne.n	800b92c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2203      	movs	r2, #3
 800b928:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b92a:	e115      	b.n	800bb58 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2205      	movs	r2, #5
 800b930:	761a      	strb	r2, [r3, #24]
      break;
 800b932:	e111      	b.n	800bb58 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b934:	7b7b      	ldrb	r3, [r7, #13]
 800b936:	2b80      	cmp	r3, #128	@ 0x80
 800b938:	d103      	bne.n	800b942 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2209      	movs	r2, #9
 800b93e:	761a      	strb	r2, [r3, #24]
      break;
 800b940:	e10a      	b.n	800bb58 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2207      	movs	r2, #7
 800b946:	761a      	strb	r2, [r3, #24]
      break;
 800b948:	e106      	b.n	800bb58 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b94a:	7bbb      	ldrb	r3, [r7, #14]
 800b94c:	2b04      	cmp	r3, #4
 800b94e:	d003      	beq.n	800b958 <USBH_HandleControl+0xcc>
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	2b02      	cmp	r3, #2
 800b954:	f040 8100 	bne.w	800bb58 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	220b      	movs	r2, #11
 800b95c:	761a      	strb	r2, [r3, #24]
      break;
 800b95e:	e0fb      	b.n	800bb58 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b966:	b29a      	uxth	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6899      	ldr	r1, [r3, #8]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	899a      	ldrh	r2, [r3, #12]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	791b      	ldrb	r3, [r3, #4]
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f93a 	bl	800bbf2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2204      	movs	r2, #4
 800b982:	761a      	strb	r2, [r3, #24]
      break;
 800b984:	e0f1      	b.n	800bb6a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	791b      	ldrb	r3, [r3, #4]
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fc7d 	bl	800c28c <USBH_LL_GetURBState>
 800b992:	4603      	mov	r3, r0
 800b994:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b996:	7bbb      	ldrb	r3, [r7, #14]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d102      	bne.n	800b9a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2209      	movs	r2, #9
 800b9a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b9a2:	7bbb      	ldrb	r3, [r7, #14]
 800b9a4:	2b05      	cmp	r3, #5
 800b9a6:	d102      	bne.n	800b9ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b9ac:	e0d6      	b.n	800bb5c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
 800b9b0:	2b04      	cmp	r3, #4
 800b9b2:	f040 80d3 	bne.w	800bb5c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	220b      	movs	r2, #11
 800b9ba:	761a      	strb	r2, [r3, #24]
      break;
 800b9bc:	e0ce      	b.n	800bb5c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6899      	ldr	r1, [r3, #8]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	899a      	ldrh	r2, [r3, #12]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	795b      	ldrb	r3, [r3, #5]
 800b9ca:	2001      	movs	r0, #1
 800b9cc:	9000      	str	r0, [sp, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f8ea 	bl	800bba8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2206      	movs	r2, #6
 800b9e4:	761a      	strb	r2, [r3, #24]
      break;
 800b9e6:	e0c0      	b.n	800bb6a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	795b      	ldrb	r3, [r3, #5]
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fc4c 	bl	800c28c <USBH_LL_GetURBState>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d103      	bne.n	800ba06 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2207      	movs	r2, #7
 800ba02:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ba04:	e0ac      	b.n	800bb60 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ba06:	7bbb      	ldrb	r3, [r7, #14]
 800ba08:	2b05      	cmp	r3, #5
 800ba0a:	d105      	bne.n	800ba18 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	220c      	movs	r2, #12
 800ba10:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ba12:	2303      	movs	r3, #3
 800ba14:	73fb      	strb	r3, [r7, #15]
      break;
 800ba16:	e0a3      	b.n	800bb60 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ba18:	7bbb      	ldrb	r3, [r7, #14]
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d103      	bne.n	800ba26 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2205      	movs	r2, #5
 800ba22:	761a      	strb	r2, [r3, #24]
      break;
 800ba24:	e09c      	b.n	800bb60 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ba26:	7bbb      	ldrb	r3, [r7, #14]
 800ba28:	2b04      	cmp	r3, #4
 800ba2a:	f040 8099 	bne.w	800bb60 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	220b      	movs	r2, #11
 800ba32:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ba34:	2302      	movs	r3, #2
 800ba36:	73fb      	strb	r3, [r7, #15]
      break;
 800ba38:	e092      	b.n	800bb60 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	791b      	ldrb	r3, [r3, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	2100      	movs	r1, #0
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f8d5 	bl	800bbf2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2208      	movs	r2, #8
 800ba58:	761a      	strb	r2, [r3, #24]

      break;
 800ba5a:	e086      	b.n	800bb6a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	791b      	ldrb	r3, [r3, #4]
 800ba60:	4619      	mov	r1, r3
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 fc12 	bl	800c28c <USBH_LL_GetURBState>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d105      	bne.n	800ba7e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	220d      	movs	r2, #13
 800ba76:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ba7c:	e072      	b.n	800bb64 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
 800ba80:	2b04      	cmp	r3, #4
 800ba82:	d103      	bne.n	800ba8c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	220b      	movs	r2, #11
 800ba88:	761a      	strb	r2, [r3, #24]
      break;
 800ba8a:	e06b      	b.n	800bb64 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	2b05      	cmp	r3, #5
 800ba90:	d168      	bne.n	800bb64 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ba92:	2303      	movs	r3, #3
 800ba94:	73fb      	strb	r3, [r7, #15]
      break;
 800ba96:	e065      	b.n	800bb64 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	795b      	ldrb	r3, [r3, #5]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	9200      	str	r2, [sp, #0]
 800baa0:	2200      	movs	r2, #0
 800baa2:	2100      	movs	r1, #0
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f87f 	bl	800bba8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bab0:	b29a      	uxth	r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	220a      	movs	r2, #10
 800baba:	761a      	strb	r2, [r3, #24]
      break;
 800babc:	e055      	b.n	800bb6a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	795b      	ldrb	r3, [r3, #5]
 800bac2:	4619      	mov	r1, r3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fbe1 	bl	800c28c <USBH_LL_GetURBState>
 800baca:	4603      	mov	r3, r0
 800bacc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bace:	7bbb      	ldrb	r3, [r7, #14]
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d105      	bne.n	800bae0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	220d      	movs	r2, #13
 800badc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bade:	e043      	b.n	800bb68 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d103      	bne.n	800baee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2209      	movs	r2, #9
 800baea:	761a      	strb	r2, [r3, #24]
      break;
 800baec:	e03c      	b.n	800bb68 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800baee:	7bbb      	ldrb	r3, [r7, #14]
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	d139      	bne.n	800bb68 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	220b      	movs	r2, #11
 800baf8:	761a      	strb	r2, [r3, #24]
      break;
 800bafa:	e035      	b.n	800bb68 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	7e5b      	ldrb	r3, [r3, #25]
 800bb00:	3301      	adds	r3, #1
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	765a      	strb	r2, [r3, #25]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	7e5b      	ldrb	r3, [r3, #25]
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d806      	bhi.n	800bb1e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bb1c:	e025      	b.n	800bb6a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bb24:	2106      	movs	r1, #6
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	795b      	ldrb	r3, [r3, #5]
 800bb34:	4619      	mov	r1, r3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f90c 	bl	800bd54 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	791b      	ldrb	r3, [r3, #4]
 800bb40:	4619      	mov	r1, r3
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f906 	bl	800bd54 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bb4e:	2302      	movs	r3, #2
 800bb50:	73fb      	strb	r3, [r7, #15]
      break;
 800bb52:	e00a      	b.n	800bb6a <USBH_HandleControl+0x2de>

    default:
      break;
 800bb54:	bf00      	nop
 800bb56:	e008      	b.n	800bb6a <USBH_HandleControl+0x2de>
      break;
 800bb58:	bf00      	nop
 800bb5a:	e006      	b.n	800bb6a <USBH_HandleControl+0x2de>
      break;
 800bb5c:	bf00      	nop
 800bb5e:	e004      	b.n	800bb6a <USBH_HandleControl+0x2de>
      break;
 800bb60:	bf00      	nop
 800bb62:	e002      	b.n	800bb6a <USBH_HandleControl+0x2de>
      break;
 800bb64:	bf00      	nop
 800bb66:	e000      	b.n	800bb6a <USBH_HandleControl+0x2de>
      break;
 800bb68:	bf00      	nop
  }

  return status;
 800bb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b088      	sub	sp, #32
 800bb78:	af04      	add	r7, sp, #16
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bb82:	79f9      	ldrb	r1, [r7, #7]
 800bb84:	2300      	movs	r3, #0
 800bb86:	9303      	str	r3, [sp, #12]
 800bb88:	2308      	movs	r3, #8
 800bb8a:	9302      	str	r3, [sp, #8]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	9301      	str	r3, [sp, #4]
 800bb90:	2300      	movs	r3, #0
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	2300      	movs	r3, #0
 800bb96:	2200      	movs	r2, #0
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f000 fb46 	bl	800c22a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b088      	sub	sp, #32
 800bbac:	af04      	add	r7, sp, #16
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	4611      	mov	r1, r2
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	80fb      	strh	r3, [r7, #6]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bbcc:	7979      	ldrb	r1, [r7, #5]
 800bbce:	7e3b      	ldrb	r3, [r7, #24]
 800bbd0:	9303      	str	r3, [sp, #12]
 800bbd2:	88fb      	ldrh	r3, [r7, #6]
 800bbd4:	9302      	str	r3, [sp, #8]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	2301      	movs	r3, #1
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f000 fb21 	bl	800c22a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b088      	sub	sp, #32
 800bbf6:	af04      	add	r7, sp, #16
 800bbf8:	60f8      	str	r0, [r7, #12]
 800bbfa:	60b9      	str	r1, [r7, #8]
 800bbfc:	4611      	mov	r1, r2
 800bbfe:	461a      	mov	r2, r3
 800bc00:	460b      	mov	r3, r1
 800bc02:	80fb      	strh	r3, [r7, #6]
 800bc04:	4613      	mov	r3, r2
 800bc06:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bc08:	7979      	ldrb	r1, [r7, #5]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	9303      	str	r3, [sp, #12]
 800bc0e:	88fb      	ldrh	r3, [r7, #6]
 800bc10:	9302      	str	r3, [sp, #8]
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	2301      	movs	r3, #1
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f000 fb03 	bl	800c22a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bc24:	2300      	movs	r3, #0

}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b088      	sub	sp, #32
 800bc32:	af04      	add	r7, sp, #16
 800bc34:	60f8      	str	r0, [r7, #12]
 800bc36:	60b9      	str	r1, [r7, #8]
 800bc38:	4611      	mov	r1, r2
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	80fb      	strh	r3, [r7, #6]
 800bc40:	4613      	mov	r3, r2
 800bc42:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bc52:	7979      	ldrb	r1, [r7, #5]
 800bc54:	7e3b      	ldrb	r3, [r7, #24]
 800bc56:	9303      	str	r3, [sp, #12]
 800bc58:	88fb      	ldrh	r3, [r7, #6]
 800bc5a:	9302      	str	r3, [sp, #8]
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	9301      	str	r3, [sp, #4]
 800bc60:	2301      	movs	r3, #1
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	2302      	movs	r3, #2
 800bc66:	2200      	movs	r2, #0
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f000 fade 	bl	800c22a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b088      	sub	sp, #32
 800bc7c:	af04      	add	r7, sp, #16
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	4611      	mov	r1, r2
 800bc84:	461a      	mov	r2, r3
 800bc86:	460b      	mov	r3, r1
 800bc88:	80fb      	strh	r3, [r7, #6]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bc8e:	7979      	ldrb	r1, [r7, #5]
 800bc90:	2300      	movs	r3, #0
 800bc92:	9303      	str	r3, [sp, #12]
 800bc94:	88fb      	ldrh	r3, [r7, #6]
 800bc96:	9302      	str	r3, [sp, #8]
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	2302      	movs	r3, #2
 800bca2:	2201      	movs	r2, #1
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f000 fac0 	bl	800c22a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af04      	add	r7, sp, #16
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	4608      	mov	r0, r1
 800bcbe:	4611      	mov	r1, r2
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	70fb      	strb	r3, [r7, #3]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70bb      	strb	r3, [r7, #2]
 800bcca:	4613      	mov	r3, r2
 800bccc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bcce:	7878      	ldrb	r0, [r7, #1]
 800bcd0:	78ba      	ldrb	r2, [r7, #2]
 800bcd2:	78f9      	ldrb	r1, [r7, #3]
 800bcd4:	8b3b      	ldrh	r3, [r7, #24]
 800bcd6:	9302      	str	r3, [sp, #8]
 800bcd8:	7d3b      	ldrb	r3, [r7, #20]
 800bcda:	9301      	str	r3, [sp, #4]
 800bcdc:	7c3b      	ldrb	r3, [r7, #16]
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	4603      	mov	r3, r0
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fa53 	bl	800c18e <USBH_LL_OpenPipe>

  return USBH_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b082      	sub	sp, #8
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bcfe:	78fb      	ldrb	r3, [r7, #3]
 800bd00:	4619      	mov	r1, r3
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fa72 	bl	800c1ec <USBH_LL_ClosePipe>

  return USBH_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b084      	sub	sp, #16
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f836 	bl	800bd90 <USBH_GetFreePipe>
 800bd24:	4603      	mov	r3, r0
 800bd26:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bd28:	89fb      	ldrh	r3, [r7, #14]
 800bd2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d00a      	beq.n	800bd48 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bd32:	78fa      	ldrb	r2, [r7, #3]
 800bd34:	89fb      	ldrh	r3, [r7, #14]
 800bd36:	f003 030f 	and.w	r3, r3, #15
 800bd3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bd3e:	6879      	ldr	r1, [r7, #4]
 800bd40:	33e0      	adds	r3, #224	@ 0xe0
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	440b      	add	r3, r1
 800bd46:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bd48:	89fb      	ldrh	r3, [r7, #14]
 800bd4a:	b2db      	uxtb	r3, r3
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bd60:	78fb      	ldrb	r3, [r7, #3]
 800bd62:	2b0f      	cmp	r3, #15
 800bd64:	d80d      	bhi.n	800bd82 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bd66:	78fb      	ldrb	r3, [r7, #3]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	33e0      	adds	r3, #224	@ 0xe0
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	78fb      	ldrb	r3, [r7, #3]
 800bd74:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bd78:	6879      	ldr	r1, [r7, #4]
 800bd7a:	33e0      	adds	r3, #224	@ 0xe0
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	440b      	add	r3, r1
 800bd80:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73fb      	strb	r3, [r7, #15]
 800bda0:	e00f      	b.n	800bdc2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bda2:	7bfb      	ldrb	r3, [r7, #15]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	33e0      	adds	r3, #224	@ 0xe0
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4413      	add	r3, r2
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d102      	bne.n	800bdbc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bdb6:	7bfb      	ldrb	r3, [r7, #15]
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	e007      	b.n	800bdcc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	73fb      	strb	r3, [r7, #15]
 800bdc2:	7bfb      	ldrb	r3, [r7, #15]
 800bdc4:	2b0f      	cmp	r3, #15
 800bdc6:	d9ec      	bls.n	800bda2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bdc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3714      	adds	r7, #20
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bddc:	2201      	movs	r2, #1
 800bdde:	490e      	ldr	r1, [pc, #56]	@ (800be18 <MX_USB_HOST_Init+0x40>)
 800bde0:	480e      	ldr	r0, [pc, #56]	@ (800be1c <MX_USB_HOST_Init+0x44>)
 800bde2:	f7fe fb15 	bl	800a410 <USBH_Init>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bdec:	f7f5 fb4c 	bl	8001488 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bdf0:	490b      	ldr	r1, [pc, #44]	@ (800be20 <MX_USB_HOST_Init+0x48>)
 800bdf2:	480a      	ldr	r0, [pc, #40]	@ (800be1c <MX_USB_HOST_Init+0x44>)
 800bdf4:	f7fe fbb9 	bl	800a56a <USBH_RegisterClass>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d001      	beq.n	800be02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bdfe:	f7f5 fb43 	bl	8001488 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800be02:	4806      	ldr	r0, [pc, #24]	@ (800be1c <MX_USB_HOST_Init+0x44>)
 800be04:	f7fe fc3d 	bl	800a682 <USBH_Start>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800be0e:	f7f5 fb3b 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800be12:	bf00      	nop
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	0800be39 	.word	0x0800be39
 800be1c:	200002ac 	.word	0x200002ac
 800be20:	2000000c 	.word	0x2000000c

0800be24 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800be28:	4802      	ldr	r0, [pc, #8]	@ (800be34 <MX_USB_HOST_Process+0x10>)
 800be2a:	f7fe fc3b 	bl	800a6a4 <USBH_Process>
}
 800be2e:	bf00      	nop
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	200002ac 	.word	0x200002ac

0800be38 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	3b01      	subs	r3, #1
 800be48:	2b04      	cmp	r3, #4
 800be4a:	d819      	bhi.n	800be80 <USBH_UserProcess+0x48>
 800be4c:	a201      	add	r2, pc, #4	@ (adr r2, 800be54 <USBH_UserProcess+0x1c>)
 800be4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be52:	bf00      	nop
 800be54:	0800be81 	.word	0x0800be81
 800be58:	0800be71 	.word	0x0800be71
 800be5c:	0800be81 	.word	0x0800be81
 800be60:	0800be79 	.word	0x0800be79
 800be64:	0800be69 	.word	0x0800be69
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800be68:	4b09      	ldr	r3, [pc, #36]	@ (800be90 <USBH_UserProcess+0x58>)
 800be6a:	2203      	movs	r2, #3
 800be6c:	701a      	strb	r2, [r3, #0]
  break;
 800be6e:	e008      	b.n	800be82 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800be70:	4b07      	ldr	r3, [pc, #28]	@ (800be90 <USBH_UserProcess+0x58>)
 800be72:	2202      	movs	r2, #2
 800be74:	701a      	strb	r2, [r3, #0]
  break;
 800be76:	e004      	b.n	800be82 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800be78:	4b05      	ldr	r3, [pc, #20]	@ (800be90 <USBH_UserProcess+0x58>)
 800be7a:	2201      	movs	r2, #1
 800be7c:	701a      	strb	r2, [r3, #0]
  break;
 800be7e:	e000      	b.n	800be82 <USBH_UserProcess+0x4a>

  default:
  break;
 800be80:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800be82:	bf00      	nop
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	20000684 	.word	0x20000684

0800be94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08a      	sub	sp, #40	@ 0x28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be9c:	f107 0314 	add.w	r3, r7, #20
 800bea0:	2200      	movs	r2, #0
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	605a      	str	r2, [r3, #4]
 800bea6:	609a      	str	r2, [r3, #8]
 800bea8:	60da      	str	r2, [r3, #12]
 800beaa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800beb4:	d147      	bne.n	800bf46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800beb6:	2300      	movs	r3, #0
 800beb8:	613b      	str	r3, [r7, #16]
 800beba:	4b25      	ldr	r3, [pc, #148]	@ (800bf50 <HAL_HCD_MspInit+0xbc>)
 800bebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bebe:	4a24      	ldr	r2, [pc, #144]	@ (800bf50 <HAL_HCD_MspInit+0xbc>)
 800bec0:	f043 0301 	orr.w	r3, r3, #1
 800bec4:	6313      	str	r3, [r2, #48]	@ 0x30
 800bec6:	4b22      	ldr	r3, [pc, #136]	@ (800bf50 <HAL_HCD_MspInit+0xbc>)
 800bec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	613b      	str	r3, [r7, #16]
 800bed0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bed8:	2300      	movs	r3, #0
 800beda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bee0:	f107 0314 	add.w	r3, r7, #20
 800bee4:	4619      	mov	r1, r3
 800bee6:	481b      	ldr	r0, [pc, #108]	@ (800bf54 <HAL_HCD_MspInit+0xc0>)
 800bee8:	f7f6 fb14 	bl	8002514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800beec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bef2:	2302      	movs	r3, #2
 800bef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bef6:	2300      	movs	r3, #0
 800bef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800befa:	2300      	movs	r3, #0
 800befc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800befe:	230a      	movs	r3, #10
 800bf00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf02:	f107 0314 	add.w	r3, r7, #20
 800bf06:	4619      	mov	r1, r3
 800bf08:	4812      	ldr	r0, [pc, #72]	@ (800bf54 <HAL_HCD_MspInit+0xc0>)
 800bf0a:	f7f6 fb03 	bl	8002514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf0e:	4b10      	ldr	r3, [pc, #64]	@ (800bf50 <HAL_HCD_MspInit+0xbc>)
 800bf10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf12:	4a0f      	ldr	r2, [pc, #60]	@ (800bf50 <HAL_HCD_MspInit+0xbc>)
 800bf14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf18:	6353      	str	r3, [r2, #52]	@ 0x34
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60fb      	str	r3, [r7, #12]
 800bf1e:	4b0c      	ldr	r3, [pc, #48]	@ (800bf50 <HAL_HCD_MspInit+0xbc>)
 800bf20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf22:	4a0b      	ldr	r2, [pc, #44]	@ (800bf50 <HAL_HCD_MspInit+0xbc>)
 800bf24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bf28:	6453      	str	r3, [r2, #68]	@ 0x44
 800bf2a:	4b09      	ldr	r3, [pc, #36]	@ (800bf50 <HAL_HCD_MspInit+0xbc>)
 800bf2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf32:	60fb      	str	r3, [r7, #12]
 800bf34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bf36:	2200      	movs	r2, #0
 800bf38:	2100      	movs	r1, #0
 800bf3a:	2043      	movs	r0, #67	@ 0x43
 800bf3c:	f7f6 fa21 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf40:	2043      	movs	r0, #67	@ 0x43
 800bf42:	f7f6 fa3a 	bl	80023ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf46:	bf00      	nop
 800bf48:	3728      	adds	r7, #40	@ 0x28
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	40023800 	.word	0x40023800
 800bf54:	40020000 	.word	0x40020000

0800bf58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fe ff73 	bl	800ae52 <USBH_LL_IncTimer>
}
 800bf6c:	bf00      	nop
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fe ffab 	bl	800aede <USBH_LL_Connect>
}
 800bf88:	bf00      	nop
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fe ffb4 	bl	800af0c <USBH_LL_Disconnect>
}
 800bfa4:	bf00      	nop
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70fb      	strb	r3, [r7, #3]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fe ff65 	bl	800aea6 <USBH_LL_PortEnabled>
}
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fe ff65 	bl	800aec2 <USBH_LL_PortDisabled>
}
 800bff8:	bf00      	nop
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d12a      	bne.n	800c068 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c012:	4a18      	ldr	r2, [pc, #96]	@ (800c074 <USBH_LL_Init+0x74>)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a15      	ldr	r2, [pc, #84]	@ (800c074 <USBH_LL_Init+0x74>)
 800c01e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c022:	4b14      	ldr	r3, [pc, #80]	@ (800c074 <USBH_LL_Init+0x74>)
 800c024:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c028:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c02a:	4b12      	ldr	r3, [pc, #72]	@ (800c074 <USBH_LL_Init+0x74>)
 800c02c:	2208      	movs	r2, #8
 800c02e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c030:	4b10      	ldr	r3, [pc, #64]	@ (800c074 <USBH_LL_Init+0x74>)
 800c032:	2201      	movs	r2, #1
 800c034:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c036:	4b0f      	ldr	r3, [pc, #60]	@ (800c074 <USBH_LL_Init+0x74>)
 800c038:	2200      	movs	r2, #0
 800c03a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c03c:	4b0d      	ldr	r3, [pc, #52]	@ (800c074 <USBH_LL_Init+0x74>)
 800c03e:	2202      	movs	r2, #2
 800c040:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c042:	4b0c      	ldr	r3, [pc, #48]	@ (800c074 <USBH_LL_Init+0x74>)
 800c044:	2200      	movs	r2, #0
 800c046:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c048:	480a      	ldr	r0, [pc, #40]	@ (800c074 <USBH_LL_Init+0x74>)
 800c04a:	f7f6 fc18 	bl	800287e <HAL_HCD_Init>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c054:	f7f5 fa18 	bl	8001488 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c058:	4806      	ldr	r0, [pc, #24]	@ (800c074 <USBH_LL_Init+0x74>)
 800c05a:	f7f7 f879 	bl	8003150 <HAL_HCD_GetCurrentFrame>
 800c05e:	4603      	mov	r3, r0
 800c060:	4619      	mov	r1, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7fe fee6 	bl	800ae34 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3708      	adds	r7, #8
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	20000688 	.word	0x20000688

0800c078 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c08e:	4618      	mov	r0, r3
 800c090:	f7f6 ffe6 	bl	8003060 <HAL_HCD_Start>
 800c094:	4603      	mov	r3, r0
 800c096:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c098:	7bfb      	ldrb	r3, [r7, #15]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 f95e 	bl	800c35c <USBH_Get_USB_Status>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b084      	sub	sp, #16
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7f6 ffee 	bl	80030a6 <HAL_HCD_Stop>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c0ce:	7bfb      	ldrb	r3, [r7, #15]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 f943 	bl	800c35c <USBH_Get_USB_Status>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0da:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7f7 f838 	bl	800316c <HAL_HCD_GetCurrentSpeed>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d00c      	beq.n	800c11c <USBH_LL_GetSpeed+0x38>
 800c102:	2b02      	cmp	r3, #2
 800c104:	d80d      	bhi.n	800c122 <USBH_LL_GetSpeed+0x3e>
 800c106:	2b00      	cmp	r3, #0
 800c108:	d002      	beq.n	800c110 <USBH_LL_GetSpeed+0x2c>
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d003      	beq.n	800c116 <USBH_LL_GetSpeed+0x32>
 800c10e:	e008      	b.n	800c122 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c110:	2300      	movs	r3, #0
 800c112:	73fb      	strb	r3, [r7, #15]
    break;
 800c114:	e008      	b.n	800c128 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c116:	2301      	movs	r3, #1
 800c118:	73fb      	strb	r3, [r7, #15]
    break;
 800c11a:	e005      	b.n	800c128 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c11c:	2302      	movs	r3, #2
 800c11e:	73fb      	strb	r3, [r7, #15]
    break;
 800c120:	e002      	b.n	800c128 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c122:	2301      	movs	r3, #1
 800c124:	73fb      	strb	r3, [r7, #15]
    break;
 800c126:	bf00      	nop
  }
  return  speed;
 800c128:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b084      	sub	sp, #16
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c148:	4618      	mov	r0, r3
 800c14a:	f7f6 ffc9 	bl	80030e0 <HAL_HCD_ResetPort>
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c152:	7bfb      	ldrb	r3, [r7, #15]
 800c154:	4618      	mov	r0, r3
 800c156:	f000 f901 	bl	800c35c <USBH_Get_USB_Status>
 800c15a:	4603      	mov	r3, r0
 800c15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	460b      	mov	r3, r1
 800c172:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c17a:	78fa      	ldrb	r2, [r7, #3]
 800c17c:	4611      	mov	r1, r2
 800c17e:	4618      	mov	r0, r3
 800c180:	f7f6 ffd1 	bl	8003126 <HAL_HCD_HC_GetXferCount>
 800c184:	4603      	mov	r3, r0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c18e:	b590      	push	{r4, r7, lr}
 800c190:	b089      	sub	sp, #36	@ 0x24
 800c192:	af04      	add	r7, sp, #16
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	4608      	mov	r0, r1
 800c198:	4611      	mov	r1, r2
 800c19a:	461a      	mov	r2, r3
 800c19c:	4603      	mov	r3, r0
 800c19e:	70fb      	strb	r3, [r7, #3]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	70bb      	strb	r3, [r7, #2]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c1b6:	787c      	ldrb	r4, [r7, #1]
 800c1b8:	78ba      	ldrb	r2, [r7, #2]
 800c1ba:	78f9      	ldrb	r1, [r7, #3]
 800c1bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c1be:	9302      	str	r3, [sp, #8]
 800c1c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c1c4:	9301      	str	r3, [sp, #4]
 800c1c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	4623      	mov	r3, r4
 800c1ce:	f7f6 fbbd 	bl	800294c <HAL_HCD_HC_Init>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 f8bf 	bl	800c35c <USBH_Get_USB_Status>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3714      	adds	r7, #20
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd90      	pop	{r4, r7, pc}

0800c1ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c206:	78fa      	ldrb	r2, [r7, #3]
 800c208:	4611      	mov	r1, r2
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7f6 fc56 	bl	8002abc <HAL_HCD_HC_Halt>
 800c210:	4603      	mov	r3, r0
 800c212:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c214:	7bfb      	ldrb	r3, [r7, #15]
 800c216:	4618      	mov	r0, r3
 800c218:	f000 f8a0 	bl	800c35c <USBH_Get_USB_Status>
 800c21c:	4603      	mov	r3, r0
 800c21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c220:	7bbb      	ldrb	r3, [r7, #14]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c22a:	b590      	push	{r4, r7, lr}
 800c22c:	b089      	sub	sp, #36	@ 0x24
 800c22e:	af04      	add	r7, sp, #16
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	4608      	mov	r0, r1
 800c234:	4611      	mov	r1, r2
 800c236:	461a      	mov	r2, r3
 800c238:	4603      	mov	r3, r0
 800c23a:	70fb      	strb	r3, [r7, #3]
 800c23c:	460b      	mov	r3, r1
 800c23e:	70bb      	strb	r3, [r7, #2]
 800c240:	4613      	mov	r3, r2
 800c242:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c248:	2300      	movs	r3, #0
 800c24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c252:	787c      	ldrb	r4, [r7, #1]
 800c254:	78ba      	ldrb	r2, [r7, #2]
 800c256:	78f9      	ldrb	r1, [r7, #3]
 800c258:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c25c:	9303      	str	r3, [sp, #12]
 800c25e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c260:	9302      	str	r3, [sp, #8]
 800c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c264:	9301      	str	r3, [sp, #4]
 800c266:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c26a:	9300      	str	r3, [sp, #0]
 800c26c:	4623      	mov	r3, r4
 800c26e:	f7f6 fc49 	bl	8002b04 <HAL_HCD_HC_SubmitRequest>
 800c272:	4603      	mov	r3, r0
 800c274:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 f86f 	bl	800c35c <USBH_Get_USB_Status>
 800c27e:	4603      	mov	r3, r0
 800c280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c282:	7bbb      	ldrb	r3, [r7, #14]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd90      	pop	{r4, r7, pc}

0800c28c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	460b      	mov	r3, r1
 800c296:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c29e:	78fa      	ldrb	r2, [r7, #3]
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7f6 ff2a 	bl	80030fc <HAL_HCD_HC_GetURBState>
 800c2a8:	4603      	mov	r3, r0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b082      	sub	sp, #8
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d103      	bne.n	800c2d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c2c8:	78fb      	ldrb	r3, [r7, #3]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 f872 	bl	800c3b4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c2d0:	20c8      	movs	r0, #200	@ 0xc8
 800c2d2:	f7f5 ff57 	bl	8002184 <HAL_Delay>
  return USBH_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3708      	adds	r7, #8
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	70fb      	strb	r3, [r7, #3]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c2f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c2f8:	78fa      	ldrb	r2, [r7, #3]
 800c2fa:	68f9      	ldr	r1, [r7, #12]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	011b      	lsls	r3, r3, #4
 800c300:	1a9b      	subs	r3, r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	440b      	add	r3, r1
 800c306:	3317      	adds	r3, #23
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00a      	beq.n	800c324 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c30e:	78fa      	ldrb	r2, [r7, #3]
 800c310:	68f9      	ldr	r1, [r7, #12]
 800c312:	4613      	mov	r3, r2
 800c314:	011b      	lsls	r3, r3, #4
 800c316:	1a9b      	subs	r3, r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	440b      	add	r3, r1
 800c31c:	333c      	adds	r3, #60	@ 0x3c
 800c31e:	78ba      	ldrb	r2, [r7, #2]
 800c320:	701a      	strb	r2, [r3, #0]
 800c322:	e009      	b.n	800c338 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c324:	78fa      	ldrb	r2, [r7, #3]
 800c326:	68f9      	ldr	r1, [r7, #12]
 800c328:	4613      	mov	r3, r2
 800c32a:	011b      	lsls	r3, r3, #4
 800c32c:	1a9b      	subs	r3, r3, r2
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	440b      	add	r3, r1
 800c332:	333d      	adds	r3, #61	@ 0x3d
 800c334:	78ba      	ldrb	r2, [r7, #2]
 800c336:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3714      	adds	r7, #20
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b082      	sub	sp, #8
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7f5 ff18 	bl	8002184 <HAL_Delay>
}
 800c354:	bf00      	nop
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	4603      	mov	r3, r0
 800c364:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c36a:	79fb      	ldrb	r3, [r7, #7]
 800c36c:	2b03      	cmp	r3, #3
 800c36e:	d817      	bhi.n	800c3a0 <USBH_Get_USB_Status+0x44>
 800c370:	a201      	add	r2, pc, #4	@ (adr r2, 800c378 <USBH_Get_USB_Status+0x1c>)
 800c372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c376:	bf00      	nop
 800c378:	0800c389 	.word	0x0800c389
 800c37c:	0800c38f 	.word	0x0800c38f
 800c380:	0800c395 	.word	0x0800c395
 800c384:	0800c39b 	.word	0x0800c39b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c388:	2300      	movs	r3, #0
 800c38a:	73fb      	strb	r3, [r7, #15]
    break;
 800c38c:	e00b      	b.n	800c3a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c38e:	2302      	movs	r3, #2
 800c390:	73fb      	strb	r3, [r7, #15]
    break;
 800c392:	e008      	b.n	800c3a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c394:	2301      	movs	r3, #1
 800c396:	73fb      	strb	r3, [r7, #15]
    break;
 800c398:	e005      	b.n	800c3a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c39a:	2302      	movs	r3, #2
 800c39c:	73fb      	strb	r3, [r7, #15]
    break;
 800c39e:	e002      	b.n	800c3a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c3a0:	2302      	movs	r3, #2
 800c3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3a4:	bf00      	nop
  }
  return usb_status;
 800c3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c3be:	79fb      	ldrb	r3, [r7, #7]
 800c3c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c3c2:	79fb      	ldrb	r3, [r7, #7]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d102      	bne.n	800c3ce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
 800c3cc:	e001      	b.n	800c3d2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	2101      	movs	r1, #1
 800c3d8:	4803      	ldr	r0, [pc, #12]	@ (800c3e8 <MX_DriverVbusFS+0x34>)
 800c3da:	f7f6 fa37 	bl	800284c <HAL_GPIO_WritePin>
}
 800c3de:	bf00      	nop
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	40020800 	.word	0x40020800

0800c3ec <malloc>:
 800c3ec:	4b02      	ldr	r3, [pc, #8]	@ (800c3f8 <malloc+0xc>)
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	f000 b82d 	b.w	800c450 <_malloc_r>
 800c3f6:	bf00      	nop
 800c3f8:	20000038 	.word	0x20000038

0800c3fc <free>:
 800c3fc:	4b02      	ldr	r3, [pc, #8]	@ (800c408 <free+0xc>)
 800c3fe:	4601      	mov	r1, r0
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	f000 ba55 	b.w	800c8b0 <_free_r>
 800c406:	bf00      	nop
 800c408:	20000038 	.word	0x20000038

0800c40c <sbrk_aligned>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	4e0f      	ldr	r6, [pc, #60]	@ (800c44c <sbrk_aligned+0x40>)
 800c410:	460c      	mov	r4, r1
 800c412:	6831      	ldr	r1, [r6, #0]
 800c414:	4605      	mov	r5, r0
 800c416:	b911      	cbnz	r1, 800c41e <sbrk_aligned+0x12>
 800c418:	f000 f9fa 	bl	800c810 <_sbrk_r>
 800c41c:	6030      	str	r0, [r6, #0]
 800c41e:	4621      	mov	r1, r4
 800c420:	4628      	mov	r0, r5
 800c422:	f000 f9f5 	bl	800c810 <_sbrk_r>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	d103      	bne.n	800c432 <sbrk_aligned+0x26>
 800c42a:	f04f 34ff 	mov.w	r4, #4294967295
 800c42e:	4620      	mov	r0, r4
 800c430:	bd70      	pop	{r4, r5, r6, pc}
 800c432:	1cc4      	adds	r4, r0, #3
 800c434:	f024 0403 	bic.w	r4, r4, #3
 800c438:	42a0      	cmp	r0, r4
 800c43a:	d0f8      	beq.n	800c42e <sbrk_aligned+0x22>
 800c43c:	1a21      	subs	r1, r4, r0
 800c43e:	4628      	mov	r0, r5
 800c440:	f000 f9e6 	bl	800c810 <_sbrk_r>
 800c444:	3001      	adds	r0, #1
 800c446:	d1f2      	bne.n	800c42e <sbrk_aligned+0x22>
 800c448:	e7ef      	b.n	800c42a <sbrk_aligned+0x1e>
 800c44a:	bf00      	nop
 800c44c:	20000a68 	.word	0x20000a68

0800c450 <_malloc_r>:
 800c450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c454:	1ccd      	adds	r5, r1, #3
 800c456:	f025 0503 	bic.w	r5, r5, #3
 800c45a:	3508      	adds	r5, #8
 800c45c:	2d0c      	cmp	r5, #12
 800c45e:	bf38      	it	cc
 800c460:	250c      	movcc	r5, #12
 800c462:	2d00      	cmp	r5, #0
 800c464:	4606      	mov	r6, r0
 800c466:	db01      	blt.n	800c46c <_malloc_r+0x1c>
 800c468:	42a9      	cmp	r1, r5
 800c46a:	d904      	bls.n	800c476 <_malloc_r+0x26>
 800c46c:	230c      	movs	r3, #12
 800c46e:	6033      	str	r3, [r6, #0]
 800c470:	2000      	movs	r0, #0
 800c472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c54c <_malloc_r+0xfc>
 800c47a:	f000 f869 	bl	800c550 <__malloc_lock>
 800c47e:	f8d8 3000 	ldr.w	r3, [r8]
 800c482:	461c      	mov	r4, r3
 800c484:	bb44      	cbnz	r4, 800c4d8 <_malloc_r+0x88>
 800c486:	4629      	mov	r1, r5
 800c488:	4630      	mov	r0, r6
 800c48a:	f7ff ffbf 	bl	800c40c <sbrk_aligned>
 800c48e:	1c43      	adds	r3, r0, #1
 800c490:	4604      	mov	r4, r0
 800c492:	d158      	bne.n	800c546 <_malloc_r+0xf6>
 800c494:	f8d8 4000 	ldr.w	r4, [r8]
 800c498:	4627      	mov	r7, r4
 800c49a:	2f00      	cmp	r7, #0
 800c49c:	d143      	bne.n	800c526 <_malloc_r+0xd6>
 800c49e:	2c00      	cmp	r4, #0
 800c4a0:	d04b      	beq.n	800c53a <_malloc_r+0xea>
 800c4a2:	6823      	ldr	r3, [r4, #0]
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	eb04 0903 	add.w	r9, r4, r3
 800c4ac:	f000 f9b0 	bl	800c810 <_sbrk_r>
 800c4b0:	4581      	cmp	r9, r0
 800c4b2:	d142      	bne.n	800c53a <_malloc_r+0xea>
 800c4b4:	6821      	ldr	r1, [r4, #0]
 800c4b6:	1a6d      	subs	r5, r5, r1
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f7ff ffa6 	bl	800c40c <sbrk_aligned>
 800c4c0:	3001      	adds	r0, #1
 800c4c2:	d03a      	beq.n	800c53a <_malloc_r+0xea>
 800c4c4:	6823      	ldr	r3, [r4, #0]
 800c4c6:	442b      	add	r3, r5
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	bb62      	cbnz	r2, 800c52c <_malloc_r+0xdc>
 800c4d2:	f8c8 7000 	str.w	r7, [r8]
 800c4d6:	e00f      	b.n	800c4f8 <_malloc_r+0xa8>
 800c4d8:	6822      	ldr	r2, [r4, #0]
 800c4da:	1b52      	subs	r2, r2, r5
 800c4dc:	d420      	bmi.n	800c520 <_malloc_r+0xd0>
 800c4de:	2a0b      	cmp	r2, #11
 800c4e0:	d917      	bls.n	800c512 <_malloc_r+0xc2>
 800c4e2:	1961      	adds	r1, r4, r5
 800c4e4:	42a3      	cmp	r3, r4
 800c4e6:	6025      	str	r5, [r4, #0]
 800c4e8:	bf18      	it	ne
 800c4ea:	6059      	strne	r1, [r3, #4]
 800c4ec:	6863      	ldr	r3, [r4, #4]
 800c4ee:	bf08      	it	eq
 800c4f0:	f8c8 1000 	streq.w	r1, [r8]
 800c4f4:	5162      	str	r2, [r4, r5]
 800c4f6:	604b      	str	r3, [r1, #4]
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	f000 f82f 	bl	800c55c <__malloc_unlock>
 800c4fe:	f104 000b 	add.w	r0, r4, #11
 800c502:	1d23      	adds	r3, r4, #4
 800c504:	f020 0007 	bic.w	r0, r0, #7
 800c508:	1ac2      	subs	r2, r0, r3
 800c50a:	bf1c      	itt	ne
 800c50c:	1a1b      	subne	r3, r3, r0
 800c50e:	50a3      	strne	r3, [r4, r2]
 800c510:	e7af      	b.n	800c472 <_malloc_r+0x22>
 800c512:	6862      	ldr	r2, [r4, #4]
 800c514:	42a3      	cmp	r3, r4
 800c516:	bf0c      	ite	eq
 800c518:	f8c8 2000 	streq.w	r2, [r8]
 800c51c:	605a      	strne	r2, [r3, #4]
 800c51e:	e7eb      	b.n	800c4f8 <_malloc_r+0xa8>
 800c520:	4623      	mov	r3, r4
 800c522:	6864      	ldr	r4, [r4, #4]
 800c524:	e7ae      	b.n	800c484 <_malloc_r+0x34>
 800c526:	463c      	mov	r4, r7
 800c528:	687f      	ldr	r7, [r7, #4]
 800c52a:	e7b6      	b.n	800c49a <_malloc_r+0x4a>
 800c52c:	461a      	mov	r2, r3
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	42a3      	cmp	r3, r4
 800c532:	d1fb      	bne.n	800c52c <_malloc_r+0xdc>
 800c534:	2300      	movs	r3, #0
 800c536:	6053      	str	r3, [r2, #4]
 800c538:	e7de      	b.n	800c4f8 <_malloc_r+0xa8>
 800c53a:	230c      	movs	r3, #12
 800c53c:	6033      	str	r3, [r6, #0]
 800c53e:	4630      	mov	r0, r6
 800c540:	f000 f80c 	bl	800c55c <__malloc_unlock>
 800c544:	e794      	b.n	800c470 <_malloc_r+0x20>
 800c546:	6005      	str	r5, [r0, #0]
 800c548:	e7d6      	b.n	800c4f8 <_malloc_r+0xa8>
 800c54a:	bf00      	nop
 800c54c:	20000a6c 	.word	0x20000a6c

0800c550 <__malloc_lock>:
 800c550:	4801      	ldr	r0, [pc, #4]	@ (800c558 <__malloc_lock+0x8>)
 800c552:	f000 b9aa 	b.w	800c8aa <__retarget_lock_acquire_recursive>
 800c556:	bf00      	nop
 800c558:	20000bb0 	.word	0x20000bb0

0800c55c <__malloc_unlock>:
 800c55c:	4801      	ldr	r0, [pc, #4]	@ (800c564 <__malloc_unlock+0x8>)
 800c55e:	f000 b9a5 	b.w	800c8ac <__retarget_lock_release_recursive>
 800c562:	bf00      	nop
 800c564:	20000bb0 	.word	0x20000bb0

0800c568 <std>:
 800c568:	2300      	movs	r3, #0
 800c56a:	b510      	push	{r4, lr}
 800c56c:	4604      	mov	r4, r0
 800c56e:	e9c0 3300 	strd	r3, r3, [r0]
 800c572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c576:	6083      	str	r3, [r0, #8]
 800c578:	8181      	strh	r1, [r0, #12]
 800c57a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c57c:	81c2      	strh	r2, [r0, #14]
 800c57e:	6183      	str	r3, [r0, #24]
 800c580:	4619      	mov	r1, r3
 800c582:	2208      	movs	r2, #8
 800c584:	305c      	adds	r0, #92	@ 0x5c
 800c586:	f000 f906 	bl	800c796 <memset>
 800c58a:	4b0d      	ldr	r3, [pc, #52]	@ (800c5c0 <std+0x58>)
 800c58c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c58e:	4b0d      	ldr	r3, [pc, #52]	@ (800c5c4 <std+0x5c>)
 800c590:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c592:	4b0d      	ldr	r3, [pc, #52]	@ (800c5c8 <std+0x60>)
 800c594:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c596:	4b0d      	ldr	r3, [pc, #52]	@ (800c5cc <std+0x64>)
 800c598:	6323      	str	r3, [r4, #48]	@ 0x30
 800c59a:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d0 <std+0x68>)
 800c59c:	6224      	str	r4, [r4, #32]
 800c59e:	429c      	cmp	r4, r3
 800c5a0:	d006      	beq.n	800c5b0 <std+0x48>
 800c5a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5a6:	4294      	cmp	r4, r2
 800c5a8:	d002      	beq.n	800c5b0 <std+0x48>
 800c5aa:	33d0      	adds	r3, #208	@ 0xd0
 800c5ac:	429c      	cmp	r4, r3
 800c5ae:	d105      	bne.n	800c5bc <std+0x54>
 800c5b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5b8:	f000 b976 	b.w	800c8a8 <__retarget_lock_init_recursive>
 800c5bc:	bd10      	pop	{r4, pc}
 800c5be:	bf00      	nop
 800c5c0:	0800c711 	.word	0x0800c711
 800c5c4:	0800c733 	.word	0x0800c733
 800c5c8:	0800c76b 	.word	0x0800c76b
 800c5cc:	0800c78f 	.word	0x0800c78f
 800c5d0:	20000a70 	.word	0x20000a70

0800c5d4 <stdio_exit_handler>:
 800c5d4:	4a02      	ldr	r2, [pc, #8]	@ (800c5e0 <stdio_exit_handler+0xc>)
 800c5d6:	4903      	ldr	r1, [pc, #12]	@ (800c5e4 <stdio_exit_handler+0x10>)
 800c5d8:	4803      	ldr	r0, [pc, #12]	@ (800c5e8 <stdio_exit_handler+0x14>)
 800c5da:	f000 b869 	b.w	800c6b0 <_fwalk_sglue>
 800c5de:	bf00      	nop
 800c5e0:	2000002c 	.word	0x2000002c
 800c5e4:	0800cfed 	.word	0x0800cfed
 800c5e8:	2000003c 	.word	0x2000003c

0800c5ec <cleanup_stdio>:
 800c5ec:	6841      	ldr	r1, [r0, #4]
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c620 <cleanup_stdio+0x34>)
 800c5f0:	4299      	cmp	r1, r3
 800c5f2:	b510      	push	{r4, lr}
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	d001      	beq.n	800c5fc <cleanup_stdio+0x10>
 800c5f8:	f000 fcf8 	bl	800cfec <_fflush_r>
 800c5fc:	68a1      	ldr	r1, [r4, #8]
 800c5fe:	4b09      	ldr	r3, [pc, #36]	@ (800c624 <cleanup_stdio+0x38>)
 800c600:	4299      	cmp	r1, r3
 800c602:	d002      	beq.n	800c60a <cleanup_stdio+0x1e>
 800c604:	4620      	mov	r0, r4
 800c606:	f000 fcf1 	bl	800cfec <_fflush_r>
 800c60a:	68e1      	ldr	r1, [r4, #12]
 800c60c:	4b06      	ldr	r3, [pc, #24]	@ (800c628 <cleanup_stdio+0x3c>)
 800c60e:	4299      	cmp	r1, r3
 800c610:	d004      	beq.n	800c61c <cleanup_stdio+0x30>
 800c612:	4620      	mov	r0, r4
 800c614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c618:	f000 bce8 	b.w	800cfec <_fflush_r>
 800c61c:	bd10      	pop	{r4, pc}
 800c61e:	bf00      	nop
 800c620:	20000a70 	.word	0x20000a70
 800c624:	20000ad8 	.word	0x20000ad8
 800c628:	20000b40 	.word	0x20000b40

0800c62c <global_stdio_init.part.0>:
 800c62c:	b510      	push	{r4, lr}
 800c62e:	4b0b      	ldr	r3, [pc, #44]	@ (800c65c <global_stdio_init.part.0+0x30>)
 800c630:	4c0b      	ldr	r4, [pc, #44]	@ (800c660 <global_stdio_init.part.0+0x34>)
 800c632:	4a0c      	ldr	r2, [pc, #48]	@ (800c664 <global_stdio_init.part.0+0x38>)
 800c634:	601a      	str	r2, [r3, #0]
 800c636:	4620      	mov	r0, r4
 800c638:	2200      	movs	r2, #0
 800c63a:	2104      	movs	r1, #4
 800c63c:	f7ff ff94 	bl	800c568 <std>
 800c640:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c644:	2201      	movs	r2, #1
 800c646:	2109      	movs	r1, #9
 800c648:	f7ff ff8e 	bl	800c568 <std>
 800c64c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c650:	2202      	movs	r2, #2
 800c652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c656:	2112      	movs	r1, #18
 800c658:	f7ff bf86 	b.w	800c568 <std>
 800c65c:	20000ba8 	.word	0x20000ba8
 800c660:	20000a70 	.word	0x20000a70
 800c664:	0800c5d5 	.word	0x0800c5d5

0800c668 <__sfp_lock_acquire>:
 800c668:	4801      	ldr	r0, [pc, #4]	@ (800c670 <__sfp_lock_acquire+0x8>)
 800c66a:	f000 b91e 	b.w	800c8aa <__retarget_lock_acquire_recursive>
 800c66e:	bf00      	nop
 800c670:	20000bb1 	.word	0x20000bb1

0800c674 <__sfp_lock_release>:
 800c674:	4801      	ldr	r0, [pc, #4]	@ (800c67c <__sfp_lock_release+0x8>)
 800c676:	f000 b919 	b.w	800c8ac <__retarget_lock_release_recursive>
 800c67a:	bf00      	nop
 800c67c:	20000bb1 	.word	0x20000bb1

0800c680 <__sinit>:
 800c680:	b510      	push	{r4, lr}
 800c682:	4604      	mov	r4, r0
 800c684:	f7ff fff0 	bl	800c668 <__sfp_lock_acquire>
 800c688:	6a23      	ldr	r3, [r4, #32]
 800c68a:	b11b      	cbz	r3, 800c694 <__sinit+0x14>
 800c68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c690:	f7ff bff0 	b.w	800c674 <__sfp_lock_release>
 800c694:	4b04      	ldr	r3, [pc, #16]	@ (800c6a8 <__sinit+0x28>)
 800c696:	6223      	str	r3, [r4, #32]
 800c698:	4b04      	ldr	r3, [pc, #16]	@ (800c6ac <__sinit+0x2c>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1f5      	bne.n	800c68c <__sinit+0xc>
 800c6a0:	f7ff ffc4 	bl	800c62c <global_stdio_init.part.0>
 800c6a4:	e7f2      	b.n	800c68c <__sinit+0xc>
 800c6a6:	bf00      	nop
 800c6a8:	0800c5ed 	.word	0x0800c5ed
 800c6ac:	20000ba8 	.word	0x20000ba8

0800c6b0 <_fwalk_sglue>:
 800c6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6b4:	4607      	mov	r7, r0
 800c6b6:	4688      	mov	r8, r1
 800c6b8:	4614      	mov	r4, r2
 800c6ba:	2600      	movs	r6, #0
 800c6bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6c0:	f1b9 0901 	subs.w	r9, r9, #1
 800c6c4:	d505      	bpl.n	800c6d2 <_fwalk_sglue+0x22>
 800c6c6:	6824      	ldr	r4, [r4, #0]
 800c6c8:	2c00      	cmp	r4, #0
 800c6ca:	d1f7      	bne.n	800c6bc <_fwalk_sglue+0xc>
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6d2:	89ab      	ldrh	r3, [r5, #12]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d907      	bls.n	800c6e8 <_fwalk_sglue+0x38>
 800c6d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	d003      	beq.n	800c6e8 <_fwalk_sglue+0x38>
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	47c0      	blx	r8
 800c6e6:	4306      	orrs	r6, r0
 800c6e8:	3568      	adds	r5, #104	@ 0x68
 800c6ea:	e7e9      	b.n	800c6c0 <_fwalk_sglue+0x10>

0800c6ec <iprintf>:
 800c6ec:	b40f      	push	{r0, r1, r2, r3}
 800c6ee:	b507      	push	{r0, r1, r2, lr}
 800c6f0:	4906      	ldr	r1, [pc, #24]	@ (800c70c <iprintf+0x20>)
 800c6f2:	ab04      	add	r3, sp, #16
 800c6f4:	6808      	ldr	r0, [r1, #0]
 800c6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6fa:	6881      	ldr	r1, [r0, #8]
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	f000 f94b 	bl	800c998 <_vfiprintf_r>
 800c702:	b003      	add	sp, #12
 800c704:	f85d eb04 	ldr.w	lr, [sp], #4
 800c708:	b004      	add	sp, #16
 800c70a:	4770      	bx	lr
 800c70c:	20000038 	.word	0x20000038

0800c710 <__sread>:
 800c710:	b510      	push	{r4, lr}
 800c712:	460c      	mov	r4, r1
 800c714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c718:	f000 f868 	bl	800c7ec <_read_r>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	bfab      	itete	ge
 800c720:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c722:	89a3      	ldrhlt	r3, [r4, #12]
 800c724:	181b      	addge	r3, r3, r0
 800c726:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c72a:	bfac      	ite	ge
 800c72c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c72e:	81a3      	strhlt	r3, [r4, #12]
 800c730:	bd10      	pop	{r4, pc}

0800c732 <__swrite>:
 800c732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c736:	461f      	mov	r7, r3
 800c738:	898b      	ldrh	r3, [r1, #12]
 800c73a:	05db      	lsls	r3, r3, #23
 800c73c:	4605      	mov	r5, r0
 800c73e:	460c      	mov	r4, r1
 800c740:	4616      	mov	r6, r2
 800c742:	d505      	bpl.n	800c750 <__swrite+0x1e>
 800c744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c748:	2302      	movs	r3, #2
 800c74a:	2200      	movs	r2, #0
 800c74c:	f000 f83c 	bl	800c7c8 <_lseek_r>
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c756:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c75a:	81a3      	strh	r3, [r4, #12]
 800c75c:	4632      	mov	r2, r6
 800c75e:	463b      	mov	r3, r7
 800c760:	4628      	mov	r0, r5
 800c762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c766:	f000 b863 	b.w	800c830 <_write_r>

0800c76a <__sseek>:
 800c76a:	b510      	push	{r4, lr}
 800c76c:	460c      	mov	r4, r1
 800c76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c772:	f000 f829 	bl	800c7c8 <_lseek_r>
 800c776:	1c43      	adds	r3, r0, #1
 800c778:	89a3      	ldrh	r3, [r4, #12]
 800c77a:	bf15      	itete	ne
 800c77c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c77e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c782:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c786:	81a3      	strheq	r3, [r4, #12]
 800c788:	bf18      	it	ne
 800c78a:	81a3      	strhne	r3, [r4, #12]
 800c78c:	bd10      	pop	{r4, pc}

0800c78e <__sclose>:
 800c78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c792:	f000 b809 	b.w	800c7a8 <_close_r>

0800c796 <memset>:
 800c796:	4402      	add	r2, r0
 800c798:	4603      	mov	r3, r0
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d100      	bne.n	800c7a0 <memset+0xa>
 800c79e:	4770      	bx	lr
 800c7a0:	f803 1b01 	strb.w	r1, [r3], #1
 800c7a4:	e7f9      	b.n	800c79a <memset+0x4>
	...

0800c7a8 <_close_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	4d06      	ldr	r5, [pc, #24]	@ (800c7c4 <_close_r+0x1c>)
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	4608      	mov	r0, r1
 800c7b2:	602b      	str	r3, [r5, #0]
 800c7b4:	f7f5 fbcd 	bl	8001f52 <_close>
 800c7b8:	1c43      	adds	r3, r0, #1
 800c7ba:	d102      	bne.n	800c7c2 <_close_r+0x1a>
 800c7bc:	682b      	ldr	r3, [r5, #0]
 800c7be:	b103      	cbz	r3, 800c7c2 <_close_r+0x1a>
 800c7c0:	6023      	str	r3, [r4, #0]
 800c7c2:	bd38      	pop	{r3, r4, r5, pc}
 800c7c4:	20000bac 	.word	0x20000bac

0800c7c8 <_lseek_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	4d07      	ldr	r5, [pc, #28]	@ (800c7e8 <_lseek_r+0x20>)
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	4608      	mov	r0, r1
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	602a      	str	r2, [r5, #0]
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	f7f5 fbe2 	bl	8001fa0 <_lseek>
 800c7dc:	1c43      	adds	r3, r0, #1
 800c7de:	d102      	bne.n	800c7e6 <_lseek_r+0x1e>
 800c7e0:	682b      	ldr	r3, [r5, #0]
 800c7e2:	b103      	cbz	r3, 800c7e6 <_lseek_r+0x1e>
 800c7e4:	6023      	str	r3, [r4, #0]
 800c7e6:	bd38      	pop	{r3, r4, r5, pc}
 800c7e8:	20000bac 	.word	0x20000bac

0800c7ec <_read_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4d07      	ldr	r5, [pc, #28]	@ (800c80c <_read_r+0x20>)
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	4608      	mov	r0, r1
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	602a      	str	r2, [r5, #0]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	f7f5 fb8c 	bl	8001f18 <_read>
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d102      	bne.n	800c80a <_read_r+0x1e>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	b103      	cbz	r3, 800c80a <_read_r+0x1e>
 800c808:	6023      	str	r3, [r4, #0]
 800c80a:	bd38      	pop	{r3, r4, r5, pc}
 800c80c:	20000bac 	.word	0x20000bac

0800c810 <_sbrk_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4d06      	ldr	r5, [pc, #24]	@ (800c82c <_sbrk_r+0x1c>)
 800c814:	2300      	movs	r3, #0
 800c816:	4604      	mov	r4, r0
 800c818:	4608      	mov	r0, r1
 800c81a:	602b      	str	r3, [r5, #0]
 800c81c:	f7f5 fbce 	bl	8001fbc <_sbrk>
 800c820:	1c43      	adds	r3, r0, #1
 800c822:	d102      	bne.n	800c82a <_sbrk_r+0x1a>
 800c824:	682b      	ldr	r3, [r5, #0]
 800c826:	b103      	cbz	r3, 800c82a <_sbrk_r+0x1a>
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	bd38      	pop	{r3, r4, r5, pc}
 800c82c:	20000bac 	.word	0x20000bac

0800c830 <_write_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4d07      	ldr	r5, [pc, #28]	@ (800c850 <_write_r+0x20>)
 800c834:	4604      	mov	r4, r0
 800c836:	4608      	mov	r0, r1
 800c838:	4611      	mov	r1, r2
 800c83a:	2200      	movs	r2, #0
 800c83c:	602a      	str	r2, [r5, #0]
 800c83e:	461a      	mov	r2, r3
 800c840:	f7f4 fe66 	bl	8001510 <_write>
 800c844:	1c43      	adds	r3, r0, #1
 800c846:	d102      	bne.n	800c84e <_write_r+0x1e>
 800c848:	682b      	ldr	r3, [r5, #0]
 800c84a:	b103      	cbz	r3, 800c84e <_write_r+0x1e>
 800c84c:	6023      	str	r3, [r4, #0]
 800c84e:	bd38      	pop	{r3, r4, r5, pc}
 800c850:	20000bac 	.word	0x20000bac

0800c854 <__errno>:
 800c854:	4b01      	ldr	r3, [pc, #4]	@ (800c85c <__errno+0x8>)
 800c856:	6818      	ldr	r0, [r3, #0]
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	20000038 	.word	0x20000038

0800c860 <__libc_init_array>:
 800c860:	b570      	push	{r4, r5, r6, lr}
 800c862:	4d0d      	ldr	r5, [pc, #52]	@ (800c898 <__libc_init_array+0x38>)
 800c864:	4c0d      	ldr	r4, [pc, #52]	@ (800c89c <__libc_init_array+0x3c>)
 800c866:	1b64      	subs	r4, r4, r5
 800c868:	10a4      	asrs	r4, r4, #2
 800c86a:	2600      	movs	r6, #0
 800c86c:	42a6      	cmp	r6, r4
 800c86e:	d109      	bne.n	800c884 <__libc_init_array+0x24>
 800c870:	4d0b      	ldr	r5, [pc, #44]	@ (800c8a0 <__libc_init_array+0x40>)
 800c872:	4c0c      	ldr	r4, [pc, #48]	@ (800c8a4 <__libc_init_array+0x44>)
 800c874:	f000 fcfa 	bl	800d26c <_init>
 800c878:	1b64      	subs	r4, r4, r5
 800c87a:	10a4      	asrs	r4, r4, #2
 800c87c:	2600      	movs	r6, #0
 800c87e:	42a6      	cmp	r6, r4
 800c880:	d105      	bne.n	800c88e <__libc_init_array+0x2e>
 800c882:	bd70      	pop	{r4, r5, r6, pc}
 800c884:	f855 3b04 	ldr.w	r3, [r5], #4
 800c888:	4798      	blx	r3
 800c88a:	3601      	adds	r6, #1
 800c88c:	e7ee      	b.n	800c86c <__libc_init_array+0xc>
 800c88e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c892:	4798      	blx	r3
 800c894:	3601      	adds	r6, #1
 800c896:	e7f2      	b.n	800c87e <__libc_init_array+0x1e>
 800c898:	0800d2fc 	.word	0x0800d2fc
 800c89c:	0800d2fc 	.word	0x0800d2fc
 800c8a0:	0800d2fc 	.word	0x0800d2fc
 800c8a4:	0800d300 	.word	0x0800d300

0800c8a8 <__retarget_lock_init_recursive>:
 800c8a8:	4770      	bx	lr

0800c8aa <__retarget_lock_acquire_recursive>:
 800c8aa:	4770      	bx	lr

0800c8ac <__retarget_lock_release_recursive>:
 800c8ac:	4770      	bx	lr
	...

0800c8b0 <_free_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	d041      	beq.n	800c93c <_free_r+0x8c>
 800c8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8bc:	1f0c      	subs	r4, r1, #4
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	bfb8      	it	lt
 800c8c2:	18e4      	addlt	r4, r4, r3
 800c8c4:	f7ff fe44 	bl	800c550 <__malloc_lock>
 800c8c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c940 <_free_r+0x90>)
 800c8ca:	6813      	ldr	r3, [r2, #0]
 800c8cc:	b933      	cbnz	r3, 800c8dc <_free_r+0x2c>
 800c8ce:	6063      	str	r3, [r4, #4]
 800c8d0:	6014      	str	r4, [r2, #0]
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d8:	f7ff be40 	b.w	800c55c <__malloc_unlock>
 800c8dc:	42a3      	cmp	r3, r4
 800c8de:	d908      	bls.n	800c8f2 <_free_r+0x42>
 800c8e0:	6820      	ldr	r0, [r4, #0]
 800c8e2:	1821      	adds	r1, r4, r0
 800c8e4:	428b      	cmp	r3, r1
 800c8e6:	bf01      	itttt	eq
 800c8e8:	6819      	ldreq	r1, [r3, #0]
 800c8ea:	685b      	ldreq	r3, [r3, #4]
 800c8ec:	1809      	addeq	r1, r1, r0
 800c8ee:	6021      	streq	r1, [r4, #0]
 800c8f0:	e7ed      	b.n	800c8ce <_free_r+0x1e>
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	b10b      	cbz	r3, 800c8fc <_free_r+0x4c>
 800c8f8:	42a3      	cmp	r3, r4
 800c8fa:	d9fa      	bls.n	800c8f2 <_free_r+0x42>
 800c8fc:	6811      	ldr	r1, [r2, #0]
 800c8fe:	1850      	adds	r0, r2, r1
 800c900:	42a0      	cmp	r0, r4
 800c902:	d10b      	bne.n	800c91c <_free_r+0x6c>
 800c904:	6820      	ldr	r0, [r4, #0]
 800c906:	4401      	add	r1, r0
 800c908:	1850      	adds	r0, r2, r1
 800c90a:	4283      	cmp	r3, r0
 800c90c:	6011      	str	r1, [r2, #0]
 800c90e:	d1e0      	bne.n	800c8d2 <_free_r+0x22>
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	6053      	str	r3, [r2, #4]
 800c916:	4408      	add	r0, r1
 800c918:	6010      	str	r0, [r2, #0]
 800c91a:	e7da      	b.n	800c8d2 <_free_r+0x22>
 800c91c:	d902      	bls.n	800c924 <_free_r+0x74>
 800c91e:	230c      	movs	r3, #12
 800c920:	602b      	str	r3, [r5, #0]
 800c922:	e7d6      	b.n	800c8d2 <_free_r+0x22>
 800c924:	6820      	ldr	r0, [r4, #0]
 800c926:	1821      	adds	r1, r4, r0
 800c928:	428b      	cmp	r3, r1
 800c92a:	bf04      	itt	eq
 800c92c:	6819      	ldreq	r1, [r3, #0]
 800c92e:	685b      	ldreq	r3, [r3, #4]
 800c930:	6063      	str	r3, [r4, #4]
 800c932:	bf04      	itt	eq
 800c934:	1809      	addeq	r1, r1, r0
 800c936:	6021      	streq	r1, [r4, #0]
 800c938:	6054      	str	r4, [r2, #4]
 800c93a:	e7ca      	b.n	800c8d2 <_free_r+0x22>
 800c93c:	bd38      	pop	{r3, r4, r5, pc}
 800c93e:	bf00      	nop
 800c940:	20000a6c 	.word	0x20000a6c

0800c944 <__sfputc_r>:
 800c944:	6893      	ldr	r3, [r2, #8]
 800c946:	3b01      	subs	r3, #1
 800c948:	2b00      	cmp	r3, #0
 800c94a:	b410      	push	{r4}
 800c94c:	6093      	str	r3, [r2, #8]
 800c94e:	da08      	bge.n	800c962 <__sfputc_r+0x1e>
 800c950:	6994      	ldr	r4, [r2, #24]
 800c952:	42a3      	cmp	r3, r4
 800c954:	db01      	blt.n	800c95a <__sfputc_r+0x16>
 800c956:	290a      	cmp	r1, #10
 800c958:	d103      	bne.n	800c962 <__sfputc_r+0x1e>
 800c95a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c95e:	f000 bb6d 	b.w	800d03c <__swbuf_r>
 800c962:	6813      	ldr	r3, [r2, #0]
 800c964:	1c58      	adds	r0, r3, #1
 800c966:	6010      	str	r0, [r2, #0]
 800c968:	7019      	strb	r1, [r3, #0]
 800c96a:	4608      	mov	r0, r1
 800c96c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <__sfputs_r>:
 800c972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c974:	4606      	mov	r6, r0
 800c976:	460f      	mov	r7, r1
 800c978:	4614      	mov	r4, r2
 800c97a:	18d5      	adds	r5, r2, r3
 800c97c:	42ac      	cmp	r4, r5
 800c97e:	d101      	bne.n	800c984 <__sfputs_r+0x12>
 800c980:	2000      	movs	r0, #0
 800c982:	e007      	b.n	800c994 <__sfputs_r+0x22>
 800c984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c988:	463a      	mov	r2, r7
 800c98a:	4630      	mov	r0, r6
 800c98c:	f7ff ffda 	bl	800c944 <__sfputc_r>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	d1f3      	bne.n	800c97c <__sfputs_r+0xa>
 800c994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c998 <_vfiprintf_r>:
 800c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99c:	460d      	mov	r5, r1
 800c99e:	b09d      	sub	sp, #116	@ 0x74
 800c9a0:	4614      	mov	r4, r2
 800c9a2:	4698      	mov	r8, r3
 800c9a4:	4606      	mov	r6, r0
 800c9a6:	b118      	cbz	r0, 800c9b0 <_vfiprintf_r+0x18>
 800c9a8:	6a03      	ldr	r3, [r0, #32]
 800c9aa:	b90b      	cbnz	r3, 800c9b0 <_vfiprintf_r+0x18>
 800c9ac:	f7ff fe68 	bl	800c680 <__sinit>
 800c9b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9b2:	07d9      	lsls	r1, r3, #31
 800c9b4:	d405      	bmi.n	800c9c2 <_vfiprintf_r+0x2a>
 800c9b6:	89ab      	ldrh	r3, [r5, #12]
 800c9b8:	059a      	lsls	r2, r3, #22
 800c9ba:	d402      	bmi.n	800c9c2 <_vfiprintf_r+0x2a>
 800c9bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9be:	f7ff ff74 	bl	800c8aa <__retarget_lock_acquire_recursive>
 800c9c2:	89ab      	ldrh	r3, [r5, #12]
 800c9c4:	071b      	lsls	r3, r3, #28
 800c9c6:	d501      	bpl.n	800c9cc <_vfiprintf_r+0x34>
 800c9c8:	692b      	ldr	r3, [r5, #16]
 800c9ca:	b99b      	cbnz	r3, 800c9f4 <_vfiprintf_r+0x5c>
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	f000 fb72 	bl	800d0b8 <__swsetup_r>
 800c9d4:	b170      	cbz	r0, 800c9f4 <_vfiprintf_r+0x5c>
 800c9d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9d8:	07dc      	lsls	r4, r3, #31
 800c9da:	d504      	bpl.n	800c9e6 <_vfiprintf_r+0x4e>
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e0:	b01d      	add	sp, #116	@ 0x74
 800c9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	0598      	lsls	r0, r3, #22
 800c9ea:	d4f7      	bmi.n	800c9dc <_vfiprintf_r+0x44>
 800c9ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9ee:	f7ff ff5d 	bl	800c8ac <__retarget_lock_release_recursive>
 800c9f2:	e7f3      	b.n	800c9dc <_vfiprintf_r+0x44>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9f8:	2320      	movs	r3, #32
 800c9fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca02:	2330      	movs	r3, #48	@ 0x30
 800ca04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cbb4 <_vfiprintf_r+0x21c>
 800ca08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca0c:	f04f 0901 	mov.w	r9, #1
 800ca10:	4623      	mov	r3, r4
 800ca12:	469a      	mov	sl, r3
 800ca14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca18:	b10a      	cbz	r2, 800ca1e <_vfiprintf_r+0x86>
 800ca1a:	2a25      	cmp	r2, #37	@ 0x25
 800ca1c:	d1f9      	bne.n	800ca12 <_vfiprintf_r+0x7a>
 800ca1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca22:	d00b      	beq.n	800ca3c <_vfiprintf_r+0xa4>
 800ca24:	465b      	mov	r3, fp
 800ca26:	4622      	mov	r2, r4
 800ca28:	4629      	mov	r1, r5
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f7ff ffa1 	bl	800c972 <__sfputs_r>
 800ca30:	3001      	adds	r0, #1
 800ca32:	f000 80a7 	beq.w	800cb84 <_vfiprintf_r+0x1ec>
 800ca36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca38:	445a      	add	r2, fp
 800ca3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f000 809f 	beq.w	800cb84 <_vfiprintf_r+0x1ec>
 800ca46:	2300      	movs	r3, #0
 800ca48:	f04f 32ff 	mov.w	r2, #4294967295
 800ca4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca50:	f10a 0a01 	add.w	sl, sl, #1
 800ca54:	9304      	str	r3, [sp, #16]
 800ca56:	9307      	str	r3, [sp, #28]
 800ca58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca5e:	4654      	mov	r4, sl
 800ca60:	2205      	movs	r2, #5
 800ca62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca66:	4853      	ldr	r0, [pc, #332]	@ (800cbb4 <_vfiprintf_r+0x21c>)
 800ca68:	f7f3 fbb2 	bl	80001d0 <memchr>
 800ca6c:	9a04      	ldr	r2, [sp, #16]
 800ca6e:	b9d8      	cbnz	r0, 800caa8 <_vfiprintf_r+0x110>
 800ca70:	06d1      	lsls	r1, r2, #27
 800ca72:	bf44      	itt	mi
 800ca74:	2320      	movmi	r3, #32
 800ca76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca7a:	0713      	lsls	r3, r2, #28
 800ca7c:	bf44      	itt	mi
 800ca7e:	232b      	movmi	r3, #43	@ 0x2b
 800ca80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca84:	f89a 3000 	ldrb.w	r3, [sl]
 800ca88:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca8a:	d015      	beq.n	800cab8 <_vfiprintf_r+0x120>
 800ca8c:	9a07      	ldr	r2, [sp, #28]
 800ca8e:	4654      	mov	r4, sl
 800ca90:	2000      	movs	r0, #0
 800ca92:	f04f 0c0a 	mov.w	ip, #10
 800ca96:	4621      	mov	r1, r4
 800ca98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca9c:	3b30      	subs	r3, #48	@ 0x30
 800ca9e:	2b09      	cmp	r3, #9
 800caa0:	d94b      	bls.n	800cb3a <_vfiprintf_r+0x1a2>
 800caa2:	b1b0      	cbz	r0, 800cad2 <_vfiprintf_r+0x13a>
 800caa4:	9207      	str	r2, [sp, #28]
 800caa6:	e014      	b.n	800cad2 <_vfiprintf_r+0x13a>
 800caa8:	eba0 0308 	sub.w	r3, r0, r8
 800caac:	fa09 f303 	lsl.w	r3, r9, r3
 800cab0:	4313      	orrs	r3, r2
 800cab2:	9304      	str	r3, [sp, #16]
 800cab4:	46a2      	mov	sl, r4
 800cab6:	e7d2      	b.n	800ca5e <_vfiprintf_r+0xc6>
 800cab8:	9b03      	ldr	r3, [sp, #12]
 800caba:	1d19      	adds	r1, r3, #4
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	9103      	str	r1, [sp, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	bfbb      	ittet	lt
 800cac4:	425b      	neglt	r3, r3
 800cac6:	f042 0202 	orrlt.w	r2, r2, #2
 800caca:	9307      	strge	r3, [sp, #28]
 800cacc:	9307      	strlt	r3, [sp, #28]
 800cace:	bfb8      	it	lt
 800cad0:	9204      	strlt	r2, [sp, #16]
 800cad2:	7823      	ldrb	r3, [r4, #0]
 800cad4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cad6:	d10a      	bne.n	800caee <_vfiprintf_r+0x156>
 800cad8:	7863      	ldrb	r3, [r4, #1]
 800cada:	2b2a      	cmp	r3, #42	@ 0x2a
 800cadc:	d132      	bne.n	800cb44 <_vfiprintf_r+0x1ac>
 800cade:	9b03      	ldr	r3, [sp, #12]
 800cae0:	1d1a      	adds	r2, r3, #4
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	9203      	str	r2, [sp, #12]
 800cae6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800caea:	3402      	adds	r4, #2
 800caec:	9305      	str	r3, [sp, #20]
 800caee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cbc4 <_vfiprintf_r+0x22c>
 800caf2:	7821      	ldrb	r1, [r4, #0]
 800caf4:	2203      	movs	r2, #3
 800caf6:	4650      	mov	r0, sl
 800caf8:	f7f3 fb6a 	bl	80001d0 <memchr>
 800cafc:	b138      	cbz	r0, 800cb0e <_vfiprintf_r+0x176>
 800cafe:	9b04      	ldr	r3, [sp, #16]
 800cb00:	eba0 000a 	sub.w	r0, r0, sl
 800cb04:	2240      	movs	r2, #64	@ 0x40
 800cb06:	4082      	lsls	r2, r0
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	3401      	adds	r4, #1
 800cb0c:	9304      	str	r3, [sp, #16]
 800cb0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb12:	4829      	ldr	r0, [pc, #164]	@ (800cbb8 <_vfiprintf_r+0x220>)
 800cb14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb18:	2206      	movs	r2, #6
 800cb1a:	f7f3 fb59 	bl	80001d0 <memchr>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d03f      	beq.n	800cba2 <_vfiprintf_r+0x20a>
 800cb22:	4b26      	ldr	r3, [pc, #152]	@ (800cbbc <_vfiprintf_r+0x224>)
 800cb24:	bb1b      	cbnz	r3, 800cb6e <_vfiprintf_r+0x1d6>
 800cb26:	9b03      	ldr	r3, [sp, #12]
 800cb28:	3307      	adds	r3, #7
 800cb2a:	f023 0307 	bic.w	r3, r3, #7
 800cb2e:	3308      	adds	r3, #8
 800cb30:	9303      	str	r3, [sp, #12]
 800cb32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb34:	443b      	add	r3, r7
 800cb36:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb38:	e76a      	b.n	800ca10 <_vfiprintf_r+0x78>
 800cb3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb3e:	460c      	mov	r4, r1
 800cb40:	2001      	movs	r0, #1
 800cb42:	e7a8      	b.n	800ca96 <_vfiprintf_r+0xfe>
 800cb44:	2300      	movs	r3, #0
 800cb46:	3401      	adds	r4, #1
 800cb48:	9305      	str	r3, [sp, #20]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	f04f 0c0a 	mov.w	ip, #10
 800cb50:	4620      	mov	r0, r4
 800cb52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb56:	3a30      	subs	r2, #48	@ 0x30
 800cb58:	2a09      	cmp	r2, #9
 800cb5a:	d903      	bls.n	800cb64 <_vfiprintf_r+0x1cc>
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d0c6      	beq.n	800caee <_vfiprintf_r+0x156>
 800cb60:	9105      	str	r1, [sp, #20]
 800cb62:	e7c4      	b.n	800caee <_vfiprintf_r+0x156>
 800cb64:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb68:	4604      	mov	r4, r0
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e7f0      	b.n	800cb50 <_vfiprintf_r+0x1b8>
 800cb6e:	ab03      	add	r3, sp, #12
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	462a      	mov	r2, r5
 800cb74:	4b12      	ldr	r3, [pc, #72]	@ (800cbc0 <_vfiprintf_r+0x228>)
 800cb76:	a904      	add	r1, sp, #16
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f3af 8000 	nop.w
 800cb7e:	4607      	mov	r7, r0
 800cb80:	1c78      	adds	r0, r7, #1
 800cb82:	d1d6      	bne.n	800cb32 <_vfiprintf_r+0x19a>
 800cb84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb86:	07d9      	lsls	r1, r3, #31
 800cb88:	d405      	bmi.n	800cb96 <_vfiprintf_r+0x1fe>
 800cb8a:	89ab      	ldrh	r3, [r5, #12]
 800cb8c:	059a      	lsls	r2, r3, #22
 800cb8e:	d402      	bmi.n	800cb96 <_vfiprintf_r+0x1fe>
 800cb90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb92:	f7ff fe8b 	bl	800c8ac <__retarget_lock_release_recursive>
 800cb96:	89ab      	ldrh	r3, [r5, #12]
 800cb98:	065b      	lsls	r3, r3, #25
 800cb9a:	f53f af1f 	bmi.w	800c9dc <_vfiprintf_r+0x44>
 800cb9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cba0:	e71e      	b.n	800c9e0 <_vfiprintf_r+0x48>
 800cba2:	ab03      	add	r3, sp, #12
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	462a      	mov	r2, r5
 800cba8:	4b05      	ldr	r3, [pc, #20]	@ (800cbc0 <_vfiprintf_r+0x228>)
 800cbaa:	a904      	add	r1, sp, #16
 800cbac:	4630      	mov	r0, r6
 800cbae:	f000 f879 	bl	800cca4 <_printf_i>
 800cbb2:	e7e4      	b.n	800cb7e <_vfiprintf_r+0x1e6>
 800cbb4:	0800d2c0 	.word	0x0800d2c0
 800cbb8:	0800d2ca 	.word	0x0800d2ca
 800cbbc:	00000000 	.word	0x00000000
 800cbc0:	0800c973 	.word	0x0800c973
 800cbc4:	0800d2c6 	.word	0x0800d2c6

0800cbc8 <_printf_common>:
 800cbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbcc:	4616      	mov	r6, r2
 800cbce:	4698      	mov	r8, r3
 800cbd0:	688a      	ldr	r2, [r1, #8]
 800cbd2:	690b      	ldr	r3, [r1, #16]
 800cbd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	bfb8      	it	lt
 800cbdc:	4613      	movlt	r3, r2
 800cbde:	6033      	str	r3, [r6, #0]
 800cbe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	b10a      	cbz	r2, 800cbee <_printf_common+0x26>
 800cbea:	3301      	adds	r3, #1
 800cbec:	6033      	str	r3, [r6, #0]
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	0699      	lsls	r1, r3, #26
 800cbf2:	bf42      	ittt	mi
 800cbf4:	6833      	ldrmi	r3, [r6, #0]
 800cbf6:	3302      	addmi	r3, #2
 800cbf8:	6033      	strmi	r3, [r6, #0]
 800cbfa:	6825      	ldr	r5, [r4, #0]
 800cbfc:	f015 0506 	ands.w	r5, r5, #6
 800cc00:	d106      	bne.n	800cc10 <_printf_common+0x48>
 800cc02:	f104 0a19 	add.w	sl, r4, #25
 800cc06:	68e3      	ldr	r3, [r4, #12]
 800cc08:	6832      	ldr	r2, [r6, #0]
 800cc0a:	1a9b      	subs	r3, r3, r2
 800cc0c:	42ab      	cmp	r3, r5
 800cc0e:	dc26      	bgt.n	800cc5e <_printf_common+0x96>
 800cc10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cc14:	6822      	ldr	r2, [r4, #0]
 800cc16:	3b00      	subs	r3, #0
 800cc18:	bf18      	it	ne
 800cc1a:	2301      	movne	r3, #1
 800cc1c:	0692      	lsls	r2, r2, #26
 800cc1e:	d42b      	bmi.n	800cc78 <_printf_common+0xb0>
 800cc20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cc24:	4641      	mov	r1, r8
 800cc26:	4638      	mov	r0, r7
 800cc28:	47c8      	blx	r9
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	d01e      	beq.n	800cc6c <_printf_common+0xa4>
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	6922      	ldr	r2, [r4, #16]
 800cc32:	f003 0306 	and.w	r3, r3, #6
 800cc36:	2b04      	cmp	r3, #4
 800cc38:	bf02      	ittt	eq
 800cc3a:	68e5      	ldreq	r5, [r4, #12]
 800cc3c:	6833      	ldreq	r3, [r6, #0]
 800cc3e:	1aed      	subeq	r5, r5, r3
 800cc40:	68a3      	ldr	r3, [r4, #8]
 800cc42:	bf0c      	ite	eq
 800cc44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc48:	2500      	movne	r5, #0
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	bfc4      	itt	gt
 800cc4e:	1a9b      	subgt	r3, r3, r2
 800cc50:	18ed      	addgt	r5, r5, r3
 800cc52:	2600      	movs	r6, #0
 800cc54:	341a      	adds	r4, #26
 800cc56:	42b5      	cmp	r5, r6
 800cc58:	d11a      	bne.n	800cc90 <_printf_common+0xc8>
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	e008      	b.n	800cc70 <_printf_common+0xa8>
 800cc5e:	2301      	movs	r3, #1
 800cc60:	4652      	mov	r2, sl
 800cc62:	4641      	mov	r1, r8
 800cc64:	4638      	mov	r0, r7
 800cc66:	47c8      	blx	r9
 800cc68:	3001      	adds	r0, #1
 800cc6a:	d103      	bne.n	800cc74 <_printf_common+0xac>
 800cc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc74:	3501      	adds	r5, #1
 800cc76:	e7c6      	b.n	800cc06 <_printf_common+0x3e>
 800cc78:	18e1      	adds	r1, r4, r3
 800cc7a:	1c5a      	adds	r2, r3, #1
 800cc7c:	2030      	movs	r0, #48	@ 0x30
 800cc7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc82:	4422      	add	r2, r4
 800cc84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc8c:	3302      	adds	r3, #2
 800cc8e:	e7c7      	b.n	800cc20 <_printf_common+0x58>
 800cc90:	2301      	movs	r3, #1
 800cc92:	4622      	mov	r2, r4
 800cc94:	4641      	mov	r1, r8
 800cc96:	4638      	mov	r0, r7
 800cc98:	47c8      	blx	r9
 800cc9a:	3001      	adds	r0, #1
 800cc9c:	d0e6      	beq.n	800cc6c <_printf_common+0xa4>
 800cc9e:	3601      	adds	r6, #1
 800cca0:	e7d9      	b.n	800cc56 <_printf_common+0x8e>
	...

0800cca4 <_printf_i>:
 800cca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cca8:	7e0f      	ldrb	r7, [r1, #24]
 800ccaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ccac:	2f78      	cmp	r7, #120	@ 0x78
 800ccae:	4691      	mov	r9, r2
 800ccb0:	4680      	mov	r8, r0
 800ccb2:	460c      	mov	r4, r1
 800ccb4:	469a      	mov	sl, r3
 800ccb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ccba:	d807      	bhi.n	800cccc <_printf_i+0x28>
 800ccbc:	2f62      	cmp	r7, #98	@ 0x62
 800ccbe:	d80a      	bhi.n	800ccd6 <_printf_i+0x32>
 800ccc0:	2f00      	cmp	r7, #0
 800ccc2:	f000 80d2 	beq.w	800ce6a <_printf_i+0x1c6>
 800ccc6:	2f58      	cmp	r7, #88	@ 0x58
 800ccc8:	f000 80b9 	beq.w	800ce3e <_printf_i+0x19a>
 800cccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ccd4:	e03a      	b.n	800cd4c <_printf_i+0xa8>
 800ccd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ccda:	2b15      	cmp	r3, #21
 800ccdc:	d8f6      	bhi.n	800cccc <_printf_i+0x28>
 800ccde:	a101      	add	r1, pc, #4	@ (adr r1, 800cce4 <_printf_i+0x40>)
 800cce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cce4:	0800cd3d 	.word	0x0800cd3d
 800cce8:	0800cd51 	.word	0x0800cd51
 800ccec:	0800cccd 	.word	0x0800cccd
 800ccf0:	0800cccd 	.word	0x0800cccd
 800ccf4:	0800cccd 	.word	0x0800cccd
 800ccf8:	0800cccd 	.word	0x0800cccd
 800ccfc:	0800cd51 	.word	0x0800cd51
 800cd00:	0800cccd 	.word	0x0800cccd
 800cd04:	0800cccd 	.word	0x0800cccd
 800cd08:	0800cccd 	.word	0x0800cccd
 800cd0c:	0800cccd 	.word	0x0800cccd
 800cd10:	0800ce51 	.word	0x0800ce51
 800cd14:	0800cd7b 	.word	0x0800cd7b
 800cd18:	0800ce0b 	.word	0x0800ce0b
 800cd1c:	0800cccd 	.word	0x0800cccd
 800cd20:	0800cccd 	.word	0x0800cccd
 800cd24:	0800ce73 	.word	0x0800ce73
 800cd28:	0800cccd 	.word	0x0800cccd
 800cd2c:	0800cd7b 	.word	0x0800cd7b
 800cd30:	0800cccd 	.word	0x0800cccd
 800cd34:	0800cccd 	.word	0x0800cccd
 800cd38:	0800ce13 	.word	0x0800ce13
 800cd3c:	6833      	ldr	r3, [r6, #0]
 800cd3e:	1d1a      	adds	r2, r3, #4
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	6032      	str	r2, [r6, #0]
 800cd44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e09d      	b.n	800ce8c <_printf_i+0x1e8>
 800cd50:	6833      	ldr	r3, [r6, #0]
 800cd52:	6820      	ldr	r0, [r4, #0]
 800cd54:	1d19      	adds	r1, r3, #4
 800cd56:	6031      	str	r1, [r6, #0]
 800cd58:	0606      	lsls	r6, r0, #24
 800cd5a:	d501      	bpl.n	800cd60 <_printf_i+0xbc>
 800cd5c:	681d      	ldr	r5, [r3, #0]
 800cd5e:	e003      	b.n	800cd68 <_printf_i+0xc4>
 800cd60:	0645      	lsls	r5, r0, #25
 800cd62:	d5fb      	bpl.n	800cd5c <_printf_i+0xb8>
 800cd64:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd68:	2d00      	cmp	r5, #0
 800cd6a:	da03      	bge.n	800cd74 <_printf_i+0xd0>
 800cd6c:	232d      	movs	r3, #45	@ 0x2d
 800cd6e:	426d      	negs	r5, r5
 800cd70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd74:	4859      	ldr	r0, [pc, #356]	@ (800cedc <_printf_i+0x238>)
 800cd76:	230a      	movs	r3, #10
 800cd78:	e011      	b.n	800cd9e <_printf_i+0xfa>
 800cd7a:	6821      	ldr	r1, [r4, #0]
 800cd7c:	6833      	ldr	r3, [r6, #0]
 800cd7e:	0608      	lsls	r0, r1, #24
 800cd80:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd84:	d402      	bmi.n	800cd8c <_printf_i+0xe8>
 800cd86:	0649      	lsls	r1, r1, #25
 800cd88:	bf48      	it	mi
 800cd8a:	b2ad      	uxthmi	r5, r5
 800cd8c:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd8e:	4853      	ldr	r0, [pc, #332]	@ (800cedc <_printf_i+0x238>)
 800cd90:	6033      	str	r3, [r6, #0]
 800cd92:	bf14      	ite	ne
 800cd94:	230a      	movne	r3, #10
 800cd96:	2308      	moveq	r3, #8
 800cd98:	2100      	movs	r1, #0
 800cd9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd9e:	6866      	ldr	r6, [r4, #4]
 800cda0:	60a6      	str	r6, [r4, #8]
 800cda2:	2e00      	cmp	r6, #0
 800cda4:	bfa2      	ittt	ge
 800cda6:	6821      	ldrge	r1, [r4, #0]
 800cda8:	f021 0104 	bicge.w	r1, r1, #4
 800cdac:	6021      	strge	r1, [r4, #0]
 800cdae:	b90d      	cbnz	r5, 800cdb4 <_printf_i+0x110>
 800cdb0:	2e00      	cmp	r6, #0
 800cdb2:	d04b      	beq.n	800ce4c <_printf_i+0x1a8>
 800cdb4:	4616      	mov	r6, r2
 800cdb6:	fbb5 f1f3 	udiv	r1, r5, r3
 800cdba:	fb03 5711 	mls	r7, r3, r1, r5
 800cdbe:	5dc7      	ldrb	r7, [r0, r7]
 800cdc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cdc4:	462f      	mov	r7, r5
 800cdc6:	42bb      	cmp	r3, r7
 800cdc8:	460d      	mov	r5, r1
 800cdca:	d9f4      	bls.n	800cdb6 <_printf_i+0x112>
 800cdcc:	2b08      	cmp	r3, #8
 800cdce:	d10b      	bne.n	800cde8 <_printf_i+0x144>
 800cdd0:	6823      	ldr	r3, [r4, #0]
 800cdd2:	07df      	lsls	r7, r3, #31
 800cdd4:	d508      	bpl.n	800cde8 <_printf_i+0x144>
 800cdd6:	6923      	ldr	r3, [r4, #16]
 800cdd8:	6861      	ldr	r1, [r4, #4]
 800cdda:	4299      	cmp	r1, r3
 800cddc:	bfde      	ittt	le
 800cdde:	2330      	movle	r3, #48	@ 0x30
 800cde0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cde4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cde8:	1b92      	subs	r2, r2, r6
 800cdea:	6122      	str	r2, [r4, #16]
 800cdec:	f8cd a000 	str.w	sl, [sp]
 800cdf0:	464b      	mov	r3, r9
 800cdf2:	aa03      	add	r2, sp, #12
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	4640      	mov	r0, r8
 800cdf8:	f7ff fee6 	bl	800cbc8 <_printf_common>
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	d14a      	bne.n	800ce96 <_printf_i+0x1f2>
 800ce00:	f04f 30ff 	mov.w	r0, #4294967295
 800ce04:	b004      	add	sp, #16
 800ce06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	f043 0320 	orr.w	r3, r3, #32
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	4833      	ldr	r0, [pc, #204]	@ (800cee0 <_printf_i+0x23c>)
 800ce14:	2778      	movs	r7, #120	@ 0x78
 800ce16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ce1a:	6823      	ldr	r3, [r4, #0]
 800ce1c:	6831      	ldr	r1, [r6, #0]
 800ce1e:	061f      	lsls	r7, r3, #24
 800ce20:	f851 5b04 	ldr.w	r5, [r1], #4
 800ce24:	d402      	bmi.n	800ce2c <_printf_i+0x188>
 800ce26:	065f      	lsls	r7, r3, #25
 800ce28:	bf48      	it	mi
 800ce2a:	b2ad      	uxthmi	r5, r5
 800ce2c:	6031      	str	r1, [r6, #0]
 800ce2e:	07d9      	lsls	r1, r3, #31
 800ce30:	bf44      	itt	mi
 800ce32:	f043 0320 	orrmi.w	r3, r3, #32
 800ce36:	6023      	strmi	r3, [r4, #0]
 800ce38:	b11d      	cbz	r5, 800ce42 <_printf_i+0x19e>
 800ce3a:	2310      	movs	r3, #16
 800ce3c:	e7ac      	b.n	800cd98 <_printf_i+0xf4>
 800ce3e:	4827      	ldr	r0, [pc, #156]	@ (800cedc <_printf_i+0x238>)
 800ce40:	e7e9      	b.n	800ce16 <_printf_i+0x172>
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	f023 0320 	bic.w	r3, r3, #32
 800ce48:	6023      	str	r3, [r4, #0]
 800ce4a:	e7f6      	b.n	800ce3a <_printf_i+0x196>
 800ce4c:	4616      	mov	r6, r2
 800ce4e:	e7bd      	b.n	800cdcc <_printf_i+0x128>
 800ce50:	6833      	ldr	r3, [r6, #0]
 800ce52:	6825      	ldr	r5, [r4, #0]
 800ce54:	6961      	ldr	r1, [r4, #20]
 800ce56:	1d18      	adds	r0, r3, #4
 800ce58:	6030      	str	r0, [r6, #0]
 800ce5a:	062e      	lsls	r6, r5, #24
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	d501      	bpl.n	800ce64 <_printf_i+0x1c0>
 800ce60:	6019      	str	r1, [r3, #0]
 800ce62:	e002      	b.n	800ce6a <_printf_i+0x1c6>
 800ce64:	0668      	lsls	r0, r5, #25
 800ce66:	d5fb      	bpl.n	800ce60 <_printf_i+0x1bc>
 800ce68:	8019      	strh	r1, [r3, #0]
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	6123      	str	r3, [r4, #16]
 800ce6e:	4616      	mov	r6, r2
 800ce70:	e7bc      	b.n	800cdec <_printf_i+0x148>
 800ce72:	6833      	ldr	r3, [r6, #0]
 800ce74:	1d1a      	adds	r2, r3, #4
 800ce76:	6032      	str	r2, [r6, #0]
 800ce78:	681e      	ldr	r6, [r3, #0]
 800ce7a:	6862      	ldr	r2, [r4, #4]
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f7f3 f9a6 	bl	80001d0 <memchr>
 800ce84:	b108      	cbz	r0, 800ce8a <_printf_i+0x1e6>
 800ce86:	1b80      	subs	r0, r0, r6
 800ce88:	6060      	str	r0, [r4, #4]
 800ce8a:	6863      	ldr	r3, [r4, #4]
 800ce8c:	6123      	str	r3, [r4, #16]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce94:	e7aa      	b.n	800cdec <_printf_i+0x148>
 800ce96:	6923      	ldr	r3, [r4, #16]
 800ce98:	4632      	mov	r2, r6
 800ce9a:	4649      	mov	r1, r9
 800ce9c:	4640      	mov	r0, r8
 800ce9e:	47d0      	blx	sl
 800cea0:	3001      	adds	r0, #1
 800cea2:	d0ad      	beq.n	800ce00 <_printf_i+0x15c>
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	079b      	lsls	r3, r3, #30
 800cea8:	d413      	bmi.n	800ced2 <_printf_i+0x22e>
 800ceaa:	68e0      	ldr	r0, [r4, #12]
 800ceac:	9b03      	ldr	r3, [sp, #12]
 800ceae:	4298      	cmp	r0, r3
 800ceb0:	bfb8      	it	lt
 800ceb2:	4618      	movlt	r0, r3
 800ceb4:	e7a6      	b.n	800ce04 <_printf_i+0x160>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	4632      	mov	r2, r6
 800ceba:	4649      	mov	r1, r9
 800cebc:	4640      	mov	r0, r8
 800cebe:	47d0      	blx	sl
 800cec0:	3001      	adds	r0, #1
 800cec2:	d09d      	beq.n	800ce00 <_printf_i+0x15c>
 800cec4:	3501      	adds	r5, #1
 800cec6:	68e3      	ldr	r3, [r4, #12]
 800cec8:	9903      	ldr	r1, [sp, #12]
 800ceca:	1a5b      	subs	r3, r3, r1
 800cecc:	42ab      	cmp	r3, r5
 800cece:	dcf2      	bgt.n	800ceb6 <_printf_i+0x212>
 800ced0:	e7eb      	b.n	800ceaa <_printf_i+0x206>
 800ced2:	2500      	movs	r5, #0
 800ced4:	f104 0619 	add.w	r6, r4, #25
 800ced8:	e7f5      	b.n	800cec6 <_printf_i+0x222>
 800ceda:	bf00      	nop
 800cedc:	0800d2d1 	.word	0x0800d2d1
 800cee0:	0800d2e2 	.word	0x0800d2e2

0800cee4 <__sflush_r>:
 800cee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceec:	0716      	lsls	r6, r2, #28
 800ceee:	4605      	mov	r5, r0
 800cef0:	460c      	mov	r4, r1
 800cef2:	d454      	bmi.n	800cf9e <__sflush_r+0xba>
 800cef4:	684b      	ldr	r3, [r1, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	dc02      	bgt.n	800cf00 <__sflush_r+0x1c>
 800cefa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	dd48      	ble.n	800cf92 <__sflush_r+0xae>
 800cf00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf02:	2e00      	cmp	r6, #0
 800cf04:	d045      	beq.n	800cf92 <__sflush_r+0xae>
 800cf06:	2300      	movs	r3, #0
 800cf08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf0c:	682f      	ldr	r7, [r5, #0]
 800cf0e:	6a21      	ldr	r1, [r4, #32]
 800cf10:	602b      	str	r3, [r5, #0]
 800cf12:	d030      	beq.n	800cf76 <__sflush_r+0x92>
 800cf14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf16:	89a3      	ldrh	r3, [r4, #12]
 800cf18:	0759      	lsls	r1, r3, #29
 800cf1a:	d505      	bpl.n	800cf28 <__sflush_r+0x44>
 800cf1c:	6863      	ldr	r3, [r4, #4]
 800cf1e:	1ad2      	subs	r2, r2, r3
 800cf20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf22:	b10b      	cbz	r3, 800cf28 <__sflush_r+0x44>
 800cf24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf26:	1ad2      	subs	r2, r2, r3
 800cf28:	2300      	movs	r3, #0
 800cf2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf2c:	6a21      	ldr	r1, [r4, #32]
 800cf2e:	4628      	mov	r0, r5
 800cf30:	47b0      	blx	r6
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	d106      	bne.n	800cf46 <__sflush_r+0x62>
 800cf38:	6829      	ldr	r1, [r5, #0]
 800cf3a:	291d      	cmp	r1, #29
 800cf3c:	d82b      	bhi.n	800cf96 <__sflush_r+0xb2>
 800cf3e:	4a2a      	ldr	r2, [pc, #168]	@ (800cfe8 <__sflush_r+0x104>)
 800cf40:	410a      	asrs	r2, r1
 800cf42:	07d6      	lsls	r6, r2, #31
 800cf44:	d427      	bmi.n	800cf96 <__sflush_r+0xb2>
 800cf46:	2200      	movs	r2, #0
 800cf48:	6062      	str	r2, [r4, #4]
 800cf4a:	04d9      	lsls	r1, r3, #19
 800cf4c:	6922      	ldr	r2, [r4, #16]
 800cf4e:	6022      	str	r2, [r4, #0]
 800cf50:	d504      	bpl.n	800cf5c <__sflush_r+0x78>
 800cf52:	1c42      	adds	r2, r0, #1
 800cf54:	d101      	bne.n	800cf5a <__sflush_r+0x76>
 800cf56:	682b      	ldr	r3, [r5, #0]
 800cf58:	b903      	cbnz	r3, 800cf5c <__sflush_r+0x78>
 800cf5a:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf5e:	602f      	str	r7, [r5, #0]
 800cf60:	b1b9      	cbz	r1, 800cf92 <__sflush_r+0xae>
 800cf62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf66:	4299      	cmp	r1, r3
 800cf68:	d002      	beq.n	800cf70 <__sflush_r+0x8c>
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	f7ff fca0 	bl	800c8b0 <_free_r>
 800cf70:	2300      	movs	r3, #0
 800cf72:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf74:	e00d      	b.n	800cf92 <__sflush_r+0xae>
 800cf76:	2301      	movs	r3, #1
 800cf78:	4628      	mov	r0, r5
 800cf7a:	47b0      	blx	r6
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	1c50      	adds	r0, r2, #1
 800cf80:	d1c9      	bne.n	800cf16 <__sflush_r+0x32>
 800cf82:	682b      	ldr	r3, [r5, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d0c6      	beq.n	800cf16 <__sflush_r+0x32>
 800cf88:	2b1d      	cmp	r3, #29
 800cf8a:	d001      	beq.n	800cf90 <__sflush_r+0xac>
 800cf8c:	2b16      	cmp	r3, #22
 800cf8e:	d11e      	bne.n	800cfce <__sflush_r+0xea>
 800cf90:	602f      	str	r7, [r5, #0]
 800cf92:	2000      	movs	r0, #0
 800cf94:	e022      	b.n	800cfdc <__sflush_r+0xf8>
 800cf96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf9a:	b21b      	sxth	r3, r3
 800cf9c:	e01b      	b.n	800cfd6 <__sflush_r+0xf2>
 800cf9e:	690f      	ldr	r7, [r1, #16]
 800cfa0:	2f00      	cmp	r7, #0
 800cfa2:	d0f6      	beq.n	800cf92 <__sflush_r+0xae>
 800cfa4:	0793      	lsls	r3, r2, #30
 800cfa6:	680e      	ldr	r6, [r1, #0]
 800cfa8:	bf08      	it	eq
 800cfaa:	694b      	ldreq	r3, [r1, #20]
 800cfac:	600f      	str	r7, [r1, #0]
 800cfae:	bf18      	it	ne
 800cfb0:	2300      	movne	r3, #0
 800cfb2:	eba6 0807 	sub.w	r8, r6, r7
 800cfb6:	608b      	str	r3, [r1, #8]
 800cfb8:	f1b8 0f00 	cmp.w	r8, #0
 800cfbc:	dde9      	ble.n	800cf92 <__sflush_r+0xae>
 800cfbe:	6a21      	ldr	r1, [r4, #32]
 800cfc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cfc2:	4643      	mov	r3, r8
 800cfc4:	463a      	mov	r2, r7
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	47b0      	blx	r6
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	dc08      	bgt.n	800cfe0 <__sflush_r+0xfc>
 800cfce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfd6:	81a3      	strh	r3, [r4, #12]
 800cfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe0:	4407      	add	r7, r0
 800cfe2:	eba8 0800 	sub.w	r8, r8, r0
 800cfe6:	e7e7      	b.n	800cfb8 <__sflush_r+0xd4>
 800cfe8:	dfbffffe 	.word	0xdfbffffe

0800cfec <_fflush_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	690b      	ldr	r3, [r1, #16]
 800cff0:	4605      	mov	r5, r0
 800cff2:	460c      	mov	r4, r1
 800cff4:	b913      	cbnz	r3, 800cffc <_fflush_r+0x10>
 800cff6:	2500      	movs	r5, #0
 800cff8:	4628      	mov	r0, r5
 800cffa:	bd38      	pop	{r3, r4, r5, pc}
 800cffc:	b118      	cbz	r0, 800d006 <_fflush_r+0x1a>
 800cffe:	6a03      	ldr	r3, [r0, #32]
 800d000:	b90b      	cbnz	r3, 800d006 <_fflush_r+0x1a>
 800d002:	f7ff fb3d 	bl	800c680 <__sinit>
 800d006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d0f3      	beq.n	800cff6 <_fflush_r+0xa>
 800d00e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d010:	07d0      	lsls	r0, r2, #31
 800d012:	d404      	bmi.n	800d01e <_fflush_r+0x32>
 800d014:	0599      	lsls	r1, r3, #22
 800d016:	d402      	bmi.n	800d01e <_fflush_r+0x32>
 800d018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d01a:	f7ff fc46 	bl	800c8aa <__retarget_lock_acquire_recursive>
 800d01e:	4628      	mov	r0, r5
 800d020:	4621      	mov	r1, r4
 800d022:	f7ff ff5f 	bl	800cee4 <__sflush_r>
 800d026:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d028:	07da      	lsls	r2, r3, #31
 800d02a:	4605      	mov	r5, r0
 800d02c:	d4e4      	bmi.n	800cff8 <_fflush_r+0xc>
 800d02e:	89a3      	ldrh	r3, [r4, #12]
 800d030:	059b      	lsls	r3, r3, #22
 800d032:	d4e1      	bmi.n	800cff8 <_fflush_r+0xc>
 800d034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d036:	f7ff fc39 	bl	800c8ac <__retarget_lock_release_recursive>
 800d03a:	e7dd      	b.n	800cff8 <_fflush_r+0xc>

0800d03c <__swbuf_r>:
 800d03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03e:	460e      	mov	r6, r1
 800d040:	4614      	mov	r4, r2
 800d042:	4605      	mov	r5, r0
 800d044:	b118      	cbz	r0, 800d04e <__swbuf_r+0x12>
 800d046:	6a03      	ldr	r3, [r0, #32]
 800d048:	b90b      	cbnz	r3, 800d04e <__swbuf_r+0x12>
 800d04a:	f7ff fb19 	bl	800c680 <__sinit>
 800d04e:	69a3      	ldr	r3, [r4, #24]
 800d050:	60a3      	str	r3, [r4, #8]
 800d052:	89a3      	ldrh	r3, [r4, #12]
 800d054:	071a      	lsls	r2, r3, #28
 800d056:	d501      	bpl.n	800d05c <__swbuf_r+0x20>
 800d058:	6923      	ldr	r3, [r4, #16]
 800d05a:	b943      	cbnz	r3, 800d06e <__swbuf_r+0x32>
 800d05c:	4621      	mov	r1, r4
 800d05e:	4628      	mov	r0, r5
 800d060:	f000 f82a 	bl	800d0b8 <__swsetup_r>
 800d064:	b118      	cbz	r0, 800d06e <__swbuf_r+0x32>
 800d066:	f04f 37ff 	mov.w	r7, #4294967295
 800d06a:	4638      	mov	r0, r7
 800d06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	6922      	ldr	r2, [r4, #16]
 800d072:	1a98      	subs	r0, r3, r2
 800d074:	6963      	ldr	r3, [r4, #20]
 800d076:	b2f6      	uxtb	r6, r6
 800d078:	4283      	cmp	r3, r0
 800d07a:	4637      	mov	r7, r6
 800d07c:	dc05      	bgt.n	800d08a <__swbuf_r+0x4e>
 800d07e:	4621      	mov	r1, r4
 800d080:	4628      	mov	r0, r5
 800d082:	f7ff ffb3 	bl	800cfec <_fflush_r>
 800d086:	2800      	cmp	r0, #0
 800d088:	d1ed      	bne.n	800d066 <__swbuf_r+0x2a>
 800d08a:	68a3      	ldr	r3, [r4, #8]
 800d08c:	3b01      	subs	r3, #1
 800d08e:	60a3      	str	r3, [r4, #8]
 800d090:	6823      	ldr	r3, [r4, #0]
 800d092:	1c5a      	adds	r2, r3, #1
 800d094:	6022      	str	r2, [r4, #0]
 800d096:	701e      	strb	r6, [r3, #0]
 800d098:	6962      	ldr	r2, [r4, #20]
 800d09a:	1c43      	adds	r3, r0, #1
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d004      	beq.n	800d0aa <__swbuf_r+0x6e>
 800d0a0:	89a3      	ldrh	r3, [r4, #12]
 800d0a2:	07db      	lsls	r3, r3, #31
 800d0a4:	d5e1      	bpl.n	800d06a <__swbuf_r+0x2e>
 800d0a6:	2e0a      	cmp	r6, #10
 800d0a8:	d1df      	bne.n	800d06a <__swbuf_r+0x2e>
 800d0aa:	4621      	mov	r1, r4
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	f7ff ff9d 	bl	800cfec <_fflush_r>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d0d9      	beq.n	800d06a <__swbuf_r+0x2e>
 800d0b6:	e7d6      	b.n	800d066 <__swbuf_r+0x2a>

0800d0b8 <__swsetup_r>:
 800d0b8:	b538      	push	{r3, r4, r5, lr}
 800d0ba:	4b29      	ldr	r3, [pc, #164]	@ (800d160 <__swsetup_r+0xa8>)
 800d0bc:	4605      	mov	r5, r0
 800d0be:	6818      	ldr	r0, [r3, #0]
 800d0c0:	460c      	mov	r4, r1
 800d0c2:	b118      	cbz	r0, 800d0cc <__swsetup_r+0x14>
 800d0c4:	6a03      	ldr	r3, [r0, #32]
 800d0c6:	b90b      	cbnz	r3, 800d0cc <__swsetup_r+0x14>
 800d0c8:	f7ff fada 	bl	800c680 <__sinit>
 800d0cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0d0:	0719      	lsls	r1, r3, #28
 800d0d2:	d422      	bmi.n	800d11a <__swsetup_r+0x62>
 800d0d4:	06da      	lsls	r2, r3, #27
 800d0d6:	d407      	bmi.n	800d0e8 <__swsetup_r+0x30>
 800d0d8:	2209      	movs	r2, #9
 800d0da:	602a      	str	r2, [r5, #0]
 800d0dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0e0:	81a3      	strh	r3, [r4, #12]
 800d0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e6:	e033      	b.n	800d150 <__swsetup_r+0x98>
 800d0e8:	0758      	lsls	r0, r3, #29
 800d0ea:	d512      	bpl.n	800d112 <__swsetup_r+0x5a>
 800d0ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0ee:	b141      	cbz	r1, 800d102 <__swsetup_r+0x4a>
 800d0f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0f4:	4299      	cmp	r1, r3
 800d0f6:	d002      	beq.n	800d0fe <__swsetup_r+0x46>
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	f7ff fbd9 	bl	800c8b0 <_free_r>
 800d0fe:	2300      	movs	r3, #0
 800d100:	6363      	str	r3, [r4, #52]	@ 0x34
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d108:	81a3      	strh	r3, [r4, #12]
 800d10a:	2300      	movs	r3, #0
 800d10c:	6063      	str	r3, [r4, #4]
 800d10e:	6923      	ldr	r3, [r4, #16]
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	f043 0308 	orr.w	r3, r3, #8
 800d118:	81a3      	strh	r3, [r4, #12]
 800d11a:	6923      	ldr	r3, [r4, #16]
 800d11c:	b94b      	cbnz	r3, 800d132 <__swsetup_r+0x7a>
 800d11e:	89a3      	ldrh	r3, [r4, #12]
 800d120:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d128:	d003      	beq.n	800d132 <__swsetup_r+0x7a>
 800d12a:	4621      	mov	r1, r4
 800d12c:	4628      	mov	r0, r5
 800d12e:	f000 f83f 	bl	800d1b0 <__smakebuf_r>
 800d132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d136:	f013 0201 	ands.w	r2, r3, #1
 800d13a:	d00a      	beq.n	800d152 <__swsetup_r+0x9a>
 800d13c:	2200      	movs	r2, #0
 800d13e:	60a2      	str	r2, [r4, #8]
 800d140:	6962      	ldr	r2, [r4, #20]
 800d142:	4252      	negs	r2, r2
 800d144:	61a2      	str	r2, [r4, #24]
 800d146:	6922      	ldr	r2, [r4, #16]
 800d148:	b942      	cbnz	r2, 800d15c <__swsetup_r+0xa4>
 800d14a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d14e:	d1c5      	bne.n	800d0dc <__swsetup_r+0x24>
 800d150:	bd38      	pop	{r3, r4, r5, pc}
 800d152:	0799      	lsls	r1, r3, #30
 800d154:	bf58      	it	pl
 800d156:	6962      	ldrpl	r2, [r4, #20]
 800d158:	60a2      	str	r2, [r4, #8]
 800d15a:	e7f4      	b.n	800d146 <__swsetup_r+0x8e>
 800d15c:	2000      	movs	r0, #0
 800d15e:	e7f7      	b.n	800d150 <__swsetup_r+0x98>
 800d160:	20000038 	.word	0x20000038

0800d164 <__swhatbuf_r>:
 800d164:	b570      	push	{r4, r5, r6, lr}
 800d166:	460c      	mov	r4, r1
 800d168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d16c:	2900      	cmp	r1, #0
 800d16e:	b096      	sub	sp, #88	@ 0x58
 800d170:	4615      	mov	r5, r2
 800d172:	461e      	mov	r6, r3
 800d174:	da0d      	bge.n	800d192 <__swhatbuf_r+0x2e>
 800d176:	89a3      	ldrh	r3, [r4, #12]
 800d178:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d17c:	f04f 0100 	mov.w	r1, #0
 800d180:	bf14      	ite	ne
 800d182:	2340      	movne	r3, #64	@ 0x40
 800d184:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d188:	2000      	movs	r0, #0
 800d18a:	6031      	str	r1, [r6, #0]
 800d18c:	602b      	str	r3, [r5, #0]
 800d18e:	b016      	add	sp, #88	@ 0x58
 800d190:	bd70      	pop	{r4, r5, r6, pc}
 800d192:	466a      	mov	r2, sp
 800d194:	f000 f848 	bl	800d228 <_fstat_r>
 800d198:	2800      	cmp	r0, #0
 800d19a:	dbec      	blt.n	800d176 <__swhatbuf_r+0x12>
 800d19c:	9901      	ldr	r1, [sp, #4]
 800d19e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d1a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d1a6:	4259      	negs	r1, r3
 800d1a8:	4159      	adcs	r1, r3
 800d1aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1ae:	e7eb      	b.n	800d188 <__swhatbuf_r+0x24>

0800d1b0 <__smakebuf_r>:
 800d1b0:	898b      	ldrh	r3, [r1, #12]
 800d1b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1b4:	079d      	lsls	r5, r3, #30
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	460c      	mov	r4, r1
 800d1ba:	d507      	bpl.n	800d1cc <__smakebuf_r+0x1c>
 800d1bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	6123      	str	r3, [r4, #16]
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	6163      	str	r3, [r4, #20]
 800d1c8:	b003      	add	sp, #12
 800d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1cc:	ab01      	add	r3, sp, #4
 800d1ce:	466a      	mov	r2, sp
 800d1d0:	f7ff ffc8 	bl	800d164 <__swhatbuf_r>
 800d1d4:	9f00      	ldr	r7, [sp, #0]
 800d1d6:	4605      	mov	r5, r0
 800d1d8:	4639      	mov	r1, r7
 800d1da:	4630      	mov	r0, r6
 800d1dc:	f7ff f938 	bl	800c450 <_malloc_r>
 800d1e0:	b948      	cbnz	r0, 800d1f6 <__smakebuf_r+0x46>
 800d1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1e6:	059a      	lsls	r2, r3, #22
 800d1e8:	d4ee      	bmi.n	800d1c8 <__smakebuf_r+0x18>
 800d1ea:	f023 0303 	bic.w	r3, r3, #3
 800d1ee:	f043 0302 	orr.w	r3, r3, #2
 800d1f2:	81a3      	strh	r3, [r4, #12]
 800d1f4:	e7e2      	b.n	800d1bc <__smakebuf_r+0xc>
 800d1f6:	89a3      	ldrh	r3, [r4, #12]
 800d1f8:	6020      	str	r0, [r4, #0]
 800d1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1fe:	81a3      	strh	r3, [r4, #12]
 800d200:	9b01      	ldr	r3, [sp, #4]
 800d202:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d206:	b15b      	cbz	r3, 800d220 <__smakebuf_r+0x70>
 800d208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d20c:	4630      	mov	r0, r6
 800d20e:	f000 f81d 	bl	800d24c <_isatty_r>
 800d212:	b128      	cbz	r0, 800d220 <__smakebuf_r+0x70>
 800d214:	89a3      	ldrh	r3, [r4, #12]
 800d216:	f023 0303 	bic.w	r3, r3, #3
 800d21a:	f043 0301 	orr.w	r3, r3, #1
 800d21e:	81a3      	strh	r3, [r4, #12]
 800d220:	89a3      	ldrh	r3, [r4, #12]
 800d222:	431d      	orrs	r5, r3
 800d224:	81a5      	strh	r5, [r4, #12]
 800d226:	e7cf      	b.n	800d1c8 <__smakebuf_r+0x18>

0800d228 <_fstat_r>:
 800d228:	b538      	push	{r3, r4, r5, lr}
 800d22a:	4d07      	ldr	r5, [pc, #28]	@ (800d248 <_fstat_r+0x20>)
 800d22c:	2300      	movs	r3, #0
 800d22e:	4604      	mov	r4, r0
 800d230:	4608      	mov	r0, r1
 800d232:	4611      	mov	r1, r2
 800d234:	602b      	str	r3, [r5, #0]
 800d236:	f7f4 fe98 	bl	8001f6a <_fstat>
 800d23a:	1c43      	adds	r3, r0, #1
 800d23c:	d102      	bne.n	800d244 <_fstat_r+0x1c>
 800d23e:	682b      	ldr	r3, [r5, #0]
 800d240:	b103      	cbz	r3, 800d244 <_fstat_r+0x1c>
 800d242:	6023      	str	r3, [r4, #0]
 800d244:	bd38      	pop	{r3, r4, r5, pc}
 800d246:	bf00      	nop
 800d248:	20000bac 	.word	0x20000bac

0800d24c <_isatty_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4d06      	ldr	r5, [pc, #24]	@ (800d268 <_isatty_r+0x1c>)
 800d250:	2300      	movs	r3, #0
 800d252:	4604      	mov	r4, r0
 800d254:	4608      	mov	r0, r1
 800d256:	602b      	str	r3, [r5, #0]
 800d258:	f7f4 fe97 	bl	8001f8a <_isatty>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_isatty_r+0x1a>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_isatty_r+0x1a>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	20000bac 	.word	0x20000bac

0800d26c <_init>:
 800d26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26e:	bf00      	nop
 800d270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d272:	bc08      	pop	{r3}
 800d274:	469e      	mov	lr, r3
 800d276:	4770      	bx	lr

0800d278 <_fini>:
 800d278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27a:	bf00      	nop
 800d27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d27e:	bc08      	pop	{r3}
 800d280:	469e      	mov	lr, r3
 800d282:	4770      	bx	lr
